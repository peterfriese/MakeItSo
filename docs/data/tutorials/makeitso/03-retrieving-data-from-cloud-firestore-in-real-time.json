{"variants":[{"paths":["\/tutorials\/makeitso\/03-retrieving-data-from-cloud-firestore-in-real-time"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that you’ve implemented a "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":", and wrote code for storing "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":"s to Firestore, it is time to retrieve reminders from Firestore, so they can be displayed in the app’s UI."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this chapter, you will use Firestore’s snapshot listeners to implement a real-time sync between Firestore’s backend and your iOS app."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Download the project files to begin building this project, and follow the steps below."}]}],"estimatedTimeInMinutes":25,"title":"Retrieving data from Cloud Firestore in real-time","image":"hero-intro-to-cloud-firestore.png","xcodeRequirement":"Xcode 14","chapter":"Storing Data in the Cloud","kind":"hero","backgroundImage":"hero-intro-to-cloud-firestore.png","projectFiles":"03-retrieving-data-from-cloud-firestore-in-real-time.zip"},{"kind":"tasks","tasks":[{"anchor":"Implement-a-snapshot-listener","title":"Implement a snapshot listener","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Snapshot listeners are the centerpiece of Firestore’s real-time sync capabilities. When you set up a snapshot listener, you will receive the current state of the data you’re querying. For each subsequent change to the data, your snapshot listener will be called again."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"retrieving-data-from-cloud-firestore-in-real-time-01-RemindersRepository-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In "},{"type":"codeVoice","code":"RemindersRepository.swift"},{"type":"text","text":", create a new method named "},{"type":"codeVoice","code":"subscribe"},{"type":"text","text":". You will use this method to implement a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"snapshot listener"}]},{"type":"text","text":" that subscribes to the Firestore collection that contains the reminders that your app displays."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"retrieving-data-from-cloud-firestore-in-real-time-01-RemindersRepository-02.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Set up a Firestore query for fetching all reminders from the "},{"type":"codeVoice","code":"reminders"},{"type":"text","text":" collection."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"retrieving-data-from-cloud-firestore-in-real-time-01-RemindersRepository-03.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"snapshot listenener"}]},{"type":"text","text":" to the "},{"type":"codeVoice","code":"query"},{"type":"text","text":"."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This listener will be called whenever the data returned by the query changes: e.g. when a new document is added, data in a document is changed, or a document is deleted."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"retrieving-data-from-cloud-firestore-in-real-time-01-RemindersRepository-04.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Make sure the "},{"type":"codeVoice","code":"querySnapshot"},{"type":"text","text":" is not empty."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In the next step, you will map the Firestore documents contained in the snapshot to "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":" structs. If the snapshot is empty, you can leave early."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"retrieving-data-from-cloud-firestore-in-real-time-01-RemindersRepository-05.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"compactMap"},{"type":"text","text":" to iterate over the documents in the snapshot."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Inside the closure of "},{"type":"codeVoice","code":"compactmap"},{"type":"text","text":", you will write code that maps a single Firestore document to a "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":". If that mapping fails, the result will be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":". To eliminate any such "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" values from the final result, it is a common approach to use "},{"type":"codeVoice","code":"compactMap"},{"type":"text","text":": it returns an array containing the non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" results of calling the transformation."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"code":"retrieving-data-from-cloud-firestore-in-real-time-01-RemindersRepository-06.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"querySnapshot.data(as:)"},{"type":"text","text":" to map the Firestore document represented by "},{"type":"codeVoice","code":"querySnapshot"},{"type":"text","text":" to a "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":"."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Firestore supports Swift’s Codable protocol, which makes mapping Firestore documents to Swift structs a simple one-liner. No need to manually map all the individual attributes (and potentially mistyping the attribute names)!"}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"code":"retrieving-data-from-cloud-firestore-in-real-time-01-RemindersRepository-07.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add some error handling code."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s a good idea to log any mapping errors, as Firestore will provide information about what went wront when trying to map a particular document. For example, your Swift struct might have a non-optional property that is missing in the Firestore document you’re trying to map from."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"code":"retrieving-data-from-cloud-firestore-in-real-time-01-RemindersRepository-08.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, assign the result of the transformation to the "},{"type":"codeVoice","code":"reminders"},{"type":"text","text":" property."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null}]},{"anchor":"Manage-the-lifecycle-of-the-snapshot-listener","title":"Manage the lifecycle of the snapshot listener","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"For each snapshot listener, your app will keep an active connection to Firebase. On the backend, Firestore will use a "},{"type":"emphasis","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/docs\/firestore\/real-time_queries_at_scale#understand_the_real-time_query_system"}]},{"type":"text","text":" to see if any updates to any documents in the database match your snapshot listener. To conserve resources, you should deactivate any snapshot listeners you don’t currently need."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this section, you will write code to subscribe and unsubscribe from updates by registering and unregistering the snapshot listener."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"retrieving-data-from-cloud-firestore-in-real-time-02-RemindersRepository-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a private property "},{"type":"codeVoice","code":"listenerRegistration"},{"type":"text","text":" to hold a handle to the snapshot listener."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"retrieving-data-from-cloud-firestore-in-real-time-02-RemindersRepository-02.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Update the code in the "},{"type":"codeVoice","code":"subscribe"},{"type":"text","text":" method to check if a snapshot listener has already been set up, and assign the snapshot listener handle to "},{"type":"codeVoice","code":"listenerRegistration"},{"type":"text","text":" if that’s not the case."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"retrieving-data-from-cloud-firestore-in-real-time-02-RemindersRepository-03.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a method "},{"type":"codeVoice","code":"unsubscribe"},{"type":"text","text":" to deactivate the snapshot listener."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"retrieving-data-from-cloud-firestore-in-real-time-02-RemindersRepository-04.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add an initialiser to "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":", and call "},{"type":"codeVoice","code":"subscribe"},{"type":"text","text":"."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Whether or not you should call "},{"type":"codeVoice","code":"subscribe"},{"type":"text","text":" in your repository’s initialiser depends on your app. For some apps, it might be more suitable to enable the snapshot listener when a specific view becomes visible."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"code":"retrieving-data-from-cloud-firestore-in-real-time-02-RemindersRepository-05.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a deinitialiser to "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":", and call "},{"type":"codeVoice","code":"unsubscribe"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null}]},{"anchor":"Connect-the-view-model","title":"Connect the view model","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Thanks to Firestore’s real-time sync capabilities, the "},{"type":"codeVoice","code":"reminders"},{"type":"text","text":" property in "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":" will now be in sync with the data stored in Firestore. In the next few steps, you will make sure the view model is kept in sync with the repository as well."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"retrieving-data-from-cloud-firestore-in-real-time-03-RemindersListViewModel-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Update the "},{"type":"codeVoice","code":"reminders"},{"type":"text","text":" property in "},{"type":"codeVoice","code":"RemindersListViewModel"},{"type":"text","text":", and initialise it with an empty array."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"retrieving-data-from-cloud-firestore-in-real-time-03-RemindersListViewModel-02.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Import Combine, then add an initialiser to "},{"type":"codeVoice","code":"RemindersListViewModel"},{"type":"text","text":", and use Combine’s "},{"type":"codeVoice","code":"assign"},{"type":"text","text":" operator to keep the local "},{"type":"codeVoice","code":"reminders"},{"type":"text","text":" property in sync with the "},{"type":"codeVoice","code":"reminders"},{"type":"text","text":" property on "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null}]},{"anchor":"Run-the-app-to-experience-real-time-sync","title":"Run the app to experience real-time sync","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Your app is now capable of adding and displaying reminders. In this step, you will run the app on the Simulator, and connect it to the Firebase Emulator to take it for a spin."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Make sure the Firebase Emulator Suite is still running: Point your browser to "},{"type":"reference","isActive":true,"identifier":"http:\/\/127.0.0.1:4000\/firestore\/data"},{"type":"text","text":". If you don’t see the Firestore tab of the Firebase Emulator Suite, follow the steps in the "},{"type":"reference","isActive":true,"identifier":""},{"type":"text","text":" tutorial."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"storing-data-in-cloud-firestore-05-run-the-app-01.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Make sure your app is configured to connect to the Firebase Emulator: open the launch configuration and ensure the check box on the "},{"type":"codeVoice","code":"-useEmulator YES"},{"type":"text","text":" argument is checked."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"storing-data-in-cloud-firestore-05-run-the-app-02.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Click on the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Play"}]},{"type":"text","text":" button (or press "},{"type":"emphasis","inlineContent":[{"type":"text","text":"CMD+R"}]},{"type":"text","text":") to run the app on the iOS Simulator."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"storing-data-in-cloud-firestore-05-run-the-app-03.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Once the app has started, you should now see the reminders you added in the previous chapter."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"retrieving-data-from-cloud-firestore-in-real-time-04-launch-the-app-01.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Tap on the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"+ New Reminder"}]},{"type":"text","text":" button, and add a new reminder. It should show up in the "},{"type":"reference","isActive":true,"identifier":"http:\/\/127.0.0.1:4000\/firestore\/data"},{"type":"text","text":" (or in the Firestore data explorer in your online Firebase project, if you’re not using the Emulator)."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"retrieving-data-from-cloud-firestore-in-real-time-04-launch-the-app-02.mp4"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go to the "},{"type":"reference","isActive":true,"identifier":"http:\/\/127.0.0.1:4000\/firestore\/data"},{"type":"text","text":", select one of the documents that you just created, and update its "},{"type":"codeVoice","code":"title"},{"type":"text","text":" field. You should see the update in the running app."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"retrieving-data-from-cloud-firestore-in-real-time-04-launch-the-app-02.mp4"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Launch the app on an additional iOS Simulator. Any changes you make to the data in Firestore (either by editing the "},{"type":"codeVoice","code":"title"},{"type":"text","text":" attribute of one of the "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":" documents, or by adding a new reminder via one of the apps) should be visible in both Simulators and the Firestore Emulator in real-time."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"retrieving-data-from-cloud-firestore-in-real-time-04-launch-the-app-02.mp4"}]},{"anchor":"Clean-up","title":"Clean-up","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In the final step, you will clean up the code and replace the hard-coded string for the collection name with a constant value."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"retrieving-data-from-cloud-firestore-in-real-time-05-Reminder-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In "},{"type":"codeVoice","code":"Reminder.swift"},{"type":"text","text":", add an extension on "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":", and define a static property "},{"type":"codeVoice","code":"collectionName"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"retrieving-data-from-cloud-firestore-in-real-time-05-RemindersRepository-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In "},{"type":"codeVoice","code":"RemindersRepository.swift"},{"type":"text","text":", replace all occurrences of "},{"type":"codeVoice","code":"\"reminders\""},{"type":"text","text":" with "},{"type":"codeVoice","code":"Reminder.collectionName"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null}]}]},{"action":{"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"isActive":true,"type":"reference","identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/04-Updating-Data-in-Cloud-Firestore","overridingTitle":"Get started"},"featuredEyebrow":"Tutorial","kind":"callToAction","title":"Updating data in Cloud Firestore","abstract":[{"type":"text","text":"So far, the app you’re building can help you add an keep track of your todos, but you cannot mark them as completed."}]}],"identifier":{"url":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time","interfaceLanguage":"swift"},"kind":"project","metadata":{"title":"Retrieving data from Cloud Firestore in real-time","categoryPathComponent":"MakeItSo","role":"project","category":"MakeItSo"},"hierarchy":{"modules":[{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Building-a-Simple-UI","projects":[{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Create-a-New-Project"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Create-a-Reminder-Model-and-Add-some-Test-Data"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Display-a-List-of-Reminders"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Mark-Reminders-as-completed"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Create-a-Dialog-for-Adding-New-Reminders"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Pass-Data-From-the-Child-View"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Present-the-Add-Reminder-Dialog"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Brush-up-the-UI"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Wrap-Up"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Organise-the-Project-Files"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Create-a-View-Model-and-connect-it-to-the-RemindersListView"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Add-a-method-to-the-View-Model-for-adding-new-reminders"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Add-a-method-to-the-View-Model-for-toggling-the-completion-state-of-a-reminder"}]}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Building-Reusable-UI-Components","projects":[{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View#Extract-the-view"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View#Implement-parentchild-communiction"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View#Move-the-new-view-into-its-own-file"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View#Make-the-preview-provider-interactive"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View#Customise-the-preview"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Create-a-Styleable-Toggle","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Create-a-Styleable-Toggle#Create-a-custom-toggle-style"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Create-a-Styleable-Toggle#Update-the-preview-provider"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Create-a-Styleable-Toggle#Use-the-new-style-in-your-app"}]}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Connecting-Your-App-to-Firebase","projects":[{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Create-a-New-Firebase-Project"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Register-Your-App-with-Firebase"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Add-a-Firebase-Configuration-File"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Add-Firebase-SDKs-to-Your-App"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Initialize-Firebase-in-Your-App"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Launch-the-App-to-Verify-Setup"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Install-the-Firebase-CLI"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Connect-to-your-Firebase-project-and-enable-the-Emulator-Suite"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Launch-the-Emulator-and-view-the-Emulator-dashboard"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Connect-your-app-to-the-Emulator-Suite"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Use-launch-arguments-to-switch-between-the-Emulator-and-your-Firebase-project"}]}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Storing-Data-in-the-Cloud","projects":[{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Intro-to-Cloud-Firestore","sections":[]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Implement-a-repository-for-managing-reminders"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Implement-a-method-for-adding-new-reminders-to-the-repository"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Conform-Reminder-to-Codable"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Connect-the-view-model-to-the-repository"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Wrap-up"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Implement-a-snapshot-listener"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Manage-the-lifecycle-of-the-snapshot-listener"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Connect-the-view-model"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Run-the-app-to-experience-real-time-sync"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Clean-up"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/04-Updating-Data-in-Cloud-Firestore","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/04-Updating-Data-in-Cloud-Firestore#Mark-reminders-as-completed"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/04-Updating-Data-in-Cloud-Firestore#Edit-reminders"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/05-Deleting-Data-from-Cloud-Firestore","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/05-Deleting-Data-from-Cloud-Firestore#Implement-a-method-for-removing-a-single-reminder-from-the-repository"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/05-Deleting-Data-from-Cloud-Firestore#Add-a-method-for-deleting-reminders-to-the-view-model"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/05-Deleting-Data-from-Cloud-Firestore#Implement-a-swipe-action-for-deleteing-reminders-from-the-list-view"}]}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Dependency-Injection","projects":[{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Add-the-Factory-SDK-to-your-project"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Make-Firebase-available-via-Dependency-Injection"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Use-Dependency-Injection-to-inject-Firebase-into-your-Repository"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Inject-RemindersRepository-into-RemindersListViewModel"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Wrap-up"}]}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Authenticating-Users","projects":[{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/00-Intro-to-Firebase-Authentication","sections":[]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Download-the-project-files"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Implement-an-AuthenticationService"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Register-AuthenticationService-with-the-Dependency-Injection-container"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Inject-AuthenticationService-into-its-dependants"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Add-a-userId-property-to-the-Reminder-struct"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Update-the-RemindersRepository-to-operate-only-on-the-users-data"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Take-the-app-for-a-spin-and-experience-its-multi-user-capabilities"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Connect-the-app-to-your-Apple-developer-account"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Enable-the-Sign-in-with-Apple-capability-for-your-app"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Implement-Sign-in-with-Apple"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Sign-in-to-Firebase-and-create-a-new-user-account"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Connect-the-UI"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Run-the-app"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Account-Linking","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Account-Linking#Whats-the-problem"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Account-Linking#Implement-Account-Linking"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Account-Linking#Run-the-app"}]}]}],"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo","paths":[["doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo","doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase","doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Storing-Data-in-the-Cloud"]]},"references":{"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Dependency-Injection-with-Factory#Add-the-Factory-SDK-to-your-project":{"role":"pseudoSymbol","title":"Add the Factory SDK to your project","abstract":[{"type":"text","text":"Even though "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MakeItSo"}]},{"type":"text","text":" is a relatively simple app, it consists of quite a few components that need to interact with each other: models, views, view models, repositories, and different backend services like Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Add-the-Factory-SDK-to-your-project","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-dependency-injection-with-factory#Add-the-Factory-SDK-to-your-project"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Create-a-Styleable-Toggle":{"role":"project","title":"Creating a Styleable Toggle","estimatedTime":"25min","abstract":[{"type":"text","text":"When you implemented the UI for displaying reminders in the "},{"type":"codeVoice","code":"List"},{"type":"text","text":" view, you used an "},{"type":"codeVoice","code":"Image"},{"type":"text","text":" view to create the a circular check box."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Create-a-Styleable-Toggle","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/02-create-a-styleable-toggle"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project#Launch-the-App-to-Verify-Setup":{"role":"pseudoSymbol","title":"Launch the App to Verify Setup","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Launch-the-App-to-Verify-Setup","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project#Launch-the-App-to-Verify-Setup"},"retrieving-data-from-cloud-firestore-in-real-time-01-RemindersRepository-06.swift":{"syntax":"swift","content":["import Foundation","import FirebaseFirestore","import FirebaseFirestoreSwift","","public class RemindersRepository: ObservableObject {","","  @Published","  var reminders = [Reminder]()","","  func subscribe() {","    let query = Firestore.firestore().collection(\"reminders\")","","    query","      .addSnapshotListener { [weak self] (querySnapshot, error) in","        guard let documents = querySnapshot?.documents else {","          print(\"No documents\")","          return","        }","","        print(\"Mapping \\(documents.count) documents\")","        documents.compactMap { queryDocumentSnapshot in","          return queryDocumentSnapshot.data(as: Reminder.self)","        }","      }","  }","","  func addReminder(_ reminder: Reminder) throws {","    try Firestore","      .firestore()","      .collection(\"reminders\")","      .addDocument(from: reminder)","  }","","}"],"fileName":"RemindersRepository.swift","identifier":"retrieving-data-from-cloud-firestore-in-real-time-01-RemindersRepository-06.swift","type":"file","fileType":"swift","highlights":[{"line":22}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/00-Intro-to-Firebase-Authentication":{"role":"article","title":"Firebase Authenticatioon","estimatedTime":"10min","abstract":[{"type":"text","text":"Firebase Authentication provides backend services, easy-to-use SDKs, and ready-made UI libraries to authenticate users to your app. It supports authentication using passwords, phone numbers, popular federated identity providers like Google, Facebook and Twitter, and more."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/00-Intro-to-Firebase-Authentication","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/00-intro-to-firebase-authentication"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Developing-Locally-with-the-Emulator-Suite#Launch-the-Emulator-and-view-the-Emulator-dashboard":{"role":"pseudoSymbol","title":"Launch the Emulator and view the Emulator dashboard","abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite"},{"type":"text","text":" is a set of advanced tools for developers looking to build and test apps locally using Cloud Firestore, Realtime Database, Cloud Storage for Firebase, Authentication, Firebase Hosting, Cloud Functions (beta), Pub\/Sub (beta), and Firebase Extensions (beta). It provides a rich user interface to help you get running and prototyping quickly."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Launch-the-Emulator-and-view-the-Emulator-dashboard","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-developing-locally-with-the-emulator-suite#Launch-the-Emulator-and-view-the-Emulator-dashboard"},"retrieving-data-from-cloud-firestore-in-real-time-03-RemindersListViewModel-01.swift":{"syntax":"swift","content":["import Foundation","","class RemindersListViewModel: ObservableObject {","  @Published","  var reminders = [Reminder]()","","  @Published","  var errorMessage: String?","","  private var remindersRepository: RemindersRepository =  RemindersRepository()","","  func addReminder(_ reminder: Reminder) {","    do {","      try remindersRepository.addReminder(reminder)","      errorMessage = nil","    }","    catch {","      print(error)","      errorMessage = error.localizedDescription","    }","  }","","  func toggleCompleted(_ reminder: Reminder) {","    if let index = reminders.firstIndex(where: { $0.id == reminder.id} ) {","      reminders[index].isCompleted.toggle()","    }","  }","}"],"fileName":"RemindersListViewModel.swift","identifier":"retrieving-data-from-cloud-firestore-in-real-time-03-RemindersListViewModel-01.swift","type":"file","fileType":"swift","highlights":[{"line":5}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/05-Deleting-Data-from-Cloud-Firestore#Implement-a-swipe-action-for-deleteing-reminders-from-the-list-view":{"role":"pseudoSymbol","title":"Implement a swipe action for deleteing reminders from the list view","abstract":[{"type":"text","text":"In this chapter of the tutorial, you’ve written code for creating, reading, and updating data in Cloud Firestore. There is one more data operation that is common for many apps: deleting data."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/05-Deleting-Data-from-Cloud-Firestore#Implement-a-swipe-action-for-deleteing-reminders-from-the-list-view","kind":"section","type":"section","url":"\/tutorials\/makeitso\/05-deleting-data-from-cloud-firestore#Implement-a-swipe-action-for-deleteing-reminders-from-the-list-view"},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Connect-the-view-model":{"role":"pseudoSymbol","title":"Connect the view model","abstract":[{"type":"text","text":"Now that you’ve implemented a "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":", and wrote code for storing "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":"s to Firestore, it is time to retrieve reminders from Firestore, so they can be displayed in the app’s UI."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Connect-the-view-model","kind":"section","type":"section","url":"\/tutorials\/makeitso\/03-retrieving-data-from-cloud-firestore-in-real-time#Connect-the-view-model"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Anonymous-Auth#Update-the-RemindersRepository-to-operate-only-on-the-users-data":{"role":"pseudoSymbol","title":"Update the RemindersRepository to operate only on the user's data","abstract":[{"type":"text","text":"It seems like MakeItSo meets the bar for an MVP (minimum viable product): users can add new reminders, check them off, change their details, and even delete them. But - as you might have noticed when running the app on two different iOS Simulators - the app is not multi-user capable. What’s worse, it seems like all users can see everyone else’s todo items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Update-the-RemindersRepository-to-operate-only-on-the-users-data","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-anonymous-auth#Update-the-RemindersRepository-to-operate-only-on-the-users-data"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Storing-Data-in-Cloud-Firestore#Conform-Reminder-to-Codable":{"role":"pseudoSymbol","title":"Conform Reminder to Codable","abstract":[{"type":"text","text":"With the UI of the application in place, and Firebase set up for local development, it is now time to store data in the cloud."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Conform-Reminder-to-Codable","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-storing-data-in-cloud-firestore#Conform-Reminder-to-Codable"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Dependency-Injection-with-Factory#Wrap-up":{"role":"pseudoSymbol","title":"Wrap-up","abstract":[{"type":"text","text":"Even though "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MakeItSo"}]},{"type":"text","text":" is a relatively simple app, it consists of quite a few components that need to interact with each other: models, views, view models, repositories, and different backend services like Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Wrap-up","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-dependency-injection-with-factory#Wrap-up"},"doc://com.example.MakeItSo/tutorials/MakeItSo/04-Updating-Data-in-Cloud-Firestore#Mark-reminders-as-completed":{"role":"pseudoSymbol","title":"Mark reminders as completed","abstract":[{"type":"text","text":"So far, the app you’re building can help you add an keep track of your todos, but you cannot mark them as completed."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/04-Updating-Data-in-Cloud-Firestore#Mark-reminders-as-completed","kind":"section","type":"section","url":"\/tutorials\/makeitso\/04-updating-data-in-cloud-firestore#Mark-reminders-as-completed"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Brush-up-the-UI":{"role":"pseudoSymbol","title":"Brush up the UI","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Brush-up-the-UI","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Brush-up-the-UI"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Storing-Data-in-Cloud-Firestore#Connect-the-view-model-to-the-repository":{"role":"pseudoSymbol","title":"Connect the view model to the repository","abstract":[{"type":"text","text":"With the UI of the application in place, and Firebase set up for local development, it is now time to store data in the cloud."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Connect-the-view-model-to-the-repository","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-storing-data-in-cloud-firestore#Connect-the-view-model-to-the-repository"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Developing-Locally-with-the-Emulator-Suite#Connect-to-your-Firebase-project-and-enable-the-Emulator-Suite":{"role":"pseudoSymbol","title":"Connect to your Firebase project and enable the Emulator Suite","abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite"},{"type":"text","text":" is a set of advanced tools for developers looking to build and test apps locally using Cloud Firestore, Realtime Database, Cloud Storage for Firebase, Authentication, Firebase Hosting, Cloud Functions (beta), Pub\/Sub (beta), and Firebase Extensions (beta). It provides a rich user interface to help you get running and prototyping quickly."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Connect-to-your-Firebase-project-and-enable-the-Emulator-Suite","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-developing-locally-with-the-emulator-suite#Connect-to-your-Firebase-project-and-enable-the-Emulator-Suite"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Mark-Reminders-as-completed":{"role":"pseudoSymbol","title":"Mark Reminders as completed","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Mark-Reminders-as-completed","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Mark-Reminders-as-completed"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Create-a-Dialog-for-Adding-New-Reminders":{"role":"pseudoSymbol","title":"Create a Dialog for Adding New Reminders","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Create-a-Dialog-for-Adding-New-Reminders","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Create-a-Dialog-for-Adding-New-Reminders"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Anonymous-Auth#Add-a-userId-property-to-the-Reminder-struct":{"role":"pseudoSymbol","title":"Add a userId property to the Reminder struct","abstract":[{"type":"text","text":"It seems like MakeItSo meets the bar for an MVP (minimum viable product): users can add new reminders, check them off, change their details, and even delete them. But - as you might have noticed when running the app on two different iOS Simulators - the app is not multi-user capable. What’s worse, it seems like all users can see everyone else’s todo items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Add-a-userId-property-to-the-Reminder-struct","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-anonymous-auth#Add-a-userId-property-to-the-Reminder-struct"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project#Add-Firebase-SDKs-to-Your-App":{"role":"pseudoSymbol","title":"Add Firebase SDKs to Your App","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Add-Firebase-SDKs-to-Your-App","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project#Add-Firebase-SDKs-to-Your-App"},"doc://com.example.MakeItSo/tutorials/MakeItSo/05-Deleting-Data-from-Cloud-Firestore#Implement-a-method-for-removing-a-single-reminder-from-the-repository":{"role":"pseudoSymbol","title":"Implement a method for removing a single reminder from the repository","abstract":[{"type":"text","text":"In this chapter of the tutorial, you’ve written code for creating, reading, and updating data in Cloud Firestore. There is one more data operation that is common for many apps: deleting data."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/05-Deleting-Data-from-Cloud-Firestore#Implement-a-method-for-removing-a-single-reminder-from-the-repository","kind":"section","type":"section","url":"\/tutorials\/makeitso\/05-deleting-data-from-cloud-firestore#Implement-a-method-for-removing-a-single-reminder-from-the-repository"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Dependency-Injection-with-Factory#Inject-RemindersRepository-into-RemindersListViewModel":{"role":"pseudoSymbol","title":"Inject RemindersRepository into RemindersListViewModel","abstract":[{"type":"text","text":"Even though "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MakeItSo"}]},{"type":"text","text":" is a relatively simple app, it consists of quite a few components that need to interact with each other: models, views, view models, repositories, and different backend services like Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Inject-RemindersRepository-into-RemindersListViewModel","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-dependency-injection-with-factory#Inject-RemindersRepository-into-RemindersListViewModel"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Create-a-Styleable-Toggle#Create-a-custom-toggle-style":{"role":"pseudoSymbol","title":"Create a custom toggle style","abstract":[{"type":"text","text":"When you implemented the UI for displaying reminders in the "},{"type":"codeVoice","code":"List"},{"type":"text","text":" view, you used an "},{"type":"codeVoice","code":"Image"},{"type":"text","text":" view to create the a circular check box."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Create-a-Styleable-Toggle#Create-a-custom-toggle-style","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-create-a-styleable-toggle#Create-a-custom-toggle-style"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Storing-Data-in-Cloud-Firestore#Wrap-up":{"role":"pseudoSymbol","title":"Wrap up","abstract":[{"type":"text","text":"With the UI of the application in place, and Firebase set up for local development, it is now time to store data in the cloud."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Wrap-up","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-storing-data-in-cloud-firestore#Wrap-up"},"retrieving-data-from-cloud-firestore-in-real-time-04-launch-the-app-01.png":{"alt":null,"type":"image","identifier":"retrieving-data-from-cloud-firestore-in-real-time-04-launch-the-app-01.png","variants":[{"url":"\/images\/retrieving-data-from-cloud-firestore-in-real-time-04-launch-the-app-01@2x.png","traits":["2x","light"]},{"url":"\/images\/retrieving-data-from-cloud-firestore-in-real-time-04-launch-the-app-01~dark@2x.png","traits":["2x","dark"]}]},"hero-intro-to-cloud-firestore.png":{"alt":"","type":"image","identifier":"hero-intro-to-cloud-firestore.png","variants":[{"url":"\/images\/hero-intro-to-cloud-firestore.png","traits":["1x","light"]}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Manage-the-lifecycle-of-the-snapshot-listener":{"role":"pseudoSymbol","title":"Manage the lifecycle of the snapshot listener","abstract":[{"type":"text","text":"Now that you’ve implemented a "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":", and wrote code for storing "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":"s to Firestore, it is time to retrieve reminders from Firestore, so they can be displayed in the app’s UI."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Manage-the-lifecycle-of-the-snapshot-listener","kind":"section","type":"section","url":"\/tutorials\/makeitso\/03-retrieving-data-from-cloud-firestore-in-real-time#Manage-the-lifecycle-of-the-snapshot-listener"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Anonymous-Auth#Take-the-app-for-a-spin-and-experience-its-multi-user-capabilities":{"role":"pseudoSymbol","title":"Take the app for a spin and experience its multi-user capabilities","abstract":[{"type":"text","text":"It seems like MakeItSo meets the bar for an MVP (minimum viable product): users can add new reminders, check them off, change their details, and even delete them. But - as you might have noticed when running the app on two different iOS Simulators - the app is not multi-user capable. What’s worse, it seems like all users can see everyone else’s todo items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Take-the-app-for-a-spin-and-experience-its-multi-user-capabilities","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-anonymous-auth#Take-the-app-for-a-spin-and-experience-its-multi-user-capabilities"},"doc://com.example.MakeItSo/tutorials/MakeItSo":{"role":"overview","title":"SwiftUI and Firebase","abstract":[{"type":"text","text":"Learn how to use Firebase in SwiftUI apps by building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a replica of Apple’s Reminders app."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo","kind":"overview","type":"topic","url":"\/tutorials\/makeitso"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Storing-Data-in-Cloud-Firestore":{"role":"project","title":"Storing data in Cloud Firestore","estimatedTime":"25min","abstract":[{"type":"text","text":"With the UI of the application in place, and Firebase set up for local development, it is now time to store data in the cloud."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/02-storing-data-in-cloud-firestore"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Create-a-Styleable-Toggle#Update-the-preview-provider":{"role":"pseudoSymbol","title":"Update the preview provider","abstract":[{"type":"text","text":"When you implemented the UI for displaying reminders in the "},{"type":"codeVoice","code":"List"},{"type":"text","text":" view, you used an "},{"type":"codeVoice","code":"Image"},{"type":"text","text":" view to create the a circular check box."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Create-a-Styleable-Toggle#Update-the-preview-provider","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-create-a-styleable-toggle#Update-the-preview-provider"},"retrieving-data-from-cloud-firestore-in-real-time-02-RemindersRepository-02.swift":{"syntax":"swift","content":["import Foundation","import FirebaseFirestore","import FirebaseFirestoreSwift","","public class RemindersRepository: ObservableObject {","","  @Published","  var reminders = [Reminder]()","","  private var listenerRegistration: ListenerRegistration?","","  func subscribe() {","    if listenerRegistration == nil {","      let query = Firestore.firestore().collection(\"reminders\")","","      listenerRegistration = query","        .addSnapshotListener { [weak self] (querySnapshot, error) in","          guard let documents = querySnapshot?.documents else {","            print(\"No documents\")","            return","          }","","          print(\"Mapping \\(documents.count) documents\")","          self?.reminders = documents.compactMap { queryDocumentSnapshot in","            do {","              return try queryDocumentSnapshot.data(as: Reminder.self)","            }","            catch {","              print(\"Error while trying to map document \\(queryDocumentSnapshot.documentID): \\(error.localizedDescription)\")","              return nil","            }","          }","        }","    }","  }","","  func addReminder(_ reminder: Reminder) throws {","    try Firestore","      .firestore()","      .collection(\"reminders\")","      .addDocument(from: reminder)","  }","","}"],"fileName":"RemindersRepository.swift","identifier":"retrieving-data-from-cloud-firestore-in-real-time-02-RemindersRepository-02.swift","type":"file","fileType":"swift","highlights":[{"line":13},{"line":16},{"line":34}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Implementing-MVVM#Organise-the-Project-Files":{"role":"pseudoSymbol","title":"Organise the Project Files","abstract":[{"type":"text","text":"With the basic views for displaying and adding todo items set up, it is time to think about the architecture of the app."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Organise-the-Project-Files","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-implementing-mvvm#Organise-the-Project-Files"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Create-a-Styleable-Toggle#Use-the-new-style-in-your-app":{"role":"pseudoSymbol","title":"Use the new style in your app","abstract":[{"type":"text","text":"When you implemented the UI for displaying reminders in the "},{"type":"codeVoice","code":"List"},{"type":"text","text":" view, you used an "},{"type":"codeVoice","code":"Image"},{"type":"text","text":" view to create the a circular check box."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Create-a-Styleable-Toggle#Use-the-new-style-in-your-app","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-create-a-styleable-toggle#Use-the-new-style-in-your-app"},"03-retrieving-data-from-cloud-firestore-in-real-time.zip":{"checksum":"af73ae617c460dbee24660df5eae9ffcda3cf3e34d6eae7fa62ec3d4ba5c59bbec74298e720fd83985cf9df3c7279f6c4340d01ed4d351ffc308c63e59cefc73","type":"download","identifier":"03-retrieving-data-from-cloud-firestore-in-real-time.zip","url":"\/downloads\/03-retrieving-data-from-cloud-firestore-in-real-time.zip"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Dependency-Injection-with-Factory#Use-Dependency-Injection-to-inject-Firebase-into-your-Repository":{"role":"pseudoSymbol","title":"Use Dependency Injection to inject Firebase into your Repository","abstract":[{"type":"text","text":"Even though "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MakeItSo"}]},{"type":"text","text":" is a relatively simple app, it consists of quite a few components that need to interact with each other: models, views, view models, repositories, and different backend services like Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Use-Dependency-Injection-to-inject-Firebase-into-your-Repository","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-dependency-injection-with-factory#Use-Dependency-Injection-to-inject-Firebase-into-your-Repository"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Extract-Row-View#Make-the-preview-provider-interactive":{"role":"pseudoSymbol","title":"Make the preview provider interactive","abstract":[{"type":"text","text":"SwiftUI’s syntax for describing UIs in a declarative way is quite efficient, and allows you to describe rather complex UIs with relatively little code."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View#Make-the-preview-provider-interactive","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-extract-row-view#Make-the-preview-provider-interactive"},"storing-data-in-cloud-firestore-05-run-the-app-01.png":{"alt":null,"type":"image","identifier":"storing-data-in-cloud-firestore-05-run-the-app-01.png","variants":[{"url":"\/images\/storing-data-in-cloud-firestore-05-run-the-app-01@2x.png","traits":["2x","light"]}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Developing-Locally-with-the-Emulator-Suite":{"role":"project","title":"Developing locally with the Emulator Suite","estimatedTime":"25min","abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite"},{"type":"text","text":" is a set of advanced tools for developers looking to build and test apps locally using Cloud Firestore, Realtime Database, Cloud Storage for Firebase, Authentication, Firebase Hosting, Cloud Functions (beta), Pub\/Sub (beta), and Firebase Extensions (beta). It provides a rich user interface to help you get running and prototyping quickly."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/02-developing-locally-with-the-emulator-suite"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Implementing-MVVM#Add-a-method-to-the-View-Model-for-toggling-the-completion-state-of-a-reminder":{"role":"pseudoSymbol","title":"Add a method to the View Model for toggling the completion state of a reminder","abstract":[{"type":"text","text":"With the basic views for displaying and adding todo items set up, it is time to think about the architecture of the app."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Add-a-method-to-the-View-Model-for-toggling-the-completion-state-of-a-reminder","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-implementing-mvvm#Add-a-method-to-the-View-Model-for-toggling-the-completion-state-of-a-reminder"},"retrieving-data-from-cloud-firestore-in-real-time-01-RemindersRepository-01.swift":{"syntax":"swift","content":["import Foundation","import FirebaseFirestore","import FirebaseFirestoreSwift","","public class RemindersRepository: ObservableObject {","","  @Published","  var reminders = [Reminder]()","","  func subscribe() {","  }","","  func addReminder(_ reminder: Reminder) throws {","    try Firestore","      .firestore()","      .collection(\"reminders\")","      .addDocument(from: reminder)","  }","","}"],"fileName":"RemindersRepository.swift","identifier":"retrieving-data-from-cloud-firestore-in-real-time-01-RemindersRepository-01.swift","type":"file","fileType":"swift","highlights":[{"line":10},{"line":11},{"line":12}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Sign-in-with-Apple#Connect-the-UI":{"role":"pseudoSymbol","title":"Connect the UI","abstract":[{"type":"text","text":"Your app is now capable of storing data on a per-user basis. You achieved this by implementing Firebase Anonymous Authentication in the previous chapter, and then using the anonymous user’s ID to tag their reminders when storing them in Cloud Firestore."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Connect-the-UI","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-sign-in-with-apple#Connect-the-UI"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project#Register-Your-App-with-Firebase":{"role":"pseudoSymbol","title":"Register Your App with Firebase","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Register-Your-App-with-Firebase","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project#Register-Your-App-with-Firebase"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Sign-in-with-Apple#Enable-the-Sign-in-with-Apple-capability-for-your-app":{"role":"pseudoSymbol","title":"Enable the Sign in with Apple capability for your app","abstract":[{"type":"text","text":"Your app is now capable of storing data on a per-user basis. You achieved this by implementing Firebase Anonymous Authentication in the previous chapter, and then using the anonymous user’s ID to tag their reminders when storing them in Cloud Firestore."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Enable-the-Sign-in-with-Apple-capability-for-your-app","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-sign-in-with-apple#Enable-the-Sign-in-with-Apple-capability-for-your-app"},"retrieving-data-from-cloud-firestore-in-real-time-04-launch-the-app-02.mp4":{"poster":null,"alt":null,"type":"video","identifier":"retrieving-data-from-cloud-firestore-in-real-time-04-launch-the-app-02.mp4","variants":[{"url":"\/videos\/retrieving-data-from-cloud-firestore-in-real-time-04-launch-the-app-02.mp4","traits":["1x","light"]},{"url":"\/videos\/retrieving-data-from-cloud-firestore-in-real-time-04-launch-the-app-02~dark.mp4","traits":["1x","dark"]}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Intro-to-Cloud-Firestore":{"role":"article","title":"Cloud Firestore","estimatedTime":"5min","abstract":[{"type":"text","text":"Cloud Firestore is Firebase’s NoSQL cloud database for mobile, web, and server development."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Intro-to-Cloud-Firestore","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/01-intro-to-cloud-firestore"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Developing-Locally-with-the-Emulator-Suite#Install-the-Firebase-CLI":{"role":"pseudoSymbol","title":"Install the Firebase CLI","abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite"},{"type":"text","text":" is a set of advanced tools for developers looking to build and test apps locally using Cloud Firestore, Realtime Database, Cloud Storage for Firebase, Authentication, Firebase Hosting, Cloud Functions (beta), Pub\/Sub (beta), and Firebase Extensions (beta). It provides a rich user interface to help you get running and prototyping quickly."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Install-the-Firebase-CLI","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-developing-locally-with-the-emulator-suite#Install-the-Firebase-CLI"},"retrieving-data-from-cloud-firestore-in-real-time-01-RemindersRepository-07.swift":{"syntax":"swift","content":["import Foundation","import FirebaseFirestore","import FirebaseFirestoreSwift","","public class RemindersRepository: ObservableObject {","","  @Published","  var reminders = [Reminder]()","","  func subscribe() {","    let query = Firestore.firestore().collection(\"reminders\")","","    query","      .addSnapshotListener { [weak self] (querySnapshot, error) in","        guard let documents = querySnapshot?.documents else {","          print(\"No documents\")","          return","        }","","        print(\"Mapping \\(documents.count) documents\")","        documents.compactMap { queryDocumentSnapshot in","          do {","            return try queryDocumentSnapshot.data(as: Reminder.self)","          }","          catch {","            print(\"Error while trying to map document \\(queryDocumentSnapshot.documentID): \\(error.localizedDescription)\")","            return nil","          }","        }","      }","  }","","  func addReminder(_ reminder: Reminder) throws {","    try Firestore","      .firestore()","      .collection(\"reminders\")","      .addDocument(from: reminder)","  }","","}"],"fileName":"RemindersRepository.swift","identifier":"retrieving-data-from-cloud-firestore-in-real-time-01-RemindersRepository-07.swift","type":"file","fileType":"swift","highlights":[{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28}]},"retrieving-data-from-cloud-firestore-in-real-time-02-RemindersRepository-04.swift":{"syntax":"swift","content":["import Foundation","import FirebaseFirestore","import FirebaseFirestoreSwift","","public class RemindersRepository: ObservableObject {","","  @Published","  var reminders = [Reminder]()","","  private var listenerRegistration: ListenerRegistration?","","  init() {","    subscribe()","  }","","  func subscribe() {","    if listenerRegistration == nil {","      let query = Firestore.firestore().collection(\"reminders\")","","      listenerRegistration = query","        .addSnapshotListener { [weak self] (querySnapshot, error) in","          guard let documents = querySnapshot?.documents else {","            print(\"No documents\")","            return","          }","","          print(\"Mapping \\(documents.count) documents\")","          self?.reminders = documents.compactMap { queryDocumentSnapshot in","            do {","              return try queryDocumentSnapshot.data(as: Reminder.self)","            }","            catch {","              print(\"Error while trying to map document \\(queryDocumentSnapshot.documentID): \\(error.localizedDescription)\")","              return nil","            }","          }","        }","    }","  }","","  private func unsubscribe() {","    if listenerRegistration != nil {","      listenerRegistration?.remove()","      listenerRegistration = nil","    }","  }","","  func addReminder(_ reminder: Reminder) throws {","    try Firestore","      .firestore()","      .collection(\"reminders\")","      .addDocument(from: reminder)","  }","","}"],"fileName":"RemindersRepository.swift","identifier":"retrieving-data-from-cloud-firestore-in-real-time-02-RemindersRepository-04.swift","type":"file","fileType":"swift","highlights":[{"line":12},{"line":13},{"line":14},{"line":15}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Extract-Row-View#Implement-parentchild-communiction":{"role":"pseudoSymbol","title":"Implement parent\/child communiction","abstract":[{"type":"text","text":"SwiftUI’s syntax for describing UIs in a declarative way is quite efficient, and allows you to describe rather complex UIs with relatively little code."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View#Implement-parentchild-communiction","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-extract-row-view#Implement-parentchild-communiction"},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time":{"role":"project","title":"Retrieving data from Cloud Firestore in real-time","estimatedTime":"25min","abstract":[{"type":"text","text":"Now that you’ve implemented a "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":", and wrote code for storing "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":"s to Firestore, it is time to retrieve reminders from Firestore, so they can be displayed in the app’s UI."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/03-retrieving-data-from-cloud-firestore-in-real-time"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project#Add-a-Firebase-Configuration-File":{"role":"pseudoSymbol","title":"Add a Firebase Configuration File","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Add-a-Firebase-Configuration-File","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project#Add-a-Firebase-Configuration-File"},"http://127.0.0.1:4000/firestore/data":{"title":"Firestore Emulator","titleInlineContent":[{"type":"text","text":"Firestore Emulator"}],"type":"link","identifier":"http:\/\/127.0.0.1:4000\/firestore\/data","url":"http:\/\/127.0.0.1:4000\/firestore\/data"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Extract-Row-View#Extract-the-view":{"role":"pseudoSymbol","title":"Extract the view","abstract":[{"type":"text","text":"SwiftUI’s syntax for describing UIs in a declarative way is quite efficient, and allows you to describe rather complex UIs with relatively little code."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View#Extract-the-view","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-extract-row-view#Extract-the-view"},"doc://com.example.MakeItSo/tutorials/MakeItSo/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase/Connecting-Your-App-to-Firebase":{"role":"article","title":"Connecting Your App to Firebase","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Connecting-Your-App-to-Firebase","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/creating-a-simple-todo-list-app-with-swiftui-and-firebase\/connecting-your-app-to-firebase"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Sign-in-with-Apple#Run-the-app":{"role":"pseudoSymbol","title":"Run the app","abstract":[{"type":"text","text":"Your app is now capable of storing data on a per-user basis. You achieved this by implementing Firebase Anonymous Authentication in the previous chapter, and then using the anonymous user’s ID to tag their reminders when storing them in Cloud Firestore."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Run-the-app","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-sign-in-with-apple#Run-the-app"},"retrieving-data-from-cloud-firestore-in-real-time-03-RemindersListViewModel-02.swift":{"syntax":"swift","content":["import Foundation","import Combine","","class RemindersListViewModel: ObservableObject {","  @Published","  var reminders = [Reminder]()","","  @Published","  var errorMessage: String?","","  private var remindersRepository: RemindersRepository =  RemindersRepository()","","  init() {","    remindersRepository","      .$reminders","      .assign(to: &$reminders)","  }","","  func addReminder(_ reminder: Reminder) {","    do {","      try remindersRepository.addReminder(reminder)","      errorMessage = nil","    }","    catch {","      print(error)","      errorMessage = error.localizedDescription","    }","  }","","  func toggleCompleted(_ reminder: Reminder) {","    if let index = reminders.firstIndex(where: { $0.id == reminder.id} ) {","      reminders[index].isCompleted.toggle()","    }","  }","}"],"fileName":"RemindersListViewModel.swift","identifier":"retrieving-data-from-cloud-firestore-in-real-time-03-RemindersListViewModel-02.swift","type":"file","fileType":"swift","highlights":[{"line":2},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Sign-in-with-Apple#Implement-Sign-in-with-Apple":{"role":"pseudoSymbol","title":"Implement Sign in with Apple","abstract":[{"type":"text","text":"Your app is now capable of storing data on a per-user basis. You achieved this by implementing Firebase Anonymous Authentication in the previous chapter, and then using the anonymous user’s ID to tag their reminders when storing them in Cloud Firestore."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Implement-Sign-in-with-Apple","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-sign-in-with-apple#Implement-Sign-in-with-Apple"},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Account-Linking":{"role":"project","title":"Account Linking","estimatedTime":"10min","abstract":[{"type":"text","text":"Users of your app can now sign in to the app using their Apple ID, but unfortunately, when they do so, any data they might have entered before signing in will disappear. This is probably not what the user expected!"}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Account-Linking","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/03-account-linking"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Implementing-MVVM#Create-a-View-Model-and-connect-it-to-the-RemindersListView":{"role":"pseudoSymbol","title":"Create a View Model and connect it to the RemindersListView","abstract":[{"type":"text","text":"With the basic views for displaying and adding todo items set up, it is time to think about the architecture of the app."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Create-a-View-Model-and-connect-it-to-the-RemindersListView","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-implementing-mvvm#Create-a-View-Model-and-connect-it-to-the-RemindersListView"},"doc://com.example.MakeItSo/tutorials/MakeItSo/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase/Authenticating-Users":{"role":"article","title":"Authenticating Users","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Authenticating-Users","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/creating-a-simple-todo-list-app-with-swiftui-and-firebase\/authenticating-users"},"retrieving-data-from-cloud-firestore-in-real-time-05-RemindersRepository-01.swift":{"syntax":"swift","content":["import Foundation","import FirebaseFirestore","import FirebaseFirestoreSwift","","public class RemindersRepository: ObservableObject {","","  @Published","  var reminders = [Reminder]()","","  private var listenerRegistration: ListenerRegistration?","","  init() {","    subscribe()","  }","","  deinit {","    unsubscribe()","  }","","  func subscribe() {","    if listenerRegistration == nil {","      let query = Firestore.firestore().collection(Reminder.collectionName)","","      listenerRegistration = query","        .addSnapshotListener { [weak self] (querySnapshot, error) in","          guard let documents = querySnapshot?.documents else {","            print(\"No documents\")","            return","          }","","          print(\"Mapping \\(documents.count) documents\")","          self?.reminders = documents.compactMap { queryDocumentSnapshot in","            do {","              return try queryDocumentSnapshot.data(as: Reminder.self)","            }","            catch {","              print(\"Error while trying to map document \\(queryDocumentSnapshot.documentID): \\(error.localizedDescription)\")","              return nil","            }","          }","        }","    }","  }","","  private func unsubscribe() {","    if listenerRegistration != nil {","      listenerRegistration?.remove()","      listenerRegistration = nil","    }","  }","","  func addReminder(_ reminder: Reminder) throws {","    try Firestore","      .firestore()","      .collection(Reminder.collectionName)","      .addDocument(from: reminder)","  }","","}"],"fileName":"RemindersRepository.swift","identifier":"retrieving-data-from-cloud-firestore-in-real-time-05-RemindersRepository-01.swift","type":"file","fileType":"swift","highlights":[{"line":22},{"line":55}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/05-Deleting-Data-from-Cloud-Firestore#Add-a-method-for-deleting-reminders-to-the-view-model":{"role":"pseudoSymbol","title":"Add a method for deleting reminders to the view model","abstract":[{"type":"text","text":"In this chapter of the tutorial, you’ve written code for creating, reading, and updating data in Cloud Firestore. There is one more data operation that is common for many apps: deleting data."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/05-Deleting-Data-from-Cloud-Firestore#Add-a-method-for-deleting-reminders-to-the-view-model","kind":"section","type":"section","url":"\/tutorials\/makeitso\/05-deleting-data-from-cloud-firestore#Add-a-method-for-deleting-reminders-to-the-view-model"},"retrieving-data-from-cloud-firestore-in-real-time-01-RemindersRepository-03.swift":{"syntax":"swift","content":["import Foundation","import FirebaseFirestore","import FirebaseFirestoreSwift","","public class RemindersRepository: ObservableObject {","","  @Published","  var reminders = [Reminder]()","","  func subscribe() {","    let query = Firestore.firestore().collection(\"reminders\")","","    query","      .addSnapshotListener { [weak self] (querySnapshot, error) in","      }","  }","","  func addReminder(_ reminder: Reminder) throws {","    try Firestore","      .firestore()","      .collection(\"reminders\")","      .addDocument(from: reminder)","  }","","}"],"fileName":"RemindersRepository.swift","identifier":"retrieving-data-from-cloud-firestore-in-real-time-01-RemindersRepository-03.swift","type":"file","fileType":"swift","highlights":[{"line":12},{"line":13},{"line":14},{"line":15}]},"retrieving-data-from-cloud-firestore-in-real-time-01-RemindersRepository-04.swift":{"syntax":"swift","content":["import Foundation","import FirebaseFirestore","import FirebaseFirestoreSwift","","public class RemindersRepository: ObservableObject {","","  @Published","  var reminders = [Reminder]()","","  func subscribe() {","    let query = Firestore.firestore().collection(\"reminders\")","","    query","      .addSnapshotListener { [weak self] (querySnapshot, error) in","        guard let documents = querySnapshot?.documents else {","          print(\"No documents\")","          return","        }","","      }","  }","","  func addReminder(_ reminder: Reminder) throws {","    try Firestore","      .firestore()","      .collection(\"reminders\")","      .addDocument(from: reminder)","  }","","}"],"fileName":"RemindersRepository.swift","identifier":"retrieving-data-from-cloud-firestore-in-real-time-01-RemindersRepository-04.swift","type":"file","fileType":"swift","highlights":[{"line":15},{"line":16},{"line":17},{"line":18},{"line":19}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Wrap-Up":{"role":"pseudoSymbol","title":"Wrap Up","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Wrap-Up","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Wrap-Up"},"doc://com.example.MakeItSo/tutorials/MakeItSo/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase/Dependency-Injection":{"role":"article","title":"Dependency Injection","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Dependency-Injection","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/creating-a-simple-todo-list-app-with-swiftui-and-firebase\/dependency-injection"},"retrieving-data-from-cloud-firestore-in-real-time-01-RemindersRepository-05.swift":{"syntax":"swift","content":["import Foundation","import FirebaseFirestore","import FirebaseFirestoreSwift","","public class RemindersRepository: ObservableObject {","","  @Published","  var reminders = [Reminder]()","","  func subscribe() {","    let query = Firestore.firestore().collection(\"reminders\")","","    query","      .addSnapshotListener { [weak self] (querySnapshot, error) in","        guard let documents = querySnapshot?.documents else {","          print(\"No documents\")","          return","        }","","        print(\"Mapping \\(documents.count) documents\")","        documents.compactMap { queryDocumentSnapshot in","        }","      }","  }","","  func addReminder(_ reminder: Reminder) throws {","    try Firestore","      .firestore()","      .collection(\"reminders\")","      .addDocument(from: reminder)","  }","","}"],"fileName":"RemindersRepository.swift","identifier":"retrieving-data-from-cloud-firestore-in-real-time-01-RemindersRepository-05.swift","type":"file","fileType":"swift","highlights":[{"line":20},{"line":21},{"line":22}]},"storing-data-in-cloud-firestore-05-run-the-app-03.png":{"alt":null,"type":"image","identifier":"storing-data-in-cloud-firestore-05-run-the-app-03.png","variants":[{"url":"\/images\/storing-data-in-cloud-firestore-05-run-the-app-03@2x.png","traits":["2x","light"]},{"url":"\/images\/storing-data-in-cloud-firestore-05-run-the-app-03~dark@2x.png","traits":["2x","dark"]}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Dependency-Injection-with-Factory":{"role":"project","title":"Dependency Injection with Factory","estimatedTime":"20min","abstract":[{"type":"text","text":"Even though "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MakeItSo"}]},{"type":"text","text":" is a relatively simple app, it consists of quite a few components that need to interact with each other: models, views, view models, repositories, and different backend services like Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/01-dependency-injection-with-factory"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Display-a-List-of-Reminders":{"role":"pseudoSymbol","title":"Display a List of Reminders","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Display-a-List-of-Reminders","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Display-a-List-of-Reminders"},"doc://com.example.MakeItSo/tutorials/MakeItSo/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase/Storing-Data-in-the-Cloud":{"role":"article","title":"Storing Data in the Cloud","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Storing-Data-in-the-Cloud","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/creating-a-simple-todo-list-app-with-swiftui-and-firebase\/storing-data-in-the-cloud"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Anonymous-Auth#Register-AuthenticationService-with-the-Dependency-Injection-container":{"role":"pseudoSymbol","title":"Register AuthenticationService with the Dependency Injection container","abstract":[{"type":"text","text":"It seems like MakeItSo meets the bar for an MVP (minimum viable product): users can add new reminders, check them off, change their details, and even delete them. But - as you might have noticed when running the app on two different iOS Simulators - the app is not multi-user capable. What’s worse, it seems like all users can see everyone else’s todo items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Register-AuthenticationService-with-the-Dependency-Injection-container","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-anonymous-auth#Register-AuthenticationService-with-the-Dependency-Injection-container"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Present-the-Add-Reminder-Dialog":{"role":"pseudoSymbol","title":"Present the Add Reminder Dialog","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Present-the-Add-Reminder-Dialog","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Present-the-Add-Reminder-Dialog"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Create-a-Reminder-Model-and-Add-some-Test-Data":{"role":"pseudoSymbol","title":"Create a Reminder Model and Add some Test Data","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Create-a-Reminder-Model-and-Add-some-Test-Data","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Create-a-Reminder-Model-and-Add-some-Test-Data"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Anonymous-Auth":{"role":"project","title":"Implementing guest users with Firebase Anonymous Authentication","estimatedTime":"35min","abstract":[{"type":"text","text":"It seems like MakeItSo meets the bar for an MVP (minimum viable product): users can add new reminders, check them off, change their details, and even delete them. But - as you might have noticed when running the app on two different iOS Simulators - the app is not multi-user capable. What’s worse, it seems like all users can see everyone else’s todo items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/01-anonymous-auth"},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Run-the-app-to-experience-real-time-sync":{"role":"pseudoSymbol","title":"Run the app to experience real-time sync","abstract":[{"type":"text","text":"Now that you’ve implemented a "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":", and wrote code for storing "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":"s to Firestore, it is time to retrieve reminders from Firestore, so they can be displayed in the app’s UI."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Run-the-app-to-experience-real-time-sync","kind":"section","type":"section","url":"\/tutorials\/makeitso\/03-retrieving-data-from-cloud-firestore-in-real-time#Run-the-app-to-experience-real-time-sync"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Sign-in-with-Apple#Sign-in-to-Firebase-and-create-a-new-user-account":{"role":"pseudoSymbol","title":"Sign in to Firebase and create a new user account","abstract":[{"type":"text","text":"Your app is now capable of storing data on a per-user basis. You achieved this by implementing Firebase Anonymous Authentication in the previous chapter, and then using the anonymous user’s ID to tag their reminders when storing them in Cloud Firestore."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Sign-in-to-Firebase-and-create-a-new-user-account","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-sign-in-with-apple#Sign-in-to-Firebase-and-create-a-new-user-account"},"retrieving-data-from-cloud-firestore-in-real-time-01-RemindersRepository-02.swift":{"syntax":"swift","content":["import Foundation","import FirebaseFirestore","import FirebaseFirestoreSwift","","public class RemindersRepository: ObservableObject {","","  @Published","  var reminders = [Reminder]()","","  func subscribe() {","    let query = Firestore.firestore().collection(\"reminders\")","  }","","  func addReminder(_ reminder: Reminder) throws {","    try Firestore","      .firestore()","      .collection(\"reminders\")","      .addDocument(from: reminder)","  }","","}"],"fileName":"RemindersRepository.swift","identifier":"retrieving-data-from-cloud-firestore-in-real-time-01-RemindersRepository-02.swift","type":"file","fileType":"swift","highlights":[{"line":11}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Clean-up":{"role":"pseudoSymbol","title":"Clean-up","abstract":[{"type":"text","text":"Now that you’ve implemented a "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":", and wrote code for storing "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":"s to Firestore, it is time to retrieve reminders from Firestore, so they can be displayed in the app’s UI."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Clean-up","kind":"section","type":"section","url":"\/tutorials\/makeitso\/03-retrieving-data-from-cloud-firestore-in-real-time#Clean-up"},"retrieving-data-from-cloud-firestore-in-real-time-02-RemindersRepository-01.swift":{"syntax":"swift","content":["import Foundation","import FirebaseFirestore","import FirebaseFirestoreSwift","","public class RemindersRepository: ObservableObject {","","  @Published","  var reminders = [Reminder]()","","  private var listenerRegistration: ListenerRegistration?","","  func subscribe() {","    let query = Firestore.firestore().collection(\"reminders\")","","    query","      .addSnapshotListener { [weak self] (querySnapshot, error) in","        guard let documents = querySnapshot?.documents else {","          print(\"No documents\")","          return","        }","","        print(\"Mapping \\(documents.count) documents\")","        self?.reminders = documents.compactMap { queryDocumentSnapshot in","          do {","            return try queryDocumentSnapshot.data(as: Reminder.self)","          }","          catch {","            print(\"Error while trying to map document \\(queryDocumentSnapshot.documentID): \\(error.localizedDescription)\")","            return nil","          }","        }","      }","  }","","  func addReminder(_ reminder: Reminder) throws {","    try Firestore","      .firestore()","      .collection(\"reminders\")","      .addDocument(from: reminder)","  }","","}"],"fileName":"RemindersRepository.swift","identifier":"retrieving-data-from-cloud-firestore-in-real-time-02-RemindersRepository-01.swift","type":"file","fileType":"swift","highlights":[{"line":10},{"line":11}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Sign-in-with-Apple":{"role":"project","title":"Sign in with Apple and Firebase Authentication","estimatedTime":"25min","abstract":[{"type":"text","text":"Your app is now capable of storing data on a per-user basis. You achieved this by implementing Firebase Anonymous Authentication in the previous chapter, and then using the anonymous user’s ID to tag their reminders when storing them in Cloud Firestore."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/02-sign-in-with-apple"},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Account-Linking#Whats-the-problem":{"role":"pseudoSymbol","title":"What's the problem","abstract":[{"type":"text","text":"Users of your app can now sign in to the app using their Apple ID, but unfortunately, when they do so, any data they might have entered before signing in will disappear. This is probably not what the user expected!"}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Account-Linking#Whats-the-problem","kind":"section","type":"section","url":"\/tutorials\/makeitso\/03-account-linking#Whats-the-problem"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project":{"role":"project","title":"Adding Firebase to Your Project","estimatedTime":"25min","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project"},"doc://com.example.MakeItSo/tutorials/MakeItSo/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase/Building-Reusable-UI-Components":{"role":"article","title":"Building Reusable UI Components","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Building-Reusable-UI-Components","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/creating-a-simple-todo-list-app-with-swiftui-and-firebase\/building-reusable-ui-components"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project#Initialize-Firebase-in-Your-App":{"role":"pseudoSymbol","title":"Initialize Firebase in Your App","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Initialize-Firebase-in-Your-App","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project#Initialize-Firebase-in-Your-App"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project#Create-a-New-Firebase-Project":{"role":"pseudoSymbol","title":"Create a New Firebase Project ","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Create-a-New-Firebase-Project","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project#Create-a-New-Firebase-Project"},"retrieving-data-from-cloud-firestore-in-real-time-02-RemindersRepository-05.swift":{"syntax":"swift","content":["import Foundation","import FirebaseFirestore","import FirebaseFirestoreSwift","","public class RemindersRepository: ObservableObject {","","  @Published","  var reminders = [Reminder]()","","  private var listenerRegistration: ListenerRegistration?","","  init() {","    subscribe()","  }","","  deinit {","    unsubscribe()","  }","","  func subscribe() {","    if listenerRegistration == nil {","      let query = Firestore.firestore().collection(\"reminders\")","","      listenerRegistration = query","        .addSnapshotListener { [weak self] (querySnapshot, error) in","          guard let documents = querySnapshot?.documents else {","            print(\"No documents\")","            return","          }","","          print(\"Mapping \\(documents.count) documents\")","          self?.reminders = documents.compactMap { queryDocumentSnapshot in","            do {","              return try queryDocumentSnapshot.data(as: Reminder.self)","            }","            catch {","              print(\"Error while trying to map document \\(queryDocumentSnapshot.documentID): \\(error.localizedDescription)\")","              return nil","            }","          }","        }","    }","  }","","  private func unsubscribe() {","    if listenerRegistration != nil {","      listenerRegistration?.remove()","      listenerRegistration = nil","    }","  }","","  func addReminder(_ reminder: Reminder) throws {","    try Firestore","      .firestore()","      .collection(\"reminders\")","      .addDocument(from: reminder)","  }","","}"],"fileName":"RemindersRepository.swift","identifier":"retrieving-data-from-cloud-firestore-in-real-time-02-RemindersRepository-05.swift","type":"file","fileType":"swift","highlights":[{"line":16},{"line":17},{"line":18},{"line":19}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI":{"role":"project","title":"Building a Simple Todo List UI","estimatedTime":"25min","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui"},"doc://com.example.MakeItSo/tutorials/MakeItSo/04-Updating-Data-in-Cloud-Firestore":{"role":"project","title":"Updating data in Cloud Firestore","estimatedTime":"35min","abstract":[{"type":"text","text":"So far, the app you’re building can help you add an keep track of your todos, but you cannot mark them as completed."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/04-Updating-Data-in-Cloud-Firestore","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/04-updating-data-in-cloud-firestore"},"https://firebase.google.com/docs/firestore/real-time_queries_at_scale#understand_the_real-time_query_system":{"title":"reverse query matcher","titleInlineContent":[{"type":"text","text":"reverse query matcher"}],"type":"link","identifier":"https:\/\/firebase.google.com\/docs\/firestore\/real-time_queries_at_scale#understand_the_real-time_query_system","url":"https:\/\/firebase.google.com\/docs\/firestore\/real-time_queries_at_scale#understand_the_real-time_query_system"},"doc://com.example.MakeItSo/tutorials/MakeItSo/05-Deleting-Data-from-Cloud-Firestore":{"role":"project","title":"Deleting data from Cloud Firestore","estimatedTime":"15min","abstract":[{"type":"text","text":"In this chapter of the tutorial, you’ve written code for creating, reading, and updating data in Cloud Firestore. There is one more data operation that is common for many apps: deleting data."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/05-Deleting-Data-from-Cloud-Firestore","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/05-deleting-data-from-cloud-firestore"},"retrieving-data-from-cloud-firestore-in-real-time-05-Reminder-01.swift":{"syntax":"swift","content":["import Foundation","import FirebaseFirestoreSwift","","struct Reminder: Identifiable, Codable {","  @DocumentID","  var id: String?","  var title: String","  var isCompleted = false","}","","extension Reminder {","  static let collectionName = \"reminders\"","}","","extension Reminder {","  static let samples = [","    Reminder(title: \"Build sample app\", isCompleted: true),","    Reminder(title: \"Create tutorial\"),","    Reminder(title: \"???\"),","    Reminder(title: \"PROFIT!\"),","  ]","}"],"fileName":"Reminder.swift","identifier":"retrieving-data-from-cloud-firestore-in-real-time-05-Reminder-01.swift","type":"file","fileType":"swift","highlights":[{"line":11},{"line":12},{"line":13}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Anonymous-Auth#Download-the-project-files":{"role":"pseudoSymbol","title":"Download the project files","abstract":[{"type":"text","text":"It seems like MakeItSo meets the bar for an MVP (minimum viable product): users can add new reminders, check them off, change their details, and even delete them. But - as you might have noticed when running the app on two different iOS Simulators - the app is not multi-user capable. What’s worse, it seems like all users can see everyone else’s todo items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Download-the-project-files","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-anonymous-auth#Download-the-project-files"},"":{"title":"Developing Locally with the Emulator Suite","titleInlineContent":[{"type":"text","text":"Developing Locally with the Emulator Suite"}],"type":"link","identifier":"","url":""},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Account-Linking#Run-the-app":{"role":"pseudoSymbol","title":"Run the app","abstract":[{"type":"text","text":"Users of your app can now sign in to the app using their Apple ID, but unfortunately, when they do so, any data they might have entered before signing in will disappear. This is probably not what the user expected!"}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Account-Linking#Run-the-app","kind":"section","type":"section","url":"\/tutorials\/makeitso\/03-account-linking#Run-the-app"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Pass-Data-From-the-Child-View":{"role":"pseudoSymbol","title":"Pass Data From the Child View","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Pass-Data-From-the-Child-View","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Pass-Data-From-the-Child-View"},"retrieving-data-from-cloud-firestore-in-real-time-01-RemindersRepository-08.swift":{"syntax":"swift","content":["import Foundation","import FirebaseFirestore","import FirebaseFirestoreSwift","","public class RemindersRepository: ObservableObject {","","  @Published","  var reminders = [Reminder]()","","  func subscribe() {","    let query = Firestore.firestore().collection(\"reminders\")","","    query","      .addSnapshotListener { [weak self] (querySnapshot, error) in","        guard let documents = querySnapshot?.documents else {","          print(\"No documents\")","          return","        }","","        print(\"Mapping \\(documents.count) documents\")","        self?.reminders = documents.compactMap { queryDocumentSnapshot in","          do {","            return try queryDocumentSnapshot.data(as: Reminder.self)","          }","          catch {","            print(\"Error while trying to map document \\(queryDocumentSnapshot.documentID): \\(error.localizedDescription)\")","            return nil","          }","        }","      }","  }","","  func addReminder(_ reminder: Reminder) throws {","    try Firestore","      .firestore()","      .collection(\"reminders\")","      .addDocument(from: reminder)","  }","","}"],"fileName":"RemindersRepository.swift","identifier":"retrieving-data-from-cloud-firestore-in-real-time-01-RemindersRepository-08.swift","type":"file","fileType":"swift","highlights":[{"line":21}]},"Xcode 14":{"title":"Xcode 14","type":"xcodeRequirement","identifier":"Xcode 14","url":"https:\/\/xcodereleases.com\/"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Sign-in-with-Apple#Connect-the-app-to-your-Apple-developer-account":{"role":"pseudoSymbol","title":"Connect the app to your Apple developer account","abstract":[{"type":"text","text":"Your app is now capable of storing data on a per-user basis. You achieved this by implementing Firebase Anonymous Authentication in the previous chapter, and then using the anonymous user’s ID to tag their reminders when storing them in Cloud Firestore."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Connect-the-app-to-your-Apple-developer-account","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-sign-in-with-apple#Connect-the-app-to-your-Apple-developer-account"},"doc://com.example.MakeItSo/tutorials/MakeItSo/04-Updating-Data-in-Cloud-Firestore#Edit-reminders":{"role":"pseudoSymbol","title":"Edit reminders","abstract":[{"type":"text","text":"So far, the app you’re building can help you add an keep track of your todos, but you cannot mark them as completed."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/04-Updating-Data-in-Cloud-Firestore#Edit-reminders","kind":"section","type":"section","url":"\/tutorials\/makeitso\/04-updating-data-in-cloud-firestore#Edit-reminders"},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Implement-a-snapshot-listener":{"role":"pseudoSymbol","title":"Implement a snapshot listener","abstract":[{"type":"text","text":"Now that you’ve implemented a "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":", and wrote code for storing "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":"s to Firestore, it is time to retrieve reminders from Firestore, so they can be displayed in the app’s UI."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Implement-a-snapshot-listener","kind":"section","type":"section","url":"\/tutorials\/makeitso\/03-retrieving-data-from-cloud-firestore-in-real-time#Implement-a-snapshot-listener"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Implementing-MVVM#Add-a-method-to-the-View-Model-for-adding-new-reminders":{"role":"pseudoSymbol","title":"Add a method to the View Model for adding new reminders","abstract":[{"type":"text","text":"With the basic views for displaying and adding todo items set up, it is time to think about the architecture of the app."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Add-a-method-to-the-View-Model-for-adding-new-reminders","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-implementing-mvvm#Add-a-method-to-the-View-Model-for-adding-new-reminders"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Create-a-New-Project":{"role":"pseudoSymbol","title":"Create a New Project","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Create-a-New-Project","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Create-a-New-Project"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Implementing-MVVM":{"role":"project","title":"Implementing Model, View, ViewModel (MVVM)","estimatedTime":"20min","abstract":[{"type":"text","text":"With the basic views for displaying and adding todo items set up, it is time to think about the architecture of the app."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/02-implementing-mvvm"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Developing-Locally-with-the-Emulator-Suite#Connect-your-app-to-the-Emulator-Suite":{"role":"pseudoSymbol","title":"Connect your app to the Emulator Suite","abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite"},{"type":"text","text":" is a set of advanced tools for developers looking to build and test apps locally using Cloud Firestore, Realtime Database, Cloud Storage for Firebase, Authentication, Firebase Hosting, Cloud Functions (beta), Pub\/Sub (beta), and Firebase Extensions (beta). It provides a rich user interface to help you get running and prototyping quickly."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Connect-your-app-to-the-Emulator-Suite","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-developing-locally-with-the-emulator-suite#Connect-your-app-to-the-Emulator-Suite"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Developing-Locally-with-the-Emulator-Suite#Use-launch-arguments-to-switch-between-the-Emulator-and-your-Firebase-project":{"role":"pseudoSymbol","title":"Use launch arguments to switch between the Emulator and your Firebase project","abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite"},{"type":"text","text":" is a set of advanced tools for developers looking to build and test apps locally using Cloud Firestore, Realtime Database, Cloud Storage for Firebase, Authentication, Firebase Hosting, Cloud Functions (beta), Pub\/Sub (beta), and Firebase Extensions (beta). It provides a rich user interface to help you get running and prototyping quickly."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Use-launch-arguments-to-switch-between-the-Emulator-and-your-Firebase-project","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-developing-locally-with-the-emulator-suite#Use-launch-arguments-to-switch-between-the-Emulator-and-your-Firebase-project"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Storing-Data-in-Cloud-Firestore#Implement-a-repository-for-managing-reminders":{"role":"pseudoSymbol","title":"Implement a repository for managing reminders","abstract":[{"type":"text","text":"With the UI of the application in place, and Firebase set up for local development, it is now time to store data in the cloud."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Implement-a-repository-for-managing-reminders","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-storing-data-in-cloud-firestore#Implement-a-repository-for-managing-reminders"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Storing-Data-in-Cloud-Firestore#Implement-a-method-for-adding-new-reminders-to-the-repository":{"role":"pseudoSymbol","title":"Implement a method for adding new reminders to the repository","abstract":[{"type":"text","text":"With the UI of the application in place, and Firebase set up for local development, it is now time to store data in the cloud."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Implement-a-method-for-adding-new-reminders-to-the-repository","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-storing-data-in-cloud-firestore#Implement-a-method-for-adding-new-reminders-to-the-repository"},"doc://com.example.MakeItSo/tutorials/MakeItSo/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase/Building-a-Simple-UI":{"role":"article","title":"Building a Simple UI","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Building-a-Simple-UI","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/creating-a-simple-todo-list-app-with-swiftui-and-firebase\/building-a-simple-ui"},"storing-data-in-cloud-firestore-05-run-the-app-02.png":{"alt":null,"type":"image","identifier":"storing-data-in-cloud-firestore-05-run-the-app-02.png","variants":[{"url":"\/images\/storing-data-in-cloud-firestore-05-run-the-app-02@2x.png","traits":["2x","light"]},{"url":"\/images\/storing-data-in-cloud-firestore-05-run-the-app-02~dark@2x.png","traits":["2x","dark"]}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Dependency-Injection-with-Factory#Make-Firebase-available-via-Dependency-Injection":{"role":"pseudoSymbol","title":"Make Firebase available via Dependency Injection","abstract":[{"type":"text","text":"Even though "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MakeItSo"}]},{"type":"text","text":" is a relatively simple app, it consists of quite a few components that need to interact with each other: models, views, view models, repositories, and different backend services like Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Make-Firebase-available-via-Dependency-Injection","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-dependency-injection-with-factory#Make-Firebase-available-via-Dependency-Injection"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Extract-Row-View":{"role":"project","title":"Extracting the Reminder Row Into a Separate View","estimatedTime":"15min","abstract":[{"type":"text","text":"SwiftUI’s syntax for describing UIs in a declarative way is quite efficient, and allows you to describe rather complex UIs with relatively little code."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/01-extract-row-view"},"retrieving-data-from-cloud-firestore-in-real-time-02-RemindersRepository-03.swift":{"syntax":"swift","content":["import Foundation","import FirebaseFirestore","import FirebaseFirestoreSwift","","public class RemindersRepository: ObservableObject {","","  @Published","  var reminders = [Reminder]()","","  private var listenerRegistration: ListenerRegistration?","","  func subscribe() {","    if listenerRegistration == nil {","      let query = Firestore.firestore().collection(\"reminders\")","","      listenerRegistration = query","        .addSnapshotListener { [weak self] (querySnapshot, error) in","          guard let documents = querySnapshot?.documents else {","            print(\"No documents\")","            return","          }","","          print(\"Mapping \\(documents.count) documents\")","          self?.reminders = documents.compactMap { queryDocumentSnapshot in","            do {","              return try queryDocumentSnapshot.data(as: Reminder.self)","            }","            catch {","              print(\"Error while trying to map document \\(queryDocumentSnapshot.documentID): \\(error.localizedDescription)\")","              return nil","            }","          }","        }","    }","  }","","  private func unsubscribe() {","    if listenerRegistration != nil {","      listenerRegistration?.remove()","      listenerRegistration = nil","    }","  }","","  func addReminder(_ reminder: Reminder) throws {","    try Firestore","      .firestore()","      .collection(\"reminders\")","      .addDocument(from: reminder)","  }","","}"],"fileName":"RemindersRepository.swift","identifier":"retrieving-data-from-cloud-firestore-in-real-time-02-RemindersRepository-03.swift","type":"file","fileType":"swift","highlights":[{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Anonymous-Auth#Implement-an-AuthenticationService":{"role":"pseudoSymbol","title":"Implement an AuthenticationService","abstract":[{"type":"text","text":"It seems like MakeItSo meets the bar for an MVP (minimum viable product): users can add new reminders, check them off, change their details, and even delete them. But - as you might have noticed when running the app on two different iOS Simulators - the app is not multi-user capable. What’s worse, it seems like all users can see everyone else’s todo items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Implement-an-AuthenticationService","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-anonymous-auth#Implement-an-AuthenticationService"},"https://firebase.google.com/docs/emulator-suite":{"title":"Firebase Local Emulator Suite","titleInlineContent":[{"type":"text","text":"Firebase Local Emulator Suite"}],"type":"link","identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite","url":"https:\/\/firebase.google.com\/docs\/emulator-suite"},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Account-Linking#Implement-Account-Linking":{"role":"pseudoSymbol","title":"Implement Account Linking","abstract":[{"type":"text","text":"Users of your app can now sign in to the app using their Apple ID, but unfortunately, when they do so, any data they might have entered before signing in will disappear. This is probably not what the user expected!"}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Account-Linking#Implement-Account-Linking","kind":"section","type":"section","url":"\/tutorials\/makeitso\/03-account-linking#Implement-Account-Linking"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Anonymous-Auth#Inject-AuthenticationService-into-its-dependants":{"role":"pseudoSymbol","title":"Inject AuthenticationService into its dependants","abstract":[{"type":"text","text":"It seems like MakeItSo meets the bar for an MVP (minimum viable product): users can add new reminders, check them off, change their details, and even delete them. But - as you might have noticed when running the app on two different iOS Simulators - the app is not multi-user capable. What’s worse, it seems like all users can see everyone else’s todo items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Inject-AuthenticationService-into-its-dependants","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-anonymous-auth#Inject-AuthenticationService-into-its-dependants"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Extract-Row-View#Move-the-new-view-into-its-own-file":{"role":"pseudoSymbol","title":"Move the new view into its own file","abstract":[{"type":"text","text":"SwiftUI’s syntax for describing UIs in a declarative way is quite efficient, and allows you to describe rather complex UIs with relatively little code."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View#Move-the-new-view-into-its-own-file","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-extract-row-view#Move-the-new-view-into-its-own-file"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Extract-Row-View#Customise-the-preview":{"role":"pseudoSymbol","title":"Customise the preview","abstract":[{"type":"text","text":"SwiftUI’s syntax for describing UIs in a declarative way is quite efficient, and allows you to describe rather complex UIs with relatively little code."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View#Customise-the-preview","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-extract-row-view#Customise-the-preview"}}}
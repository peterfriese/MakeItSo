{"variants":[{"paths":["\/tutorials\/makeitso\/01-intro-to-cloud-firestore"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Cloud Firestore is Firebase’s NoSQL cloud database for mobile, web, and server development."}]}],"kind":"hero","title":"Cloud Firestore","image":"hero-intro-to-cloud-firestore.png","estimatedTimeInMinutes":5,"backgroundImage":"hero-intro-to-cloud-firestore.png"},{"kind":"articleBody","content":[{"kind":"contentAndMedia","content":[{"anchor":"A-flexible-and-scalable-database","level":2,"type":"heading","text":"A flexible and scalable database"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In Cloud Firestore you can store data in flexible and hierarchical structures. Instead of using tables and columns as you would do in a SQL database, all data is stored in collections and documents, which have a very JSON-like structure, as you can see in the image on the side: each document contains fields mapping to values."}]}],"mediaPosition":"trailing","media":"firestore-document-structure.png"},{"kind":"columns","content":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Fields can be of the most variable types: strings, numbers, arrays, binary values and even references to other documents. This allows you to choose the data structure that works best for your application. Each document you create is stored in a collection, and it can have references to other subcollections that contain other documents (which can also point to subcollections, and so on). It means that documents do not contain other documents directly, so all the queries that you perform are shallow: when you retrieve one document, you only retrieve that specific document, not all the subcollections underneath."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"firestore-collection-structure.png"}]}],"mediaPosition":"trailing"}]},{"kind":"columns","content":[{"kind":"contentAndMedia","content":[{"anchor":"Querying-in-Cloud-Firestore","level":2,"type":"heading","text":"Querying in Cloud Firestore"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To retrieve data from Cloud Firestore you can either fetch individual documents, or query a collection for multiple documents that match a certain criteria, according to the parameters you provide in the query. These queries are also indexed by default, so the performance is proportional to the size of your result set (not your entire data set), making querying in Cloud Firestore efficient and flexible. Additionally, you can add sorting and limits to your queries and cursors to paginate your results."}]}],"mediaPosition":"trailing"}]},{"kind":"columns","content":[{"kind":"contentAndMedia","content":[{"anchor":"Real-time-sync","level":2,"type":"heading","text":"Real-time sync"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Keeping data in your apps up to date is very important. To help you with that, Cloud Firestore offers data synchronization to update data across different platforms and devices, all you have to do is add real-time listeners to your app. You can listen to changes in a document by adding the onSnapshot() method to it. The first call to this method will create a document snapshot with the current contents of the single document, then another call will update this document snapshot each time the content changes."}]}],"mediaPosition":"trailing","media":"firestore-realtime-sync.gif"},{"kind":"contentAndMedia","content":[{"anchor":"Offline-support","level":2,"type":"heading","text":"Offline support"},{"type":"paragraph","inlineContent":[{"type":"text","text":"With Cloud Firestore your app can write, read and listen to data even if the device is offline, which can happen if your users are in a spot with bad or no reception (for example, inside an airplane). Firestore caches a copy of the data that your app is actively using so you can have access to it offline, and then it synchronizes all local changes back to Cloud Firestore when the device comes back online. You don’t have to make any changes to the code, or configure anything on the Firebase console to be able to use offline persistence, as Cloud Firestore offers this feature out of the box."}]}],"mediaPosition":"trailing","media":"firestore-offline-support.png"}]}]},{"action":{"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"isActive":true,"type":"reference","identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore","overridingTitle":"Get started"},"featuredEyebrow":"Tutorial","kind":"callToAction","title":"Storing data in Cloud Firestore","abstract":[{"type":"text","text":"With the UI of the application in place, and Firebase set up for local development, it is now time to store data in the cloud."}]}],"identifier":{"url":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Intro-to-Cloud-Firestore","interfaceLanguage":"swift"},"kind":"article","metadata":{"title":"Cloud Firestore","categoryPathComponent":"MakeItSo","role":"article","category":"MakeItSo"},"hierarchy":{"modules":[{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Building-a-Simple-UI","projects":[{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Create-a-New-Project"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Create-a-Reminder-Model-and-Add-some-Test-Data"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Display-a-List-of-Reminders"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Mark-Reminders-as-completed"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Create-a-Dialog-for-Adding-New-Reminders"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Pass-Data-From-the-Child-View"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Present-the-Add-Reminder-Dialog"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Brush-up-the-UI"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Wrap-Up"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Organise-the-Project-Files"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Create-a-View-Model-and-connect-it-to-the-RemindersListView"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Add-a-method-to-the-View-Model-for-adding-new-reminders"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Add-a-method-to-the-View-Model-for-toggling-the-completion-state-of-a-reminder"}]}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Building-Reusable-UI-Components","projects":[{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View#Title"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Create-a-Styleable-Toggle","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Create-a-Styleable-Toggle#Title"}]}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Connecting-Your-App-to-Firebase","projects":[{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Create-a-New-Firebase-Project"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Register-Your-App-with-Firebase"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Add-a-Firebase-Configuration-File"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Add-Firebase-SDKs-to-Your-App"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Initialize-Firebase-in-Your-App"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Launch-the-App-to-Verify-Setup"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Install-the-Firebase-CLI"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Connect-to-your-Firebase-project-and-enable-the-Emulator-Suite"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Launch-the-Emulator-and-view-the-Emulator-dashboard"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Connect-your-app-to-the-Emulator-Suite"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Use-launch-arguments-to-switch-between-the-Emulator-and-your-Firebase-project"}]}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Storing-Data-in-the-Cloud","projects":[{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Intro-to-Cloud-Firestore","sections":[]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Implement-a-repository"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Implement-a-method-for-adding-new-reminders-to-the-repository"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Conform-Reminder-to-Codable"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Connect-the-view-model-to-the-repository"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Wrap-up"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Implement-a-snapshot-listener"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Manage-the-lifecycle-of-the-snapshot-listener"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Connect-the-view-model"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Run-the-app-to-experience-real-time-sync"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Clean-up"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/04-Updating-Data-in-Cloud-Firestore","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/04-Updating-Data-in-Cloud-Firestore#Mark-reminders-as-completed"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/04-Updating-Data-in-Cloud-Firestore#Edit-reminders"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/05-Deleting-Data-from-Cloud-Firestore","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/05-Deleting-Data-from-Cloud-Firestore#Implement-a-method-for-removing-a-single-reminder-from-the-repository"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/05-Deleting-Data-from-Cloud-Firestore#Add-a-method-for-deleting-reminders-to-the-view-model"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/05-Deleting-Data-from-Cloud-Firestore#Implement-a-swipe-action-for-deleteing-reminders-from-the-list-view"}]}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Dependency-Injection","projects":[{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Add-the-Factory-SDK-to-your-project"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Make-Firebase-available-via-Dependency-Injection"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Use-Dependency-Injection-to-inject-Firebase-into-your-Repository"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Inject-RemindersRepository-into-RemindersListViewModel"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Wrap-up"}]}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Authenticating-Users","projects":[{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/00-Intro-to-Firebase-Authentication","sections":[]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Download-the-project-files"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Implement-an-AuthenticationService"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Register-AuthenticationService-with-the-Dependency-Injection-container"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Inject-AuthenticationService-into-its-dependants"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Add-a-userId-property-to-the-Reminder-struct"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Update-the-RemindersRepository-to-operate-only-on-the-users-data"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Take-the-app-for-a-spin-and-experience-its-multi-user-capabilities"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Connect-the-app-to-your-Apple-developer-account"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Enable-the-Sign-in-with-Apple-capability-for-your-app"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Implement-Sign-in-with-Apple"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Sign-in-to-Firebase-and-create-a-new-user-account"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Connect-the-UI"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Run-the-app"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Account-Linking","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Account-Linking#Whats-the-problem"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Account-Linking#Implement-Account-Linking"}]}]}],"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo","paths":[["doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo","doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase","doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Storing-Data-in-the-Cloud"]]},"references":{"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Storing-Data-in-Cloud-Firestore#Conform-Reminder-to-Codable":{"role":"pseudoSymbol","title":"Conform Reminder to Codable","abstract":[{"type":"text","text":"With the UI of the application in place, and Firebase set up for local development, it is now time to store data in the cloud."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Conform-Reminder-to-Codable","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-storing-data-in-cloud-firestore#Conform-Reminder-to-Codable"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Display-a-List-of-Reminders":{"role":"pseudoSymbol","title":"Display a List of Reminders","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Display-a-List-of-Reminders","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Display-a-List-of-Reminders"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Storing-Data-in-Cloud-Firestore#Implement-a-method-for-adding-new-reminders-to-the-repository":{"role":"pseudoSymbol","title":"Implement a method for adding new reminders to the repository","abstract":[{"type":"text","text":"With the UI of the application in place, and Firebase set up for local development, it is now time to store data in the cloud."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Implement-a-method-for-adding-new-reminders-to-the-repository","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-storing-data-in-cloud-firestore#Implement-a-method-for-adding-new-reminders-to-the-repository"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project":{"role":"project","title":"Adding Firebase to Your Project","estimatedTime":"25min","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Present-the-Add-Reminder-Dialog":{"role":"pseudoSymbol","title":"Present the Add Reminder Dialog","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Present-the-Add-Reminder-Dialog","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Present-the-Add-Reminder-Dialog"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Implementing-MVVM#Organise-the-Project-Files":{"role":"pseudoSymbol","title":"Organise the Project Files","abstract":[{"type":"text","text":"With the basic views for displaying and adding todo items set up, it is time to think about the architecture of the app."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Organise-the-Project-Files","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-implementing-mvvm#Organise-the-Project-Files"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Anonymous-Auth#Download-the-project-files":{"role":"pseudoSymbol","title":"Download the project files","abstract":[{"type":"text","text":"It seems like MakeItSo meets the bar for an MVP (minimum viable product): users can add new reminders, check them off, change their details, and even delete them. But - as you might have noticed when running the app on two different iOS Simulators - the app is not multi-user capable. What’s worse, it seems like all users can see everyone else’s todo items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Download-the-project-files","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-anonymous-auth#Download-the-project-files"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Dependency-Injection-with-Factory#Inject-RemindersRepository-into-RemindersListViewModel":{"role":"pseudoSymbol","title":"Inject RemindersRepository into RemindersListViewModel","abstract":[{"type":"text","text":"Even though "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MakeItSo"}]},{"type":"text","text":" is a relatively simple app, it consists of quite a few components that need to interact with each other: models, views, view models, repositories, and different backend services like Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Inject-RemindersRepository-into-RemindersListViewModel","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-dependency-injection-with-factory#Inject-RemindersRepository-into-RemindersListViewModel"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Sign-in-with-Apple#Enable-the-Sign-in-with-Apple-capability-for-your-app":{"role":"pseudoSymbol","title":"Enable the Sign in with Apple capability for your app","abstract":[{"type":"text","text":"Your app is now capable of storing data on a per-user basis. You achieved this by implementing Firebase Anonymous Authentication in the previous chapter, and then using the anonymous user’s ID to tag their reminders when storing them in Cloud Firestore."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Enable-the-Sign-in-with-Apple-capability-for-your-app","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-sign-in-with-apple#Enable-the-Sign-in-with-Apple-capability-for-your-app"},"hero-intro-to-cloud-firestore.png":{"alt":"","type":"image","identifier":"hero-intro-to-cloud-firestore.png","variants":[{"url":"\/images\/hero-intro-to-cloud-firestore.png","traits":["1x","light"]}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Wrap-Up":{"role":"pseudoSymbol","title":"Wrap Up","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Wrap-Up","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Wrap-Up"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Sign-in-with-Apple#Implement-Sign-in-with-Apple":{"role":"pseudoSymbol","title":"Implement Sign in with Apple","abstract":[{"type":"text","text":"Your app is now capable of storing data on a per-user basis. You achieved this by implementing Firebase Anonymous Authentication in the previous chapter, and then using the anonymous user’s ID to tag their reminders when storing them in Cloud Firestore."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Implement-Sign-in-with-Apple","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-sign-in-with-apple#Implement-Sign-in-with-Apple"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Storing-Data-in-Cloud-Firestore#Connect-the-view-model-to-the-repository":{"role":"pseudoSymbol","title":"Connect the view model to the repository","abstract":[{"type":"text","text":"With the UI of the application in place, and Firebase set up for local development, it is now time to store data in the cloud."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Connect-the-view-model-to-the-repository","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-storing-data-in-cloud-firestore#Connect-the-view-model-to-the-repository"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Anonymous-Auth#Inject-AuthenticationService-into-its-dependants":{"role":"pseudoSymbol","title":"Inject AuthenticationService into its dependants","abstract":[{"type":"text","text":"It seems like MakeItSo meets the bar for an MVP (minimum viable product): users can add new reminders, check them off, change their details, and even delete them. But - as you might have noticed when running the app on two different iOS Simulators - the app is not multi-user capable. What’s worse, it seems like all users can see everyone else’s todo items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Inject-AuthenticationService-into-its-dependants","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-anonymous-auth#Inject-AuthenticationService-into-its-dependants"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI":{"role":"project","title":"Building a Simple Todo List UI","estimatedTime":"25min","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui"},"doc://com.example.MakeItSo/tutorials/MakeItSo/05-Deleting-Data-from-Cloud-Firestore":{"role":"project","title":"Deleting data from Cloud Firestore","estimatedTime":"15min","abstract":[{"type":"text","text":"In this chapter of the tutorial, you’ve written code for creating, reading, and updating data in Cloud Firestore. There is one more data operation that is common for many apps: deleting data."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/05-Deleting-Data-from-Cloud-Firestore","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/05-deleting-data-from-cloud-firestore"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Sign-in-with-Apple#Connect-the-app-to-your-Apple-developer-account":{"role":"pseudoSymbol","title":"Connect the app to your Apple developer account","abstract":[{"type":"text","text":"Your app is now capable of storing data on a per-user basis. You achieved this by implementing Firebase Anonymous Authentication in the previous chapter, and then using the anonymous user’s ID to tag their reminders when storing them in Cloud Firestore."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Connect-the-app-to-your-Apple-developer-account","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-sign-in-with-apple#Connect-the-app-to-your-Apple-developer-account"},"firestore-collection-structure.png":{"alt":null,"type":"image","identifier":"firestore-collection-structure.png","variants":[{"url":"\/images\/firestore-collection-structure.png","traits":["1x","light"]}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Implement-a-snapshot-listener":{"role":"pseudoSymbol","title":"Implement a snapshot listener","abstract":[{"type":"text","text":"Now that you’ve implemented a "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":", and wrote code for storing "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":"s to Firestore, it is time to retrieve reminders from Firestore, so they can be displayed in the app’s UI."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Implement-a-snapshot-listener","kind":"section","type":"section","url":"\/tutorials\/makeitso\/03-retrieving-data-from-cloud-firestore-in-real-time#Implement-a-snapshot-listener"},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Clean-up":{"role":"pseudoSymbol","title":"Clean-up","abstract":[{"type":"text","text":"Now that you’ve implemented a "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":", and wrote code for storing "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":"s to Firestore, it is time to retrieve reminders from Firestore, so they can be displayed in the app’s UI."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Clean-up","kind":"section","type":"section","url":"\/tutorials\/makeitso\/03-retrieving-data-from-cloud-firestore-in-real-time#Clean-up"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project#Create-a-New-Firebase-Project":{"role":"pseudoSymbol","title":"Create a New Firebase Project ","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Create-a-New-Firebase-Project","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project#Create-a-New-Firebase-Project"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project#Launch-the-App-to-Verify-Setup":{"role":"pseudoSymbol","title":"Launch the App to Verify Setup","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Launch-the-App-to-Verify-Setup","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project#Launch-the-App-to-Verify-Setup"},"doc://com.example.MakeItSo/tutorials/MakeItSo/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase/Dependency-Injection":{"role":"article","title":"Dependency Injection","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Dependency-Injection","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/creating-a-simple-todo-list-app-with-swiftui-and-firebase\/dependency-injection"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Mark-Reminders-as-completed":{"role":"pseudoSymbol","title":"Mark Reminders as completed","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Mark-Reminders-as-completed","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Mark-Reminders-as-completed"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Create-a-New-Project":{"role":"pseudoSymbol","title":"Create a New Project","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Create-a-New-Project","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Create-a-New-Project"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Sign-in-with-Apple":{"role":"project","title":"Sign in with Apple and Firebase Authentication","estimatedTime":"25min","abstract":[{"type":"text","text":"Your app is now capable of storing data on a per-user basis. You achieved this by implementing Firebase Anonymous Authentication in the previous chapter, and then using the anonymous user’s ID to tag their reminders when storing them in Cloud Firestore."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/02-sign-in-with-apple"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Storing-Data-in-Cloud-Firestore":{"role":"project","title":"Storing data in Cloud Firestore","estimatedTime":"25min","abstract":[{"type":"text","text":"With the UI of the application in place, and Firebase set up for local development, it is now time to store data in the cloud."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/02-storing-data-in-cloud-firestore"},"doc://com.example.MakeItSo/tutorials/MakeItSo/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase/Connecting-Your-App-to-Firebase":{"role":"article","title":"Connecting Your App to Firebase","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Connecting-Your-App-to-Firebase","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/creating-a-simple-todo-list-app-with-swiftui-and-firebase\/connecting-your-app-to-firebase"},"firestore-realtime-sync.gif":{"alt":"","type":"image","identifier":"firestore-realtime-sync.gif","variants":[{"url":"\/images\/firestore-realtime-sync.gif","traits":["1x","light"]}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Dependency-Injection-with-Factory":{"role":"project","title":"Dependency Injection with Factory","estimatedTime":"20min","abstract":[{"type":"text","text":"Even though "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MakeItSo"}]},{"type":"text","text":" is a relatively simple app, it consists of quite a few components that need to interact with each other: models, views, view models, repositories, and different backend services like Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/01-dependency-injection-with-factory"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Implementing-MVVM#Add-a-method-to-the-View-Model-for-adding-new-reminders":{"role":"pseudoSymbol","title":"Add a method to the View Model for adding new reminders","abstract":[{"type":"text","text":"With the basic views for displaying and adding todo items set up, it is time to think about the architecture of the app."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Add-a-method-to-the-View-Model-for-adding-new-reminders","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-implementing-mvvm#Add-a-method-to-the-View-Model-for-adding-new-reminders"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Extract-Row-View":{"role":"project","title":"Extracting the Reminder Row Into a Separate View","estimatedTime":"15min","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/01-extract-row-view"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Implementing-MVVM#Add-a-method-to-the-View-Model-for-toggling-the-completion-state-of-a-reminder":{"role":"pseudoSymbol","title":"Add a method to the View Model for toggling the completion state of a reminder","abstract":[{"type":"text","text":"With the basic views for displaying and adding todo items set up, it is time to think about the architecture of the app."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Add-a-method-to-the-View-Model-for-toggling-the-completion-state-of-a-reminder","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-implementing-mvvm#Add-a-method-to-the-View-Model-for-toggling-the-completion-state-of-a-reminder"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Sign-in-with-Apple#Connect-the-UI":{"role":"pseudoSymbol","title":"Connect the UI","abstract":[{"type":"text","text":"Your app is now capable of storing data on a per-user basis. You achieved this by implementing Firebase Anonymous Authentication in the previous chapter, and then using the anonymous user’s ID to tag their reminders when storing them in Cloud Firestore."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Connect-the-UI","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-sign-in-with-apple#Connect-the-UI"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Anonymous-Auth#Update-the-RemindersRepository-to-operate-only-on-the-users-data":{"role":"pseudoSymbol","title":"Update the RemindersRepository to operate only on the user's data","abstract":[{"type":"text","text":"It seems like MakeItSo meets the bar for an MVP (minimum viable product): users can add new reminders, check them off, change their details, and even delete them. But - as you might have noticed when running the app on two different iOS Simulators - the app is not multi-user capable. What’s worse, it seems like all users can see everyone else’s todo items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Update-the-RemindersRepository-to-operate-only-on-the-users-data","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-anonymous-auth#Update-the-RemindersRepository-to-operate-only-on-the-users-data"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Dependency-Injection-with-Factory#Wrap-up":{"role":"pseudoSymbol","title":"Wrap-up","abstract":[{"type":"text","text":"Even though "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MakeItSo"}]},{"type":"text","text":" is a relatively simple app, it consists of quite a few components that need to interact with each other: models, views, view models, repositories, and different backend services like Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Wrap-up","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-dependency-injection-with-factory#Wrap-up"},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Connect-the-view-model":{"role":"pseudoSymbol","title":"Connect the view model","abstract":[{"type":"text","text":"Now that you’ve implemented a "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":", and wrote code for storing "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":"s to Firestore, it is time to retrieve reminders from Firestore, so they can be displayed in the app’s UI."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Connect-the-view-model","kind":"section","type":"section","url":"\/tutorials\/makeitso\/03-retrieving-data-from-cloud-firestore-in-real-time#Connect-the-view-model"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Create-a-Styleable-Toggle#Title":{"role":"pseudoSymbol","title":"Title","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Create-a-Styleable-Toggle#Title","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-create-a-styleable-toggle#Title"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Dependency-Injection-with-Factory#Add-the-Factory-SDK-to-your-project":{"role":"pseudoSymbol","title":"Add the Factory SDK to your project","abstract":[{"type":"text","text":"Even though "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MakeItSo"}]},{"type":"text","text":" is a relatively simple app, it consists of quite a few components that need to interact with each other: models, views, view models, repositories, and different backend services like Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Add-the-Factory-SDK-to-your-project","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-dependency-injection-with-factory#Add-the-Factory-SDK-to-your-project"},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Run-the-app-to-experience-real-time-sync":{"role":"pseudoSymbol","title":"Run the app to experience real-time sync","abstract":[{"type":"text","text":"Now that you’ve implemented a "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":", and wrote code for storing "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":"s to Firestore, it is time to retrieve reminders from Firestore, so they can be displayed in the app’s UI."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Run-the-app-to-experience-real-time-sync","kind":"section","type":"section","url":"\/tutorials\/makeitso\/03-retrieving-data-from-cloud-firestore-in-real-time#Run-the-app-to-experience-real-time-sync"},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time":{"role":"project","title":"Retrieving data from Cloud Firestore in real-time","estimatedTime":"25min","abstract":[{"type":"text","text":"Now that you’ve implemented a "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":", and wrote code for storing "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":"s to Firestore, it is time to retrieve reminders from Firestore, so they can be displayed in the app’s UI."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/03-retrieving-data-from-cloud-firestore-in-real-time"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Dependency-Injection-with-Factory#Use-Dependency-Injection-to-inject-Firebase-into-your-Repository":{"role":"pseudoSymbol","title":"Use Dependency Injection to inject Firebase into your Repository","abstract":[{"type":"text","text":"Even though "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MakeItSo"}]},{"type":"text","text":" is a relatively simple app, it consists of quite a few components that need to interact with each other: models, views, view models, repositories, and different backend services like Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Use-Dependency-Injection-to-inject-Firebase-into-your-Repository","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-dependency-injection-with-factory#Use-Dependency-Injection-to-inject-Firebase-into-your-Repository"},"doc://com.example.MakeItSo/tutorials/MakeItSo/04-Updating-Data-in-Cloud-Firestore":{"role":"project","title":"Updating data in Cloud Firestore","estimatedTime":"35min","abstract":[{"type":"text","text":"So far, the app you’re building can help you add an keep track of your todos, but you cannot mark them as completed."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/04-Updating-Data-in-Cloud-Firestore","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/04-updating-data-in-cloud-firestore"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Anonymous-Auth#Take-the-app-for-a-spin-and-experience-its-multi-user-capabilities":{"role":"pseudoSymbol","title":"Take the app for a spin and experience its multi-user capabilities","abstract":[{"type":"text","text":"It seems like MakeItSo meets the bar for an MVP (minimum viable product): users can add new reminders, check them off, change their details, and even delete them. But - as you might have noticed when running the app on two different iOS Simulators - the app is not multi-user capable. What’s worse, it seems like all users can see everyone else’s todo items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Take-the-app-for-a-spin-and-experience-its-multi-user-capabilities","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-anonymous-auth#Take-the-app-for-a-spin-and-experience-its-multi-user-capabilities"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Sign-in-with-Apple#Sign-in-to-Firebase-and-create-a-new-user-account":{"role":"pseudoSymbol","title":"Sign in to Firebase and create a new user account","abstract":[{"type":"text","text":"Your app is now capable of storing data on a per-user basis. You achieved this by implementing Firebase Anonymous Authentication in the previous chapter, and then using the anonymous user’s ID to tag their reminders when storing them in Cloud Firestore."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Sign-in-to-Firebase-and-create-a-new-user-account","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-sign-in-with-apple#Sign-in-to-Firebase-and-create-a-new-user-account"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Developing-Locally-with-the-Emulator-Suite#Use-launch-arguments-to-switch-between-the-Emulator-and-your-Firebase-project":{"role":"pseudoSymbol","title":"Use launch arguments to switch between the Emulator and your Firebase project","abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite"},{"type":"text","text":" is a set of advanced tools for developers looking to build and test apps locally using Cloud Firestore, Realtime Database, Cloud Storage for Firebase, Authentication, Firebase Hosting, Cloud Functions (beta), Pub\/Sub (beta), and Firebase Extensions (beta). It provides a rich user interface to help you get running and prototyping quickly."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Use-launch-arguments-to-switch-between-the-Emulator-and-your-Firebase-project","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-developing-locally-with-the-emulator-suite#Use-launch-arguments-to-switch-between-the-Emulator-and-your-Firebase-project"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Anonymous-Auth#Register-AuthenticationService-with-the-Dependency-Injection-container":{"role":"pseudoSymbol","title":"Register AuthenticationService with the Dependency Injection container","abstract":[{"type":"text","text":"It seems like MakeItSo meets the bar for an MVP (minimum viable product): users can add new reminders, check them off, change their details, and even delete them. But - as you might have noticed when running the app on two different iOS Simulators - the app is not multi-user capable. What’s worse, it seems like all users can see everyone else’s todo items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Register-AuthenticationService-with-the-Dependency-Injection-container","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-anonymous-auth#Register-AuthenticationService-with-the-Dependency-Injection-container"},"doc://com.example.MakeItSo/tutorials/MakeItSo/04-Updating-Data-in-Cloud-Firestore#Edit-reminders":{"role":"pseudoSymbol","title":"Edit reminders","abstract":[{"type":"text","text":"So far, the app you’re building can help you add an keep track of your todos, but you cannot mark them as completed."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/04-Updating-Data-in-Cloud-Firestore#Edit-reminders","kind":"section","type":"section","url":"\/tutorials\/makeitso\/04-updating-data-in-cloud-firestore#Edit-reminders"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Anonymous-Auth":{"role":"project","title":"Implementing guest users with Firebase Anonymous Authentication","estimatedTime":"35min","abstract":[{"type":"text","text":"It seems like MakeItSo meets the bar for an MVP (minimum viable product): users can add new reminders, check them off, change their details, and even delete them. But - as you might have noticed when running the app on two different iOS Simulators - the app is not multi-user capable. What’s worse, it seems like all users can see everyone else’s todo items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/01-anonymous-auth"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Intro-to-Cloud-Firestore":{"role":"article","title":"Cloud Firestore","estimatedTime":"5min","abstract":[{"type":"text","text":"Cloud Firestore is Firebase’s NoSQL cloud database for mobile, web, and server development."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Intro-to-Cloud-Firestore","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/01-intro-to-cloud-firestore"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Pass-Data-From-the-Child-View":{"role":"pseudoSymbol","title":"Pass Data From the Child View","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Pass-Data-From-the-Child-View","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Pass-Data-From-the-Child-View"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Storing-Data-in-Cloud-Firestore#Implement-a-repository":{"role":"pseudoSymbol","title":"Implement a repository","abstract":[{"type":"text","text":"With the UI of the application in place, and Firebase set up for local development, it is now time to store data in the cloud."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Implement-a-repository","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-storing-data-in-cloud-firestore#Implement-a-repository"},"doc://com.example.MakeItSo/tutorials/MakeItSo/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase/Building-a-Simple-UI":{"role":"article","title":"Building a Simple UI","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Building-a-Simple-UI","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/creating-a-simple-todo-list-app-with-swiftui-and-firebase\/building-a-simple-ui"},"doc://com.example.MakeItSo/tutorials/MakeItSo/04-Updating-Data-in-Cloud-Firestore#Mark-reminders-as-completed":{"role":"pseudoSymbol","title":"Mark reminders as completed","abstract":[{"type":"text","text":"So far, the app you’re building can help you add an keep track of your todos, but you cannot mark them as completed."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/04-Updating-Data-in-Cloud-Firestore#Mark-reminders-as-completed","kind":"section","type":"section","url":"\/tutorials\/makeitso\/04-updating-data-in-cloud-firestore#Mark-reminders-as-completed"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Create-a-Dialog-for-Adding-New-Reminders":{"role":"pseudoSymbol","title":"Create a Dialog for Adding New Reminders","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Create-a-Dialog-for-Adding-New-Reminders","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Create-a-Dialog-for-Adding-New-Reminders"},"doc://com.example.MakeItSo/tutorials/MakeItSo/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase/Authenticating-Users":{"role":"article","title":"Authenticating Users","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Authenticating-Users","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/creating-a-simple-todo-list-app-with-swiftui-and-firebase\/authenticating-users"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Dependency-Injection-with-Factory#Make-Firebase-available-via-Dependency-Injection":{"role":"pseudoSymbol","title":"Make Firebase available via Dependency Injection","abstract":[{"type":"text","text":"Even though "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MakeItSo"}]},{"type":"text","text":" is a relatively simple app, it consists of quite a few components that need to interact with each other: models, views, view models, repositories, and different backend services like Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Make-Firebase-available-via-Dependency-Injection","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-dependency-injection-with-factory#Make-Firebase-available-via-Dependency-Injection"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Brush-up-the-UI":{"role":"pseudoSymbol","title":"Brush up the UI","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Brush-up-the-UI","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Brush-up-the-UI"},"doc://com.example.MakeItSo/tutorials/MakeItSo/05-Deleting-Data-from-Cloud-Firestore#Implement-a-swipe-action-for-deleteing-reminders-from-the-list-view":{"role":"pseudoSymbol","title":"Implement a swipe action for deleteing reminders from the list view","abstract":[{"type":"text","text":"In this chapter of the tutorial, you’ve written code for creating, reading, and updating data in Cloud Firestore. There is one more data operation that is common for many apps: deleting data."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/05-Deleting-Data-from-Cloud-Firestore#Implement-a-swipe-action-for-deleteing-reminders-from-the-list-view","kind":"section","type":"section","url":"\/tutorials\/makeitso\/05-deleting-data-from-cloud-firestore#Implement-a-swipe-action-for-deleteing-reminders-from-the-list-view"},"doc://com.example.MakeItSo/tutorials/MakeItSo/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase/Storing-Data-in-the-Cloud":{"role":"article","title":"Storing Data in the Cloud","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Storing-Data-in-the-Cloud","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/creating-a-simple-todo-list-app-with-swiftui-and-firebase\/storing-data-in-the-cloud"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project#Add-a-Firebase-Configuration-File":{"role":"pseudoSymbol","title":"Add a Firebase Configuration File","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Add-a-Firebase-Configuration-File","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project#Add-a-Firebase-Configuration-File"},"doc://com.example.MakeItSo/tutorials/MakeItSo/05-Deleting-Data-from-Cloud-Firestore#Add-a-method-for-deleting-reminders-to-the-view-model":{"role":"pseudoSymbol","title":"Add a method for deleting reminders to the view model","abstract":[{"type":"text","text":"In this chapter of the tutorial, you’ve written code for creating, reading, and updating data in Cloud Firestore. There is one more data operation that is common for many apps: deleting data."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/05-Deleting-Data-from-Cloud-Firestore#Add-a-method-for-deleting-reminders-to-the-view-model","kind":"section","type":"section","url":"\/tutorials\/makeitso\/05-deleting-data-from-cloud-firestore#Add-a-method-for-deleting-reminders-to-the-view-model"},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Manage-the-lifecycle-of-the-snapshot-listener":{"role":"pseudoSymbol","title":"Manage the lifecycle of the snapshot listener","abstract":[{"type":"text","text":"Now that you’ve implemented a "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":", and wrote code for storing "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":"s to Firestore, it is time to retrieve reminders from Firestore, so they can be displayed in the app’s UI."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Manage-the-lifecycle-of-the-snapshot-listener","kind":"section","type":"section","url":"\/tutorials\/makeitso\/03-retrieving-data-from-cloud-firestore-in-real-time#Manage-the-lifecycle-of-the-snapshot-listener"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Anonymous-Auth#Add-a-userId-property-to-the-Reminder-struct":{"role":"pseudoSymbol","title":"Add a userId property to the Reminder struct","abstract":[{"type":"text","text":"It seems like MakeItSo meets the bar for an MVP (minimum viable product): users can add new reminders, check them off, change their details, and even delete them. But - as you might have noticed when running the app on two different iOS Simulators - the app is not multi-user capable. What’s worse, it seems like all users can see everyone else’s todo items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Add-a-userId-property-to-the-Reminder-struct","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-anonymous-auth#Add-a-userId-property-to-the-Reminder-struct"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Create-a-Styleable-Toggle":{"role":"project","title":"Creating a Styleable Toggle","estimatedTime":"25min","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Create-a-Styleable-Toggle","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/02-create-a-styleable-toggle"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Storing-Data-in-Cloud-Firestore#Wrap-up":{"role":"pseudoSymbol","title":"Wrap up","abstract":[{"type":"text","text":"With the UI of the application in place, and Firebase set up for local development, it is now time to store data in the cloud."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Wrap-up","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-storing-data-in-cloud-firestore#Wrap-up"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Developing-Locally-with-the-Emulator-Suite#Launch-the-Emulator-and-view-the-Emulator-dashboard":{"role":"pseudoSymbol","title":"Launch the Emulator and view the Emulator dashboard","abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite"},{"type":"text","text":" is a set of advanced tools for developers looking to build and test apps locally using Cloud Firestore, Realtime Database, Cloud Storage for Firebase, Authentication, Firebase Hosting, Cloud Functions (beta), Pub\/Sub (beta), and Firebase Extensions (beta). It provides a rich user interface to help you get running and prototyping quickly."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Launch-the-Emulator-and-view-the-Emulator-dashboard","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-developing-locally-with-the-emulator-suite#Launch-the-Emulator-and-view-the-Emulator-dashboard"},"doc://com.example.MakeItSo/tutorials/MakeItSo/00-Intro-to-Firebase-Authentication":{"role":"article","title":"Firebase Authenticatioon","estimatedTime":"10min","abstract":[{"type":"text","text":"Firebase Authentication provides backend services, easy-to-use SDKs, and ready-made UI libraries to authenticate users to your app. It supports authentication using passwords, phone numbers, popular federated identity providers like Google, Facebook and Twitter, and more."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/00-Intro-to-Firebase-Authentication","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/00-intro-to-firebase-authentication"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project#Initialize-Firebase-in-Your-App":{"role":"pseudoSymbol","title":"Initialize Firebase in Your App","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Initialize-Firebase-in-Your-App","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project#Initialize-Firebase-in-Your-App"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Extract-Row-View#Title":{"role":"pseudoSymbol","title":"Title","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View#Title","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-extract-row-view#Title"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Implementing-MVVM":{"role":"project","title":"Implementing Model, View, ViewModel (MVVM)","estimatedTime":"20min","abstract":[{"type":"text","text":"With the basic views for displaying and adding todo items set up, it is time to think about the architecture of the app."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/02-implementing-mvvm"},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Account-Linking#Whats-the-problem":{"role":"pseudoSymbol","title":"What's the problem","abstract":[{"type":"text","text":"Users of your app can now sign in to the app using their Apple ID, but unfortunately, when they do so, any data they might have entered before signing in will disappear. This is probably not what the user expected!"}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Account-Linking#Whats-the-problem","kind":"section","type":"section","url":"\/tutorials\/makeitso\/03-account-linking#Whats-the-problem"},"doc://com.example.MakeItSo/tutorials/MakeItSo":{"role":"overview","title":"SwiftUI and Firebase","abstract":[{"type":"text","text":"Learn how to use Firebase in SwiftUI apps by building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a replica of Apple’s Reminders app."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo","kind":"overview","type":"topic","url":"\/tutorials\/makeitso"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Anonymous-Auth#Implement-an-AuthenticationService":{"role":"pseudoSymbol","title":"Implement an AuthenticationService","abstract":[{"type":"text","text":"It seems like MakeItSo meets the bar for an MVP (minimum viable product): users can add new reminders, check them off, change their details, and even delete them. But - as you might have noticed when running the app on two different iOS Simulators - the app is not multi-user capable. What’s worse, it seems like all users can see everyone else’s todo items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Implement-an-AuthenticationService","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-anonymous-auth#Implement-an-AuthenticationService"},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Account-Linking#Implement-Account-Linking":{"role":"pseudoSymbol","title":"Implement Account Linking","abstract":[{"type":"text","text":"Users of your app can now sign in to the app using their Apple ID, but unfortunately, when they do so, any data they might have entered before signing in will disappear. This is probably not what the user expected!"}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Account-Linking#Implement-Account-Linking","kind":"section","type":"section","url":"\/tutorials\/makeitso\/03-account-linking#Implement-Account-Linking"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Implementing-MVVM#Create-a-View-Model-and-connect-it-to-the-RemindersListView":{"role":"pseudoSymbol","title":"Create a View Model and connect it to the RemindersListView","abstract":[{"type":"text","text":"With the basic views for displaying and adding todo items set up, it is time to think about the architecture of the app."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Create-a-View-Model-and-connect-it-to-the-RemindersListView","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-implementing-mvvm#Create-a-View-Model-and-connect-it-to-the-RemindersListView"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project#Add-Firebase-SDKs-to-Your-App":{"role":"pseudoSymbol","title":"Add Firebase SDKs to Your App","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Add-Firebase-SDKs-to-Your-App","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project#Add-Firebase-SDKs-to-Your-App"},"firestore-document-structure.png":{"alt":"","type":"image","identifier":"firestore-document-structure.png","variants":[{"url":"\/images\/firestore-document-structure.png","traits":["1x","light"]}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Create-a-Reminder-Model-and-Add-some-Test-Data":{"role":"pseudoSymbol","title":"Create a Reminder Model and Add some Test Data","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Create-a-Reminder-Model-and-Add-some-Test-Data","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Create-a-Reminder-Model-and-Add-some-Test-Data"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Developing-Locally-with-the-Emulator-Suite":{"role":"project","title":"Developing locally with the Emulator Suite","estimatedTime":"25min","abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite"},{"type":"text","text":" is a set of advanced tools for developers looking to build and test apps locally using Cloud Firestore, Realtime Database, Cloud Storage for Firebase, Authentication, Firebase Hosting, Cloud Functions (beta), Pub\/Sub (beta), and Firebase Extensions (beta). It provides a rich user interface to help you get running and prototyping quickly."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/02-developing-locally-with-the-emulator-suite"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Sign-in-with-Apple#Run-the-app":{"role":"pseudoSymbol","title":"Run the app","abstract":[{"type":"text","text":"Your app is now capable of storing data on a per-user basis. You achieved this by implementing Firebase Anonymous Authentication in the previous chapter, and then using the anonymous user’s ID to tag their reminders when storing them in Cloud Firestore."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Run-the-app","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-sign-in-with-apple#Run-the-app"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Developing-Locally-with-the-Emulator-Suite#Connect-to-your-Firebase-project-and-enable-the-Emulator-Suite":{"role":"pseudoSymbol","title":"Connect to your Firebase project and enable the Emulator Suite","abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite"},{"type":"text","text":" is a set of advanced tools for developers looking to build and test apps locally using Cloud Firestore, Realtime Database, Cloud Storage for Firebase, Authentication, Firebase Hosting, Cloud Functions (beta), Pub\/Sub (beta), and Firebase Extensions (beta). It provides a rich user interface to help you get running and prototyping quickly."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Connect-to-your-Firebase-project-and-enable-the-Emulator-Suite","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-developing-locally-with-the-emulator-suite#Connect-to-your-Firebase-project-and-enable-the-Emulator-Suite"},"doc://com.example.MakeItSo/tutorials/MakeItSo/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase/Building-Reusable-UI-Components":{"role":"article","title":"Building Reusable UI Components","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Building-Reusable-UI-Components","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/creating-a-simple-todo-list-app-with-swiftui-and-firebase\/building-reusable-ui-components"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Developing-Locally-with-the-Emulator-Suite#Install-the-Firebase-CLI":{"role":"pseudoSymbol","title":"Install the Firebase CLI","abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite"},{"type":"text","text":" is a set of advanced tools for developers looking to build and test apps locally using Cloud Firestore, Realtime Database, Cloud Storage for Firebase, Authentication, Firebase Hosting, Cloud Functions (beta), Pub\/Sub (beta), and Firebase Extensions (beta). It provides a rich user interface to help you get running and prototyping quickly."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Install-the-Firebase-CLI","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-developing-locally-with-the-emulator-suite#Install-the-Firebase-CLI"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project#Register-Your-App-with-Firebase":{"role":"pseudoSymbol","title":"Register Your App with Firebase","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Register-Your-App-with-Firebase","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project#Register-Your-App-with-Firebase"},"doc://com.example.MakeItSo/tutorials/MakeItSo/05-Deleting-Data-from-Cloud-Firestore#Implement-a-method-for-removing-a-single-reminder-from-the-repository":{"role":"pseudoSymbol","title":"Implement a method for removing a single reminder from the repository","abstract":[{"type":"text","text":"In this chapter of the tutorial, you’ve written code for creating, reading, and updating data in Cloud Firestore. There is one more data operation that is common for many apps: deleting data."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/05-Deleting-Data-from-Cloud-Firestore#Implement-a-method-for-removing-a-single-reminder-from-the-repository","kind":"section","type":"section","url":"\/tutorials\/makeitso\/05-deleting-data-from-cloud-firestore#Implement-a-method-for-removing-a-single-reminder-from-the-repository"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Developing-Locally-with-the-Emulator-Suite#Connect-your-app-to-the-Emulator-Suite":{"role":"pseudoSymbol","title":"Connect your app to the Emulator Suite","abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite"},{"type":"text","text":" is a set of advanced tools for developers looking to build and test apps locally using Cloud Firestore, Realtime Database, Cloud Storage for Firebase, Authentication, Firebase Hosting, Cloud Functions (beta), Pub\/Sub (beta), and Firebase Extensions (beta). It provides a rich user interface to help you get running and prototyping quickly."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Connect-your-app-to-the-Emulator-Suite","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-developing-locally-with-the-emulator-suite#Connect-your-app-to-the-Emulator-Suite"},"https://firebase.google.com/docs/emulator-suite":{"title":"Firebase Local Emulator Suite","titleInlineContent":[{"type":"text","text":"Firebase Local Emulator Suite"}],"type":"link","identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite","url":"https:\/\/firebase.google.com\/docs\/emulator-suite"},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Account-Linking":{"role":"project","title":"Account Linking","estimatedTime":"25min","abstract":[{"type":"text","text":"Users of your app can now sign in to the app using their Apple ID, but unfortunately, when they do so, any data they might have entered before signing in will disappear. This is probably not what the user expected!"}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Account-Linking","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/03-account-linking"},"firestore-offline-support.png":{"alt":"","type":"image","identifier":"firestore-offline-support.png","variants":[{"url":"\/images\/firestore-offline-support.png","traits":["1x","light"]}]}}}
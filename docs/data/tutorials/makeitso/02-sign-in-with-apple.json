{"variants":[{"paths":["\/tutorials\/makeitso\/02-sign-in-with-apple"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Your app is now capable of storing data on a per-user basis. You achieved this by implementing Firebase Anonymous Authentication in the previous chapter, and then using the anonymous user’s ID to tag their reminders when storing them in Cloud Firestore."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is a great first step on implementing a smooth onboarding experience. Once users want to continue using your app, you should offer a way to create a full account by signing into your app. On Apple’s platforms, Sign in with Apple is a popular authentication mechanism."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this part of the tutorial, you will implement Sign in with Apple to allow users to sign in to your app using their Apple ID."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Download the project files to begin building this project, and follow the steps below."}]}],"estimatedTimeInMinutes":25,"title":"Sign in with Apple and Firebase Authentication","image":"hero-anonymous-auth.png","xcodeRequirement":"Xcode 14","chapter":"Authenticating Users","kind":"hero","backgroundImage":"hero-anonymous-auth.png","projectFiles":"02-sign-in-with-apple.zip"},{"kind":"tasks","tasks":[{"anchor":"Connect-the-app-to-your-Apple-developer-account","title":"Connect the app to your Apple developer account","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To be able to use Sign in with Apple, you will need to activate the Sign in with Apple capability for your app, which requires your app to be registered on your Apple developer account. In this first section, you will make sure your app is properly registered so all the following steps will work as intended."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"type":"paragraph","inlineContent":[{"type":"text","text":"First, configure a unique bundle identifier for your app."}]},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"At this point, your app probably uses the bundle identifier "},{"type":"codeVoice","code":"com.example.MakeItSo"},{"type":"text","text":". If you try to register this bundle identifier with your Apple developer account and add the Sign in with Apple capability,you will see an error messag saying that the bundle identifier is not available."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This is because someone else already registered it, and - to prevent malicious actors from hijacking apps - Apple makes sure that all bundle IDs are unique and cannot be reused on the App Store."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":"02-sign-in-with-apple-01-register-bundleid-failure.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Change your app’s bundle ID to something unique. If you own a domain, use the reversed domain as the bundle ID. For example, "},{"type":"codeVoice","code":"com.yourdomain.example.MakeItSo"},{"type":"text","text":". To set the bundle ID, open the project editor, select your app in the list of "},{"type":"emphasis","inlineContent":[{"type":"text","text":"TARGETS"}]},{"type":"text","text":", and navigate to the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Signing & Capabilities"}]},{"type":"text","text":" tab."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"02-sign-in-with-apple-01-register-bundleid-01.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Select your development team from the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Team"}]},{"type":"text","text":" dropdown."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"02-sign-in-with-apple-01-register-bundleid-02.png"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Since Firebase also uses this bundle ID to identify your app, you will now need to create a new "},{"type":"codeVoice","code":"GoogleService-Info.plist"},{"type":"text","text":" file."}]},{"style":"warning","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Please do NOT edit your current "},{"type":"codeVoice","code":"GoogleService-Info.plist"},{"type":"text","text":" file! Most of the fields in this file are specific to your app, and need to be generated by Firebase. If you edit this file, you might run into some unexpected failures later."}]}],"type":"aside","name":"Warning"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Open the "},{"type":"reference","isActive":true,"identifier":"https:\/\/console.firebase.google.com\/project\/_\/overview"},{"type":"text","text":", and navigate to the overview page. You should see your exising app registration."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"02-sign-in-with-apple-01-create-new-plist-01.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Click on "},{"type":"emphasis","inlineContent":[{"type":"text","text":"+ Add app"}]},{"type":"text","text":", and then select the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"iOS+"}]},{"type":"text","text":" icon to start registering your new bundle ID with your Firebase project."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"02-sign-in-with-apple-01-create-new-plist-02.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Enter your app’s new bundle ID, and optionally enter a nickname for your app. Click on "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Register app"}]},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"02-sign-in-with-apple-01-create-new-plist-03.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Download the "},{"type":"codeVoice","code":"GoogleService-Info.plist"},{"type":"text","text":" file."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"02-sign-in-with-apple-01-create-new-plist-04.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In Xcode, find your "},{"type":"emphasis","inlineContent":[{"type":"text","text":"existing"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"GoogleService-Info.plist"},{"type":"text","text":" file, open the context menu and select "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Show in Finder"}]},{"type":"text","text":"."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Replace this file with the one you just downloaded."}]},{"style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Make sure to remove any numbers from the downloaded file, so if it is named something like "},{"type":"codeVoice","code":"GoogleService-Info (1).plist"},{"type":"text","text":" file, remove the "},{"type":"codeVoice","code":" (1)"},{"type":"text","text":"."}]}],"type":"aside","name":"Important"}],"type":"step","runtimePreview":null,"media":"02-sign-in-with-apple-01-create-new-plist-05.png"}]},{"anchor":"Enable-the-Sign-in-with-Apple-capability-for-your-app","title":"Enable the Sign in with Apple capability for your app","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that your app is properly registered with yout Apple developer account and Firebase, you can add the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Sign in with Apple"}]},{"type":"text","text":" capability."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Back in Xcode, make sure you are on the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Signing & Capabilities"}]},{"type":"text","text":" page of the project editor. Select "},{"type":"emphasis","inlineContent":[{"type":"text","text":"+ Capability"}]},{"type":"text","text":" button, and select "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Sign in with Apple"}]},{"type":"text","text":" from the capabilities dialog."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"02-sign-in-with-apple-02-enable-siwa-capability-01.png"}]},{"anchor":"Implement-Sign-in-with-Apple","title":"Implement Sign in with Apple","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In the following section, you will implement a typical Sign in with Apple flow. You will first configure the Sign in with Apple request to ask the user to provide both their full name and their email address. Then, you will handle receiving the response, and ultimately use the user’s Apple ID credential to sign into Firebase."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"02-sign-in-with-apple-03-AuthenticationService-SiwA-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Open "},{"type":"codeVoice","code":"AuthenticationService.swift"},{"type":"text","text":", and create a new extension on "},{"type":"codeVoice","code":"AuthenticationService"},{"type":"text","text":"."}]}],"caption":[{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Using an extension will help you keep your code nicely organised. You can also use "},{"type":"codeVoice","code":"\/\/ MARK: - "},{"type":"text","text":" to create a visual marker in your code that will show up in many places in the Xcode editor."}]}],"type":"aside","name":"Tip"}],"type":"step","runtimePreview":null,"media":null},{"code":"02-sign-in-with-apple-03-AuthenticationService-SiwA-02.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Import "},{"type":"codeVoice","code":"AuthenticationServices"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"First, you will configure the Sign in with Apple request."}]},{"code":"02-sign-in-with-apple-03-AuthenticationService-SiwA-03.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new method named "},{"type":"codeVoice","code":"handleSignInWithAppleRequest"},{"type":"text","text":" inside the extension. You will use this method to configure the sign in request. For example, you can specifiy whether your app needs to know the user’s full name or their email address."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Apple encourages developers to mind the user’s privacy and request as little information as possible of the user."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"code":"02-sign-in-with-apple-03-AuthenticationService-SiwA-04.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Request the user’s email address and their fullname."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-sign-in-with-apple-03-AuthenticationService-SiwA-05.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a nonce and handle the unlikely event that generating the nonce fails."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A nonce is a one-time code that can be used to add an additional layer of security to the sign-in flow."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"code":"02-sign-in-with-apple-03-AuthenticationService-SiwA-06.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new private property named "},{"type":"codeVoice","code":"currentNonce"},{"type":"text","text":" and use it to store the nonce. Then, comput the "},{"type":"codeVoice","code":"SHA256"},{"type":"text","text":" of the nonce and store it in the "},{"type":"codeVoice","code":"request"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, implement the code that will handle the result of the Sign in with Apple flow."}]},{"code":"02-sign-in-with-apple-03-AuthenticationService-SiwA-07.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new method named "},{"type":"codeVoice","code":"handleSignInWithAppleCompletion"},{"type":"text","text":" inside the extension. Since this method will be called from the UI context, you need to make sure it runs on the main thread. One way to do this is to mark it with the "},{"type":"codeVoice","code":"@MainActor"},{"type":"text","text":" attribute."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-sign-in-with-apple-03-AuthenticationService-SiwA-08.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When this method is called, it receives the result of the Sign in with Apple flow in a "},{"type":"codeVoice","code":"Result"},{"type":"text","text":" type. This type can have one of two states: "},{"type":"codeVoice","code":"failure"},{"type":"text","text":", or "},{"type":"codeVoice","code":"success"},{"type":"text","text":"."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Unpack the "},{"type":"codeVoice","code":"result"},{"type":"text","text":" parameter. If the authentication flow failed, assign the error message to the "},{"type":"codeVoice","code":"errorMessage"},{"type":"text","text":" property, so it can be displayed on the UI."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"02-sign-in-with-apple-03-AuthenticationService-SiwA-09.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the authentication flow completed successfully, first extract the credential from the response, making sure it is an Apple ID credential."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-sign-in-with-apple-03-AuthenticationService-SiwA-10.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Make sure the "},{"type":"codeVoice","code":"nonce"},{"type":"text","text":" is still set. This is to prevent anyone from spoofing a Sign in with Apple response."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-sign-in-with-apple-03-AuthenticationService-SiwA-11.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Extract the ID token from the credential."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-sign-in-with-apple-03-AuthenticationService-SiwA-12.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Convert the ID token into a string."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null}]},{"anchor":"Sign-in-to-Firebase-and-create-a-new-user-account","title":"Sign in to Firebase and create a new user account","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that you’ve got the user’s Apple ID token, you can use it to create an OAuth credential and use this to sign in to Firebase."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"02-sign-in-with-apple-03-AuthenticationService-SiwA-13.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use Firebase’s "},{"type":"codeVoice","code":"OAuthProvider"},{"type":"text","text":" to mint an OAuth credential with the ID token, the raw nonce, and the user’s full name."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-sign-in-with-apple-03-AuthenticationService-SiwA-14.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Call "},{"type":"codeVoice","code":"auth.signIn(with:)"},{"type":"text","text":" to sign in to Firebase with this credential."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null}]},{"anchor":"Connect-the-UI","title":"Connect the UI","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Having implemented Sign in with Apple in the "},{"type":"codeVoice","code":"AuthenticationService"},{"type":"text","text":", you can now connect the implementation to the UI."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You will be using "},{"type":"codeVoice","code":"AuthenticationViewModel"},{"type":"text","text":" to connect the login and signup views to the "},{"type":"codeVoice","code":"AuthenticationService"},{"type":"text","text":"."}]},{"code":"02-sign-in-with-apple-05-AuthenticationViewModel-SiwA-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In "},{"type":"codeVoice","code":"AuthenticationViewModel.swift"},{"type":"text","text":", import "},{"type":"codeVoice","code":"AuthenticationServices"},{"type":"text","text":", and create an extension on "},{"type":"codeVoice","code":"AuthenticationViewModel"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-sign-in-with-apple-05-AuthenticationViewModel-SiwA-02.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create two methods "},{"type":"codeVoice","code":"handleSignInWithAppleRequest"},{"type":"text","text":", and "},{"type":"codeVoice","code":"handleSignInWithAppleCompletion"},{"type":"text","text":", and forward the calls to the "},{"type":"codeVoice","code":"authenticationService"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, connect the "},{"type":"codeVoice","code":"LoginView"},{"type":"text","text":" to the view model."}]},{"code":"02-sign-in-with-apple-05-LoginView-SiwA-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Navigate to "},{"type":"codeVoice","code":"LoginView"},{"type":"text","text":", and find "},{"type":"codeVoice","code":"SignInWithAppleButton"},{"type":"text","text":". This button is part of Apple’s "},{"type":"codeVoice","code":"AuthenticationServices"},{"type":"text","text":" API, and has two closures. The first one is for setting up the request."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Forward the call to the "},{"type":"codeVoice","code":"handleSignInWithAppleRequest"},{"type":"text","text":" on the view model."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"02-sign-in-with-apple-05-LoginView-SiwA-02.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When the users completes the Sign in with Apple flow, the "},{"type":"codeVoice","code":"onCompletion"},{"type":"text","text":" handler will be called. Inside, forward the call to "},{"type":"codeVoice","code":"handleSignInWithAppleCompletion"},{"type":"text","text":" on the view model. If this call succeeds, you can dismiss "},{"type":"codeVoice","code":"LoginView"},{"type":"text","text":" by calling "},{"type":"codeVoice","code":"dismiss"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"And finally, connect the "},{"type":"codeVoice","code":"SignupView"},{"type":"text","text":" to the view model."}]},{"code":"02-sign-in-with-apple-05-SignupView-SiwA-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Navigate to "},{"type":"codeVoice","code":"SignupView"},{"type":"text","text":", and find "},{"type":"codeVoice","code":"SignInWithAppleButton"},{"type":"text","text":". This button is part of Apple’s "},{"type":"codeVoice","code":"AuthenticationServices"},{"type":"text","text":" API, and has two closures. The first one is for setting up the request."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Forward the call to the "},{"type":"codeVoice","code":"handleSignInWithAppleRequest"},{"type":"text","text":" on the view model."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"02-sign-in-with-apple-05-SignupView-SiwA-02.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When the users completes the Sign in with Apple flow, the "},{"type":"codeVoice","code":"onCompletion"},{"type":"text","text":" handler will be called. Inside, forward the call to "},{"type":"codeVoice","code":"handleSignInWithAppleCompletion"},{"type":"text","text":" on the view model. If this call succeeds, you can dismiss "},{"type":"codeVoice","code":"SignupView"},{"type":"text","text":" by calling "},{"type":"codeVoice","code":"dismiss"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null}]},{"anchor":"Run-the-app","title":"Run the app","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Congratulations! In this chapter, you’ve implemented Sign in with Apple using Firebase Authentication in your app. It’s now time to take the app for a spin and try out its new capabilities!"}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Make sure the Firebase Emulator is running. Then, launch the app on an iOS Simulator, making sure that it is configured to connect to the Firebase Emulator."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When the app is started, it will first check if there already is a signed in user. If that’s not the case, it will sign in an anonymous user.  You can verify this by navigating to the user profile view."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Try out all the features of the app. Specifically, create a couple of reminders using an anonymous account, and then sign in using Apple."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"02-sign-in-with-apple-final-demo.mp4"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You will notice that the reminders you created using the anonymous account will not be visible once you’ve signed in using Sign in with Apple."}]}],"caption":[{"style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This might or might not be what you expected, but the reason for this behaviour is that you signed in rather than linking the two accounts. In the next chapter, you will learn how to use account linking to upgrade an existing account and connect it to the new credentials."}]}],"type":"aside","name":"Important"}],"type":"step","runtimePreview":null,"media":"02-sign-in-with-apple-final-demo.mp4"}]}]},{"action":{"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"isActive":true,"type":"reference","identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Account-Linking","overridingTitle":"Get started"},"featuredEyebrow":"Tutorial","kind":"callToAction","title":"Account Linking","abstract":[{"type":"text","text":"Users of your app can now sign in to the app using their Apple ID, but unfortunately, when they do so, any data they might have entered before signing in will disappear. This is probably not what the user expected!"}]}],"identifier":{"url":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple","interfaceLanguage":"swift"},"kind":"project","metadata":{"title":"Sign in with Apple and Firebase Authentication","categoryPathComponent":"MakeItSo","role":"project","category":"MakeItSo"},"hierarchy":{"modules":[{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Building-a-Simple-UI","projects":[{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Create-a-New-Project"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Create-a-Reminder-Model-and-Add-some-Test-Data"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Display-a-List-of-Reminders"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Mark-Reminders-as-completed"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Create-a-Dialog-for-Adding-New-Reminders"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Pass-Data-From-the-Child-View"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Present-the-Add-Reminder-Dialog"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Brush-up-the-UI"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Wrap-Up"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Organise-the-Project-Files"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Create-a-View-Model-and-connect-it-to-the-RemindersListView"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Add-a-method-to-the-View-Model-for-adding-new-reminders"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Add-a-method-to-the-View-Model-for-toggling-the-completion-state-of-a-reminder"}]}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Building-Reusable-UI-Components","projects":[{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View#Extract-the-view"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View#Implement-parentchild-communiction"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View#Move-the-new-view-into-its-own-file"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View#Make-the-preview-provider-interactive"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View#Customise-the-preview"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Create-a-Styleable-Toggle","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Create-a-Styleable-Toggle#Create-a-custom-toggle-style"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Create-a-Styleable-Toggle#Update-the-preview-provider"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Create-a-Styleable-Toggle#Use-the-new-style-in-your-app"}]}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Connecting-Your-App-to-Firebase","projects":[{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Create-a-New-Firebase-Project"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Register-Your-App-with-Firebase"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Add-a-Firebase-Configuration-File"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Add-Firebase-SDKs-to-Your-App"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Initialize-Firebase-in-Your-App"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Launch-the-App-to-Verify-Setup"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Install-the-Firebase-CLI"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Connect-to-your-Firebase-project-and-enable-the-Emulator-Suite"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Launch-the-Emulator-and-view-the-Emulator-dashboard"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Connect-your-app-to-the-Emulator-Suite"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Use-launch-arguments-to-switch-between-the-Emulator-and-your-Firebase-project"}]}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Storing-Data-in-the-Cloud","projects":[{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Intro-to-Cloud-Firestore","sections":[]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Implement-a-repository-for-managing-reminders"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Implement-a-method-for-adding-new-reminders-to-the-repository"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Conform-Reminder-to-Codable"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Connect-the-view-model-to-the-repository"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Wrap-up"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Implement-a-snapshot-listener"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Manage-the-lifecycle-of-the-snapshot-listener"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Connect-the-view-model"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Run-the-app-to-experience-real-time-sync"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Clean-up"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/04-Updating-Data-in-Cloud-Firestore","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/04-Updating-Data-in-Cloud-Firestore#Mark-reminders-as-completed"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/04-Updating-Data-in-Cloud-Firestore#Edit-reminders"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/05-Deleting-Data-from-Cloud-Firestore","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/05-Deleting-Data-from-Cloud-Firestore#Implement-a-method-for-removing-a-single-reminder-from-the-repository"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/05-Deleting-Data-from-Cloud-Firestore#Add-a-method-for-deleting-reminders-to-the-view-model"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/05-Deleting-Data-from-Cloud-Firestore#Implement-a-swipe-action-for-deleteing-reminders-from-the-list-view"}]}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Dependency-Injection","projects":[{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Add-the-Factory-SDK-to-your-project"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Make-Firebase-available-via-Dependency-Injection"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Use-Dependency-Injection-to-inject-Firebase-into-your-Repository"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Inject-RemindersRepository-into-RemindersListViewModel"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Wrap-up"}]}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Authenticating-Users","projects":[{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/00-Intro-to-Firebase-Authentication","sections":[]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Download-the-project-files"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Implement-an-AuthenticationService"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Register-AuthenticationService-with-the-Dependency-Injection-container"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Inject-AuthenticationService-into-its-dependants"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Add-a-userId-property-to-the-Reminder-struct"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Update-the-RemindersRepository-to-operate-only-on-the-users-data"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Take-the-app-for-a-spin-and-experience-its-multi-user-capabilities"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Connect-the-app-to-your-Apple-developer-account"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Enable-the-Sign-in-with-Apple-capability-for-your-app"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Implement-Sign-in-with-Apple"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Sign-in-to-Firebase-and-create-a-new-user-account"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Connect-the-UI"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Run-the-app"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Account-Linking","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Account-Linking#Whats-the-problem"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Account-Linking#Implement-Account-Linking"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Account-Linking#Run-the-app"}]}]}],"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo","paths":[["doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo","doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase","doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Authenticating-Users"]]},"references":{"Xcode 14":{"title":"Xcode 14","type":"xcodeRequirement","identifier":"Xcode 14","url":"https:\/\/xcodereleases.com\/"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Pass-Data-From-the-Child-View":{"role":"pseudoSymbol","title":"Pass Data From the Child View","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Pass-Data-From-the-Child-View","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Pass-Data-From-the-Child-View"},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Account-Linking#Implement-Account-Linking":{"role":"pseudoSymbol","title":"Implement Account Linking","abstract":[{"type":"text","text":"Users of your app can now sign in to the app using their Apple ID, but unfortunately, when they do so, any data they might have entered before signing in will disappear. This is probably not what the user expected!"}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Account-Linking#Implement-Account-Linking","kind":"section","type":"section","url":"\/tutorials\/makeitso\/03-account-linking#Implement-Account-Linking"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Dependency-Injection-with-Factory#Use-Dependency-Injection-to-inject-Firebase-into-your-Repository":{"role":"pseudoSymbol","title":"Use Dependency Injection to inject Firebase into your Repository","abstract":[{"type":"text","text":"Even though "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MakeItSo"}]},{"type":"text","text":" is a relatively simple app, it consists of quite a few components that need to interact with each other: models, views, view models, repositories, and different backend services like Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Use-Dependency-Injection-to-inject-Firebase-into-your-Repository","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-dependency-injection-with-factory#Use-Dependency-Injection-to-inject-Firebase-into-your-Repository"},"02-sign-in-with-apple-03-AuthenticationService-SiwA-11.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","import AuthenticationServices","","public class AuthenticationService {","  @Injected(\\.auth) private var auth","  @Published var user: User?","","  @Published var errorMessage = \"\"","  private var currentNonce: String?","","  \/\/ (code ommitted for brevity)","}","","\/\/ MARK: - Sign in anonymously","","extension AuthenticationService {","  func signInAnonymously() {","  \/\/ (code ommitted for brevity)    ","  }","}","","\/\/ MARK: - Sign in with Apple","","extension AuthenticationService {","  @MainActor","  func handleSignInWithAppleCompletion(_ result: Result<ASAuthorization, Error>) async -> Bool {","    if case .failure(let failure) = result {","      errorMessage = failure.localizedDescription","      return false","    }","    else if case .success(let authorization) = result {","      if let appleIDCredential = authorization.credential as? ASAuthorizationAppleIDCredential {","        guard let nonce = currentNonce else {","          fatalError(\"Invalid state: a login callback was received, but no login request was sent.\")","        }","        guard let appleIDToken = appleIDCredential.identityToken else {","          print(\"Unable to fetch identify token.\")","          return false","        }","","      }","    }","    return false","  }","","  func handleSignInWithAppleRequest(_ request: ASAuthorizationAppleIDRequest) {","    request.requestedScopes = [.fullName, .email]","    do {","      let nonce = try CryptoUtils.randomNonceString()","      currentNonce = nonce","      request.nonce = CryptoUtils.sha256(nonce)","    }","    catch {","      print(\"Error when creating a nonce: \\(error.localizedDescription)\")","    }","  }","}"],"fileName":"AuthenticationService.swift","identifier":"02-sign-in-with-apple-03-AuthenticationService-SiwA-11.swift","type":"file","fileType":"swift","highlights":[{"line":38},{"line":39},{"line":40},{"line":41}]},"02-sign-in-with-apple-03-AuthenticationService-SiwA-07.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","import AuthenticationServices","","public class AuthenticationService {","  @Injected(\\.auth) private var auth","  @Published var user: User?","","  @Published var errorMessage = \"\"","  private var currentNonce: String?","","  \/\/ (code ommitted for brevity)","}","","\/\/ MARK: - Sign in anonymously","","extension AuthenticationService {","  func signInAnonymously() {","  \/\/ (code ommitted for brevity)    ","  }","}","","\/\/ MARK: - Sign in with Apple","","extension AuthenticationService {","  @MainActor","  func handleSignInWithAppleCompletion(_ result: Result<ASAuthorization, Error>) async -> Bool {","  }","","  func handleSignInWithAppleRequest(_ request: ASAuthorizationAppleIDRequest) {","    request.requestedScopes = [.fullName, .email]","    do {","      let nonce = try CryptoUtils.randomNonceString()","      currentNonce = nonce","      request.nonce = CryptoUtils.sha256(nonce)","    }","    catch {","      print(\"Error when creating a nonce: \\(error.localizedDescription)\")","    }","  }","}"],"fileName":"AuthenticationService.swift","identifier":"02-sign-in-with-apple-03-AuthenticationService-SiwA-07.swift","type":"file","fileType":"swift","highlights":[{"line":27},{"line":28},{"line":29},{"line":30}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Storing-Data-in-Cloud-Firestore":{"role":"project","title":"Storing data in Cloud Firestore","estimatedTime":"25min","abstract":[{"type":"text","text":"With the UI of the application in place, and Firebase set up for local development, it is now time to store data in the cloud."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/02-storing-data-in-cloud-firestore"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Developing-Locally-with-the-Emulator-Suite#Connect-your-app-to-the-Emulator-Suite":{"role":"pseudoSymbol","title":"Connect your app to the Emulator Suite","abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite"},{"type":"text","text":" is a set of advanced tools for developers looking to build and test apps locally using Cloud Firestore, Realtime Database, Cloud Storage for Firebase, Authentication, Firebase Hosting, Cloud Functions (beta), Pub\/Sub (beta), and Firebase Extensions (beta). It provides a rich user interface to help you get running and prototyping quickly."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Connect-your-app-to-the-Emulator-Suite","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-developing-locally-with-the-emulator-suite#Connect-your-app-to-the-Emulator-Suite"},"02-sign-in-with-apple-final-demo.mp4":{"poster":null,"alt":null,"type":"video","identifier":"02-sign-in-with-apple-final-demo.mp4","variants":[{"url":"\/videos\/02-sign-in-with-apple-final-demo.mp4","traits":["1x","light"]}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Sign-in-with-Apple#Run-the-app":{"role":"pseudoSymbol","title":"Run the app","abstract":[{"type":"text","text":"Your app is now capable of storing data on a per-user basis. You achieved this by implementing Firebase Anonymous Authentication in the previous chapter, and then using the anonymous user’s ID to tag their reminders when storing them in Cloud Firestore."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Run-the-app","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-sign-in-with-apple#Run-the-app"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Developing-Locally-with-the-Emulator-Suite#Connect-to-your-Firebase-project-and-enable-the-Emulator-Suite":{"role":"pseudoSymbol","title":"Connect to your Firebase project and enable the Emulator Suite","abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite"},{"type":"text","text":" is a set of advanced tools for developers looking to build and test apps locally using Cloud Firestore, Realtime Database, Cloud Storage for Firebase, Authentication, Firebase Hosting, Cloud Functions (beta), Pub\/Sub (beta), and Firebase Extensions (beta). It provides a rich user interface to help you get running and prototyping quickly."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Connect-to-your-Firebase-project-and-enable-the-Emulator-Suite","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-developing-locally-with-the-emulator-suite#Connect-to-your-Firebase-project-and-enable-the-Emulator-Suite"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Mark-Reminders-as-completed":{"role":"pseudoSymbol","title":"Mark Reminders as completed","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Mark-Reminders-as-completed","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Mark-Reminders-as-completed"},"02-sign-in-with-apple-05-SignupView-SiwA-01.swift":{"syntax":"swift","content":["import SwiftUI","import Combine","import AuthenticationServices","import FirebaseAnalyticsSwift","","private enum FocusableField: Hashable {","  case email","  case password","  case confirmPassword","}","","struct SignupView: View {","  @EnvironmentObject var viewModel: AuthenticationViewModel","  @Environment(\\.colorScheme) var colorScheme","  @Environment(\\.dismiss) var dismiss","","  @FocusState private var focus: FocusableField?","","  \/\/ (code ommitted for brevity)","","  var body: some View {","    VStack {","      ","      \/\/ (code ommitted for brevity)","","      GoogleSignInButton(.signUp) {","        \/\/ sign in with Google","      }","","      SignInWithAppleButton(.signUp) { request in","        viewModel.handleSignInWithAppleRequest(request)","      } onCompletion: { result in","        \/\/ handle completion","      }","      .signInWithAppleButtonStyle(colorScheme == .light ? .black : .white)","      .frame(maxWidth: .infinity, minHeight: 50, maxHeight: 50)","      .cornerRadius(8)","","      \/\/ (code ommitted for brevity)","    }","    .padding()","    .analyticsScreen(name: \"\\(Self.self)\")","  }","}","","","struct SignupView_Previews: PreviewProvider {","  static var previews: some View {","    Group {","      SignupView()","      SignupView()","        .preferredColorScheme(.dark)","    }","    .environmentObject(AuthenticationViewModel())","  }","}"],"fileName":"SignupView.swift","identifier":"02-sign-in-with-apple-05-SignupView-SiwA-01.swift","type":"file","fileType":"swift","highlights":[{"line":31}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project#Create-a-New-Firebase-Project":{"role":"pseudoSymbol","title":"Create a New Firebase Project ","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Create-a-New-Firebase-Project","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project#Create-a-New-Firebase-Project"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Extract-Row-View#Move-the-new-view-into-its-own-file":{"role":"pseudoSymbol","title":"Move the new view into its own file","abstract":[{"type":"text","text":"SwiftUI’s syntax for describing UIs in a declarative way is quite efficient, and allows you to describe rather complex UIs with relatively little code."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View#Move-the-new-view-into-its-own-file","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-extract-row-view#Move-the-new-view-into-its-own-file"},"02-sign-in-with-apple-05-LoginView-SiwA-01.swift":{"syntax":"swift","content":["import SwiftUI","import Combine","import FirebaseAnalyticsSwift","import AuthenticationServices","","private enum FocusableField: Hashable {","  case email","  case password","}","","struct LoginView: View {","  @EnvironmentObject var viewModel: AuthenticationViewModel","  @Environment(\\.colorScheme) var colorScheme","  @Environment(\\.dismiss) var dismiss","","  @FocusState private var focus: FocusableField?","","  \/\/ (code ommitted for brevity)","","  var body: some View {","    VStack {","","      \/\/ (code ommitted for brevity)","","      GoogleSignInButton(.signIn) {","        \/\/ sign in with Google","      }","","      SignInWithAppleButton(.signIn) { request in","        viewModel.handleSignInWithAppleRequest(request)","      } onCompletion: { result in","      }","      .signInWithAppleButtonStyle(colorScheme == .light ? .black : .white)","      .frame(maxWidth: .infinity, minHeight: 50, maxHeight: 50)","      .cornerRadius(8)","","      \/\/ (code ommitted for brevity)","    }","    .padding()","    .analyticsScreen(name: \"\\(Self.self)\")","  }","}","","struct LoginView_Previews: PreviewProvider {","  struct Container: View {","    @StateObject var viewModel = AuthenticationViewModel(flow: .login)","","    var body: some View {","      LoginView()","        .environmentObject(viewModel)","    }","  }","","  static var previews: some View {","    Container()","  }","}"],"fileName":"LoginView.swift","identifier":"02-sign-in-with-apple-05-LoginView-SiwA-01.swift","type":"file","fileType":"swift","highlights":[{"line":30}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Anonymous-Auth#Take-the-app-for-a-spin-and-experience-its-multi-user-capabilities":{"role":"pseudoSymbol","title":"Take the app for a spin and experience its multi-user capabilities","abstract":[{"type":"text","text":"It seems like MakeItSo meets the bar for an MVP (minimum viable product): users can add new reminders, check them off, change their details, and even delete them. But - as you might have noticed when running the app on two different iOS Simulators - the app is not multi-user capable. What’s worse, it seems like all users can see everyone else’s todo items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Take-the-app-for-a-spin-and-experience-its-multi-user-capabilities","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-anonymous-auth#Take-the-app-for-a-spin-and-experience-its-multi-user-capabilities"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Dependency-Injection-with-Factory#Make-Firebase-available-via-Dependency-Injection":{"role":"pseudoSymbol","title":"Make Firebase available via Dependency Injection","abstract":[{"type":"text","text":"Even though "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MakeItSo"}]},{"type":"text","text":" is a relatively simple app, it consists of quite a few components that need to interact with each other: models, views, view models, repositories, and different backend services like Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Make-Firebase-available-via-Dependency-Injection","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-dependency-injection-with-factory#Make-Firebase-available-via-Dependency-Injection"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Extract-Row-View#Implement-parentchild-communiction":{"role":"pseudoSymbol","title":"Implement parent\/child communiction","abstract":[{"type":"text","text":"SwiftUI’s syntax for describing UIs in a declarative way is quite efficient, and allows you to describe rather complex UIs with relatively little code."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View#Implement-parentchild-communiction","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-extract-row-view#Implement-parentchild-communiction"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Sign-in-with-Apple#Enable-the-Sign-in-with-Apple-capability-for-your-app":{"role":"pseudoSymbol","title":"Enable the Sign in with Apple capability for your app","abstract":[{"type":"text","text":"Your app is now capable of storing data on a per-user basis. You achieved this by implementing Firebase Anonymous Authentication in the previous chapter, and then using the anonymous user’s ID to tag their reminders when storing them in Cloud Firestore."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Enable-the-Sign-in-with-Apple-capability-for-your-app","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-sign-in-with-apple#Enable-the-Sign-in-with-Apple-capability-for-your-app"},"02-sign-in-with-apple-03-AuthenticationService-SiwA-01.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","","public class AuthenticationService {","  @Injected(\\.auth) private var auth","  @Published var user: User?","","  @Published var errorMessage = \"\"","","  \/\/ (code ommitted for brevity)","}","","\/\/ MARK: - Sign in anonymously","","extension AuthenticationService {","  func signInAnonymously() {","  \/\/ (code ommitted for brevity)    ","  }","}","","\/\/ MARK: - Sign in with Apple","","extension AuthenticationService {","}"],"fileName":"AuthenticationService.swift","identifier":"02-sign-in-with-apple-03-AuthenticationService-SiwA-01.swift","type":"file","fileType":"swift","highlights":[{"line":21},{"line":22},{"line":23},{"line":24},{"line":25}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI":{"role":"project","title":"Building a Simple Todo List UI","estimatedTime":"25min","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui"},"02-sign-in-with-apple-01-register-bundleid-01.png":{"alt":null,"type":"image","identifier":"02-sign-in-with-apple-01-register-bundleid-01.png","variants":[{"url":"\/images\/02-sign-in-with-apple-01-register-bundleid-01@2x.png","traits":["2x","light"]},{"url":"\/images\/02-sign-in-with-apple-01-register-bundleid-01~dark@2x.png","traits":["2x","dark"]}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Create-a-Reminder-Model-and-Add-some-Test-Data":{"role":"pseudoSymbol","title":"Create a Reminder Model and Add some Test Data","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Create-a-Reminder-Model-and-Add-some-Test-Data","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Create-a-Reminder-Model-and-Add-some-Test-Data"},"02-sign-in-with-apple-01-create-new-plist-03.png":{"alt":null,"type":"image","identifier":"02-sign-in-with-apple-01-create-new-plist-03.png","variants":[{"url":"\/images\/02-sign-in-with-apple-01-create-new-plist-03@2x.png","traits":["2x","light"]}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Create-a-New-Project":{"role":"pseudoSymbol","title":"Create a New Project","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Create-a-New-Project","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Create-a-New-Project"},"02-sign-in-with-apple-03-AuthenticationService-SiwA-08.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","import AuthenticationServices","","public class AuthenticationService {","  @Injected(\\.auth) private var auth","  @Published var user: User?","","  @Published var errorMessage = \"\"","  private var currentNonce: String?","","  \/\/ (code ommitted for brevity)","}","","\/\/ MARK: - Sign in anonymously","","extension AuthenticationService {","  func signInAnonymously() {","  \/\/ (code ommitted for brevity)    ","  }","}","","\/\/ MARK: - Sign in with Apple","","extension AuthenticationService {","  @MainActor","  func handleSignInWithAppleCompletion(_ result: Result<ASAuthorization, Error>) async -> Bool {","    if case .failure(let failure) = result {","      errorMessage = failure.localizedDescription","      return false","    }","    else if case .success(let authorization) = result {","    }","    return false","  }","","  func handleSignInWithAppleRequest(_ request: ASAuthorizationAppleIDRequest) {","    request.requestedScopes = [.fullName, .email]","    do {","      let nonce = try CryptoUtils.randomNonceString()","      currentNonce = nonce","      request.nonce = CryptoUtils.sha256(nonce)","    }","    catch {","      print(\"Error when creating a nonce: \\(error.localizedDescription)\")","    }","  }","}"],"fileName":"AuthenticationService.swift","identifier":"02-sign-in-with-apple-03-AuthenticationService-SiwA-08.swift","type":"file","fileType":"swift","highlights":[{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35}]},"hero-anonymous-auth.png":{"alt":null,"type":"image","identifier":"hero-anonymous-auth.png","variants":[{"url":"\/images\/hero-anonymous-auth@2x.png","traits":["2x","light"]}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Sign-in-with-Apple#Implement-Sign-in-with-Apple":{"role":"pseudoSymbol","title":"Implement Sign in with Apple","abstract":[{"type":"text","text":"Your app is now capable of storing data on a per-user basis. You achieved this by implementing Firebase Anonymous Authentication in the previous chapter, and then using the anonymous user’s ID to tag their reminders when storing them in Cloud Firestore."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Implement-Sign-in-with-Apple","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-sign-in-with-apple#Implement-Sign-in-with-Apple"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Extract-Row-View#Make-the-preview-provider-interactive":{"role":"pseudoSymbol","title":"Make the preview provider interactive","abstract":[{"type":"text","text":"SwiftUI’s syntax for describing UIs in a declarative way is quite efficient, and allows you to describe rather complex UIs with relatively little code."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View#Make-the-preview-provider-interactive","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-extract-row-view#Make-the-preview-provider-interactive"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Dependency-Injection-with-Factory#Wrap-up":{"role":"pseudoSymbol","title":"Wrap-up","abstract":[{"type":"text","text":"Even though "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MakeItSo"}]},{"type":"text","text":" is a relatively simple app, it consists of quite a few components that need to interact with each other: models, views, view models, repositories, and different backend services like Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Wrap-up","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-dependency-injection-with-factory#Wrap-up"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project#Launch-the-App-to-Verify-Setup":{"role":"pseudoSymbol","title":"Launch the App to Verify Setup","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Launch-the-App-to-Verify-Setup","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project#Launch-the-App-to-Verify-Setup"},"https://console.firebase.google.com/project/_/overview":{"title":"Firebase console for your project","titleInlineContent":[{"type":"text","text":"Firebase console for your project"}],"type":"link","identifier":"https:\/\/console.firebase.google.com\/project\/_\/overview","url":"https:\/\/console.firebase.google.com\/project\/_\/overview"},"02-sign-in-with-apple-03-AuthenticationService-SiwA-13.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","import AuthenticationServices","","public class AuthenticationService {","  @Injected(\\.auth) private var auth","  @Published var user: User?","","  @Published var errorMessage = \"\"","  private var currentNonce: String?","","  \/\/ (code ommitted for brevity)","}","","\/\/ MARK: - Sign in anonymously","","extension AuthenticationService {","  func signInAnonymously() {","  \/\/ (code ommitted for brevity)    ","  }","}","","\/\/ MARK: - Sign in with Apple","","extension AuthenticationService {","  @MainActor","  func handleSignInWithAppleCompletion(_ result: Result<ASAuthorization, Error>) async -> Bool {","    if case .failure(let failure) = result {","      errorMessage = failure.localizedDescription","      return false","    }","    else if case .success(let authorization) = result {","      if let appleIDCredential = authorization.credential as? ASAuthorizationAppleIDCredential {","        guard let nonce = currentNonce else {","          fatalError(\"Invalid state: a login callback was received, but no login request was sent.\")","        }","        guard let appleIDToken = appleIDCredential.identityToken else {","          print(\"Unable to fetch identify token.\")","          return false","        }","        guard let idTokenString = String(data: appleIDToken, encoding: .utf8) else {","          print(\"Unable to serialise token string from data: \\(appleIDToken.debugDescription)\")","          return false","        }","","        let credential = OAuthProvider.appleCredential(withIDToken: idTokenString,","                                                       rawNonce: nonce,","                                                       fullName: appleIDCredential.fullName)","","      }","    }","    return false","  }","","  func handleSignInWithAppleRequest(_ request: ASAuthorizationAppleIDRequest) {","    request.requestedScopes = [.fullName, .email]","    do {","      let nonce = try CryptoUtils.randomNonceString()","      currentNonce = nonce","      request.nonce = CryptoUtils.sha256(nonce)","    }","    catch {","      print(\"Error when creating a nonce: \\(error.localizedDescription)\")","    }","  }","}"],"fileName":"AuthenticationService.swift","identifier":"02-sign-in-with-apple-03-AuthenticationService-SiwA-13.swift","type":"file","fileType":"swift","highlights":[{"line":47},{"line":48},{"line":49},{"line":50}]},"02-sign-in-with-apple-03-AuthenticationService-SiwA-05.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","import AuthenticationServices","","public class AuthenticationService {","  @Injected(\\.auth) private var auth","  @Published var user: User?","","  @Published var errorMessage = \"\"","","  \/\/ (code ommitted for brevity)","}","","\/\/ MARK: - Sign in anonymously","","extension AuthenticationService {","  func signInAnonymously() {","  \/\/ (code ommitted for brevity)    ","  }","}","","\/\/ MARK: - Sign in with Apple","","extension AuthenticationService {","  func handleSignInWithAppleRequest(_ request: ASAuthorizationAppleIDRequest) {","    request.requestedScopes = [.fullName, .email]","    do {","      let nonce = try CryptoUtils.randomNonceString()","    }","    catch {","      print(\"Error when creating a nonce: \\(error.localizedDescription)\")","    }","  }","}"],"fileName":"AuthenticationService.swift","identifier":"02-sign-in-with-apple-03-AuthenticationService-SiwA-05.swift","type":"file","fileType":"swift","highlights":[{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33}]},"02-sign-in-with-apple-01-create-new-plist-02.png":{"alt":null,"type":"image","identifier":"02-sign-in-with-apple-01-create-new-plist-02.png","variants":[{"url":"\/images\/02-sign-in-with-apple-01-create-new-plist-02@2x.png","traits":["2x","light"]}]},"02-sign-in-with-apple-05-LoginView-SiwA-02.swift":{"syntax":"swift","content":["import SwiftUI","import Combine","import FirebaseAnalyticsSwift","import AuthenticationServices","","private enum FocusableField: Hashable {","  case email","  case password","}","","struct LoginView: View {","  @EnvironmentObject var viewModel: AuthenticationViewModel","  @Environment(\\.colorScheme) var colorScheme","  @Environment(\\.dismiss) var dismiss","","  @FocusState private var focus: FocusableField?","","  \/\/ (code ommitted for brevity)","","  var body: some View {","    VStack {","","      \/\/ (code ommitted for brevity)","","      GoogleSignInButton(.signIn) {","        \/\/ sign in with Google","      }","","      SignInWithAppleButton(.signIn) { request in","        viewModel.handleSignInWithAppleRequest(request)","      } onCompletion: { result in","        Task {","          if await viewModel.handleSignInWithAppleCompletion(result) {","            dismiss()","          }","        }","      }","      .signInWithAppleButtonStyle(colorScheme == .light ? .black : .white)","      .frame(maxWidth: .infinity, minHeight: 50, maxHeight: 50)","      .cornerRadius(8)","","      \/\/ (code ommitted for brevity)","    }","    .padding()","    .analyticsScreen(name: \"\\(Self.self)\")","  }","}","","struct LoginView_Previews: PreviewProvider {","  struct Container: View {","    @StateObject var viewModel = AuthenticationViewModel(flow: .login)","","    var body: some View {","      LoginView()","        .environmentObject(viewModel)","    }","  }","","  static var previews: some View {","    Container()","  }","}"],"fileName":"LoginView.swift","identifier":"02-sign-in-with-apple-05-LoginView-SiwA-02.swift","type":"file","fileType":"swift","highlights":[{"line":32},{"line":33},{"line":34},{"line":35},{"line":36}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Storing-Data-in-Cloud-Firestore#Implement-a-repository-for-managing-reminders":{"role":"pseudoSymbol","title":"Implement a repository for managing reminders","abstract":[{"type":"text","text":"With the UI of the application in place, and Firebase set up for local development, it is now time to store data in the cloud."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Implement-a-repository-for-managing-reminders","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-storing-data-in-cloud-firestore#Implement-a-repository-for-managing-reminders"},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Account-Linking#Whats-the-problem":{"role":"pseudoSymbol","title":"What's the problem","abstract":[{"type":"text","text":"Users of your app can now sign in to the app using their Apple ID, but unfortunately, when they do so, any data they might have entered before signing in will disappear. This is probably not what the user expected!"}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Account-Linking#Whats-the-problem","kind":"section","type":"section","url":"\/tutorials\/makeitso\/03-account-linking#Whats-the-problem"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Intro-to-Cloud-Firestore":{"role":"article","title":"Cloud Firestore","estimatedTime":"5min","abstract":[{"type":"text","text":"Cloud Firestore is Firebase’s NoSQL cloud database for mobile, web, and server development."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Intro-to-Cloud-Firestore","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/01-intro-to-cloud-firestore"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project#Add-Firebase-SDKs-to-Your-App":{"role":"pseudoSymbol","title":"Add Firebase SDKs to Your App","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Add-Firebase-SDKs-to-Your-App","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project#Add-Firebase-SDKs-to-Your-App"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Anonymous-Auth#Register-AuthenticationService-with-the-Dependency-Injection-container":{"role":"pseudoSymbol","title":"Register AuthenticationService with the Dependency Injection container","abstract":[{"type":"text","text":"It seems like MakeItSo meets the bar for an MVP (minimum viable product): users can add new reminders, check them off, change their details, and even delete them. But - as you might have noticed when running the app on two different iOS Simulators - the app is not multi-user capable. What’s worse, it seems like all users can see everyone else’s todo items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Register-AuthenticationService-with-the-Dependency-Injection-container","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-anonymous-auth#Register-AuthenticationService-with-the-Dependency-Injection-container"},"02-sign-in-with-apple-03-AuthenticationService-SiwA-03.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","import AuthenticationServices","","public class AuthenticationService {","  @Injected(\\.auth) private var auth","  @Published var user: User?","","  @Published var errorMessage = \"\"","","  \/\/ (code ommitted for brevity)","}","","\/\/ MARK: - Sign in anonymously","","extension AuthenticationService {","  func signInAnonymously() {","  \/\/ (code ommitted for brevity)    ","  }","}","","\/\/ MARK: - Sign in with Apple","","extension AuthenticationService {","  func handleSignInWithAppleRequest(_ request: ASAuthorizationAppleIDRequest) {","  }","}"],"fileName":"AuthenticationService.swift","identifier":"02-sign-in-with-apple-03-AuthenticationService-SiwA-03.swift","type":"file","fileType":"swift","highlights":[{"line":26},{"line":27}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase/Connecting-Your-App-to-Firebase":{"role":"article","title":"Connecting Your App to Firebase","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Connecting-Your-App-to-Firebase","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/creating-a-simple-todo-list-app-with-swiftui-and-firebase\/connecting-your-app-to-firebase"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Extract-Row-View#Customise-the-preview":{"role":"pseudoSymbol","title":"Customise the preview","abstract":[{"type":"text","text":"SwiftUI’s syntax for describing UIs in a declarative way is quite efficient, and allows you to describe rather complex UIs with relatively little code."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View#Customise-the-preview","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-extract-row-view#Customise-the-preview"},"doc://com.example.MakeItSo/tutorials/MakeItSo/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase/Dependency-Injection":{"role":"article","title":"Dependency Injection","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Dependency-Injection","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/creating-a-simple-todo-list-app-with-swiftui-and-firebase\/dependency-injection"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Anonymous-Auth#Add-a-userId-property-to-the-Reminder-struct":{"role":"pseudoSymbol","title":"Add a userId property to the Reminder struct","abstract":[{"type":"text","text":"It seems like MakeItSo meets the bar for an MVP (minimum viable product): users can add new reminders, check them off, change their details, and even delete them. But - as you might have noticed when running the app on two different iOS Simulators - the app is not multi-user capable. What’s worse, it seems like all users can see everyone else’s todo items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Add-a-userId-property-to-the-Reminder-struct","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-anonymous-auth#Add-a-userId-property-to-the-Reminder-struct"},"02-sign-in-with-apple-05-SignupView-SiwA-02.swift":{"syntax":"swift","content":["import SwiftUI","import Combine","import AuthenticationServices","import FirebaseAnalyticsSwift","","private enum FocusableField: Hashable {","  case email","  case password","  case confirmPassword","}","","struct SignupView: View {","  @EnvironmentObject var viewModel: AuthenticationViewModel","  @Environment(\\.colorScheme) var colorScheme","  @Environment(\\.dismiss) var dismiss","","  @FocusState private var focus: FocusableField?","","  \/\/ (code ommitted for brevity)","","  var body: some View {","    VStack {","      ","      \/\/ (code ommitted for brevity)","","      GoogleSignInButton(.signUp) {","        \/\/ sign in with Google","      }","","      SignInWithAppleButton(.signUp) { request in","        viewModel.handleSignInWithAppleRequest(request)","      } onCompletion: { result in","        Task {","          if await viewModel.handleSignInWithAppleCompletion(result) {","            dismiss()","          }","        }","      }","      .signInWithAppleButtonStyle(colorScheme == .light ? .black : .white)","      .frame(maxWidth: .infinity, minHeight: 50, maxHeight: 50)","      .cornerRadius(8)","","      \/\/ (code ommitted for brevity)","    }","    .padding()","    .analyticsScreen(name: \"\\(Self.self)\")","  }","}","","","struct SignupView_Previews: PreviewProvider {","  static var previews: some View {","    Group {","      SignupView()","      SignupView()","        .preferredColorScheme(.dark)","    }","    .environmentObject(AuthenticationViewModel())","  }","}"],"fileName":"SignupView.swift","identifier":"02-sign-in-with-apple-05-SignupView-SiwA-02.swift","type":"file","fileType":"swift","highlights":[{"line":33},{"line":34},{"line":35},{"line":36},{"line":37}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/00-Intro-to-Firebase-Authentication":{"role":"article","title":"Firebase Authenticatioon","estimatedTime":"10min","abstract":[{"type":"text","text":"Firebase Authentication provides backend services, easy-to-use SDKs, and ready-made UI libraries to authenticate users to your app. It supports authentication using passwords, phone numbers, popular federated identity providers like Google, Facebook and Twitter, and more."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/00-Intro-to-Firebase-Authentication","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/00-intro-to-firebase-authentication"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project#Add-a-Firebase-Configuration-File":{"role":"pseudoSymbol","title":"Add a Firebase Configuration File","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Add-a-Firebase-Configuration-File","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project#Add-a-Firebase-Configuration-File"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Sign-in-with-Apple#Sign-in-to-Firebase-and-create-a-new-user-account":{"role":"pseudoSymbol","title":"Sign in to Firebase and create a new user account","abstract":[{"type":"text","text":"Your app is now capable of storing data on a per-user basis. You achieved this by implementing Firebase Anonymous Authentication in the previous chapter, and then using the anonymous user’s ID to tag their reminders when storing them in Cloud Firestore."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Sign-in-to-Firebase-and-create-a-new-user-account","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-sign-in-with-apple#Sign-in-to-Firebase-and-create-a-new-user-account"},"doc://com.example.MakeItSo/tutorials/MakeItSo/04-Updating-Data-in-Cloud-Firestore#Mark-reminders-as-completed":{"role":"pseudoSymbol","title":"Mark reminders as completed","abstract":[{"type":"text","text":"So far, the app you’re building can help you add an keep track of your todos, but you cannot mark them as completed."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/04-Updating-Data-in-Cloud-Firestore#Mark-reminders-as-completed","kind":"section","type":"section","url":"\/tutorials\/makeitso\/04-updating-data-in-cloud-firestore#Mark-reminders-as-completed"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Implementing-MVVM#Create-a-View-Model-and-connect-it-to-the-RemindersListView":{"role":"pseudoSymbol","title":"Create a View Model and connect it to the RemindersListView","abstract":[{"type":"text","text":"With the basic views for displaying and adding todo items set up, it is time to think about the architecture of the app."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Create-a-View-Model-and-connect-it-to-the-RemindersListView","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-implementing-mvvm#Create-a-View-Model-and-connect-it-to-the-RemindersListView"},"doc://com.example.MakeItSo/tutorials/MakeItSo/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase/Building-a-Simple-UI":{"role":"article","title":"Building a Simple UI","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Building-a-Simple-UI","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/creating-a-simple-todo-list-app-with-swiftui-and-firebase\/building-a-simple-ui"},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Manage-the-lifecycle-of-the-snapshot-listener":{"role":"pseudoSymbol","title":"Manage the lifecycle of the snapshot listener","abstract":[{"type":"text","text":"Now that you’ve implemented a "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":", and wrote code for storing "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":"s to Firestore, it is time to retrieve reminders from Firestore, so they can be displayed in the app’s UI."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Manage-the-lifecycle-of-the-snapshot-listener","kind":"section","type":"section","url":"\/tutorials\/makeitso\/03-retrieving-data-from-cloud-firestore-in-real-time#Manage-the-lifecycle-of-the-snapshot-listener"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Sign-in-with-Apple#Connect-the-UI":{"role":"pseudoSymbol","title":"Connect the UI","abstract":[{"type":"text","text":"Your app is now capable of storing data on a per-user basis. You achieved this by implementing Firebase Anonymous Authentication in the previous chapter, and then using the anonymous user’s ID to tag their reminders when storing them in Cloud Firestore."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Connect-the-UI","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-sign-in-with-apple#Connect-the-UI"},"02-sign-in-with-apple-03-AuthenticationService-SiwA-10.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","import AuthenticationServices","","public class AuthenticationService {","  @Injected(\\.auth) private var auth","  @Published var user: User?","","  @Published var errorMessage = \"\"","  private var currentNonce: String?","","  \/\/ (code ommitted for brevity)","}","","\/\/ MARK: - Sign in anonymously","","extension AuthenticationService {","  func signInAnonymously() {","  \/\/ (code ommitted for brevity)    ","  }","}","","\/\/ MARK: - Sign in with Apple","","extension AuthenticationService {","  @MainActor","  func handleSignInWithAppleCompletion(_ result: Result<ASAuthorization, Error>) async -> Bool {","    if case .failure(let failure) = result {","      errorMessage = failure.localizedDescription","      return false","    }","    else if case .success(let authorization) = result {","      if let appleIDCredential = authorization.credential as? ASAuthorizationAppleIDCredential {","        guard let nonce = currentNonce else {","          fatalError(\"Invalid state: a login callback was received, but no login request was sent.\")","        }","","      }","    }","    return false","  }","","  func handleSignInWithAppleRequest(_ request: ASAuthorizationAppleIDRequest) {","    request.requestedScopes = [.fullName, .email]","    do {","      let nonce = try CryptoUtils.randomNonceString()","      currentNonce = nonce","      request.nonce = CryptoUtils.sha256(nonce)","    }","    catch {","      print(\"Error when creating a nonce: \\(error.localizedDescription)\")","    }","  }","}"],"fileName":"AuthenticationService.swift","identifier":"02-sign-in-with-apple-03-AuthenticationService-SiwA-10.swift","type":"file","fileType":"swift","highlights":[{"line":35},{"line":36},{"line":37}]},"02-sign-in-with-apple-05-AuthenticationViewModel-SiwA-02.swift":{"syntax":"swift","content":["import Foundation","import Combine","import Factory","import FirebaseCore","import FirebaseAuth","import AuthenticationServices","","\/\/ (code ommitted for brevity)","","@MainActor","class AuthenticationViewModel: ObservableObject {","  @Injected(\\.authenticationService)","  var authenticationService","","  \/\/ (code ommitted for brevity)","}","","\/\/ MARK: - Sign in with Apple","","extension AuthenticationViewModel {","  func handleSignInWithAppleRequest(_ request: ASAuthorizationAppleIDRequest) {","    authenticationService.handleSignInWithAppleRequest(request)","  }","","  func handleSignInWithAppleCompletion(_ result: Result<ASAuthorization, Error>) async -> Bool {","    return await authenticationService.handleSignInWithAppleCompletion(result)","  }","}"],"fileName":"AuthenticationViewModel.swift","identifier":"02-sign-in-with-apple-05-AuthenticationViewModel-SiwA-02.swift","type":"file","fileType":"swift","highlights":[{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27}]},"02-sign-in-with-apple-03-AuthenticationService-SiwA-09.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","import AuthenticationServices","","public class AuthenticationService {","  @Injected(\\.auth) private var auth","  @Published var user: User?","","  @Published var errorMessage = \"\"","  private var currentNonce: String?","","  \/\/ (code ommitted for brevity)","}","","\/\/ MARK: - Sign in anonymously","","extension AuthenticationService {","  func signInAnonymously() {","  \/\/ (code ommitted for brevity)    ","  }","}","","\/\/ MARK: - Sign in with Apple","","extension AuthenticationService {","  @MainActor","  func handleSignInWithAppleCompletion(_ result: Result<ASAuthorization, Error>) async -> Bool {","    if case .failure(let failure) = result {","      errorMessage = failure.localizedDescription","      return false","    }","    else if case .success(let authorization) = result {","      if let appleIDCredential = authorization.credential as? ASAuthorizationAppleIDCredential {","","      }","    }","    return false","  }","","  func handleSignInWithAppleRequest(_ request: ASAuthorizationAppleIDRequest) {","    request.requestedScopes = [.fullName, .email]","    do {","      let nonce = try CryptoUtils.randomNonceString()","      currentNonce = nonce","      request.nonce = CryptoUtils.sha256(nonce)","    }","    catch {","      print(\"Error when creating a nonce: \\(error.localizedDescription)\")","    }","  }","}"],"fileName":"AuthenticationService.swift","identifier":"02-sign-in-with-apple-03-AuthenticationService-SiwA-09.swift","type":"file","fileType":"swift","highlights":[{"line":34},{"line":35},{"line":36}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Brush-up-the-UI":{"role":"pseudoSymbol","title":"Brush up the UI","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Brush-up-the-UI","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Brush-up-the-UI"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Create-a-Styleable-Toggle#Use-the-new-style-in-your-app":{"role":"pseudoSymbol","title":"Use the new style in your app","abstract":[{"type":"text","text":"When you implemented the UI for displaying reminders in the "},{"type":"codeVoice","code":"List"},{"type":"text","text":" view, you used an "},{"type":"codeVoice","code":"Image"},{"type":"text","text":" view to create the a circular check box."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Create-a-Styleable-Toggle#Use-the-new-style-in-your-app","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-create-a-styleable-toggle#Use-the-new-style-in-your-app"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Present-the-Add-Reminder-Dialog":{"role":"pseudoSymbol","title":"Present the Add Reminder Dialog","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Present-the-Add-Reminder-Dialog","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Present-the-Add-Reminder-Dialog"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Dependency-Injection-with-Factory#Add-the-Factory-SDK-to-your-project":{"role":"pseudoSymbol","title":"Add the Factory SDK to your project","abstract":[{"type":"text","text":"Even though "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MakeItSo"}]},{"type":"text","text":" is a relatively simple app, it consists of quite a few components that need to interact with each other: models, views, view models, repositories, and different backend services like Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Add-the-Factory-SDK-to-your-project","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-dependency-injection-with-factory#Add-the-Factory-SDK-to-your-project"},"doc://com.example.MakeItSo/tutorials/MakeItSo/05-Deleting-Data-from-Cloud-Firestore#Add-a-method-for-deleting-reminders-to-the-view-model":{"role":"pseudoSymbol","title":"Add a method for deleting reminders to the view model","abstract":[{"type":"text","text":"In this chapter of the tutorial, you’ve written code for creating, reading, and updating data in Cloud Firestore. There is one more data operation that is common for many apps: deleting data."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/05-Deleting-Data-from-Cloud-Firestore#Add-a-method-for-deleting-reminders-to-the-view-model","kind":"section","type":"section","url":"\/tutorials\/makeitso\/05-deleting-data-from-cloud-firestore#Add-a-method-for-deleting-reminders-to-the-view-model"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Implementing-MVVM":{"role":"project","title":"Implementing Model, View, ViewModel (MVVM)","estimatedTime":"20min","abstract":[{"type":"text","text":"With the basic views for displaying and adding todo items set up, it is time to think about the architecture of the app."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/02-implementing-mvvm"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Storing-Data-in-Cloud-Firestore#Implement-a-method-for-adding-new-reminders-to-the-repository":{"role":"pseudoSymbol","title":"Implement a method for adding new reminders to the repository","abstract":[{"type":"text","text":"With the UI of the application in place, and Firebase set up for local development, it is now time to store data in the cloud."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Implement-a-method-for-adding-new-reminders-to-the-repository","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-storing-data-in-cloud-firestore#Implement-a-method-for-adding-new-reminders-to-the-repository"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Developing-Locally-with-the-Emulator-Suite#Install-the-Firebase-CLI":{"role":"pseudoSymbol","title":"Install the Firebase CLI","abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite"},{"type":"text","text":" is a set of advanced tools for developers looking to build and test apps locally using Cloud Firestore, Realtime Database, Cloud Storage for Firebase, Authentication, Firebase Hosting, Cloud Functions (beta), Pub\/Sub (beta), and Firebase Extensions (beta). It provides a rich user interface to help you get running and prototyping quickly."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Install-the-Firebase-CLI","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-developing-locally-with-the-emulator-suite#Install-the-Firebase-CLI"},"02-sign-in-with-apple-01-create-new-plist-01.png":{"alt":null,"type":"image","identifier":"02-sign-in-with-apple-01-create-new-plist-01.png","variants":[{"url":"\/images\/02-sign-in-with-apple-01-create-new-plist-01@2x.png","traits":["2x","light"]}]},"02-sign-in-with-apple-01-register-bundleid-02.png":{"alt":null,"type":"image","identifier":"02-sign-in-with-apple-01-register-bundleid-02.png","variants":[{"url":"\/images\/02-sign-in-with-apple-01-register-bundleid-02@2x.png","traits":["2x","light"]},{"url":"\/images\/02-sign-in-with-apple-01-register-bundleid-02~dark@2x.png","traits":["2x","dark"]}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Developing-Locally-with-the-Emulator-Suite":{"role":"project","title":"Developing locally with the Emulator Suite","estimatedTime":"25min","abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite"},{"type":"text","text":" is a set of advanced tools for developers looking to build and test apps locally using Cloud Firestore, Realtime Database, Cloud Storage for Firebase, Authentication, Firebase Hosting, Cloud Functions (beta), Pub\/Sub (beta), and Firebase Extensions (beta). It provides a rich user interface to help you get running and prototyping quickly."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/02-developing-locally-with-the-emulator-suite"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Anonymous-Auth#Inject-AuthenticationService-into-its-dependants":{"role":"pseudoSymbol","title":"Inject AuthenticationService into its dependants","abstract":[{"type":"text","text":"It seems like MakeItSo meets the bar for an MVP (minimum viable product): users can add new reminders, check them off, change their details, and even delete them. But - as you might have noticed when running the app on two different iOS Simulators - the app is not multi-user capable. What’s worse, it seems like all users can see everyone else’s todo items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Inject-AuthenticationService-into-its-dependants","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-anonymous-auth#Inject-AuthenticationService-into-its-dependants"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Create-a-Dialog-for-Adding-New-Reminders":{"role":"pseudoSymbol","title":"Create a Dialog for Adding New Reminders","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Create-a-Dialog-for-Adding-New-Reminders","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Create-a-Dialog-for-Adding-New-Reminders"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Anonymous-Auth":{"role":"project","title":"Implementing guest users with Firebase Anonymous Authentication","estimatedTime":"35min","abstract":[{"type":"text","text":"It seems like MakeItSo meets the bar for an MVP (minimum viable product): users can add new reminders, check them off, change their details, and even delete them. But - as you might have noticed when running the app on two different iOS Simulators - the app is not multi-user capable. What’s worse, it seems like all users can see everyone else’s todo items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/01-anonymous-auth"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Display-a-List-of-Reminders":{"role":"pseudoSymbol","title":"Display a List of Reminders","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Display-a-List-of-Reminders","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Display-a-List-of-Reminders"},"https://firebase.google.com/docs/emulator-suite":{"title":"Firebase Local Emulator Suite","titleInlineContent":[{"type":"text","text":"Firebase Local Emulator Suite"}],"type":"link","identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite","url":"https:\/\/firebase.google.com\/docs\/emulator-suite"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Storing-Data-in-Cloud-Firestore#Connect-the-view-model-to-the-repository":{"role":"pseudoSymbol","title":"Connect the view model to the repository","abstract":[{"type":"text","text":"With the UI of the application in place, and Firebase set up for local development, it is now time to store data in the cloud."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Connect-the-view-model-to-the-repository","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-storing-data-in-cloud-firestore#Connect-the-view-model-to-the-repository"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Dependency-Injection-with-Factory#Inject-RemindersRepository-into-RemindersListViewModel":{"role":"pseudoSymbol","title":"Inject RemindersRepository into RemindersListViewModel","abstract":[{"type":"text","text":"Even though "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MakeItSo"}]},{"type":"text","text":" is a relatively simple app, it consists of quite a few components that need to interact with each other: models, views, view models, repositories, and different backend services like Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Inject-RemindersRepository-into-RemindersListViewModel","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-dependency-injection-with-factory#Inject-RemindersRepository-into-RemindersListViewModel"},"doc://com.example.MakeItSo/tutorials/MakeItSo/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase/Building-Reusable-UI-Components":{"role":"article","title":"Building Reusable UI Components","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Building-Reusable-UI-Components","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/creating-a-simple-todo-list-app-with-swiftui-and-firebase\/building-reusable-ui-components"},"doc://com.example.MakeItSo/tutorials/MakeItSo/04-Updating-Data-in-Cloud-Firestore":{"role":"project","title":"Updating data in Cloud Firestore","estimatedTime":"35min","abstract":[{"type":"text","text":"So far, the app you’re building can help you add an keep track of your todos, but you cannot mark them as completed."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/04-Updating-Data-in-Cloud-Firestore","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/04-updating-data-in-cloud-firestore"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Create-a-Styleable-Toggle#Update-the-preview-provider":{"role":"pseudoSymbol","title":"Update the preview provider","abstract":[{"type":"text","text":"When you implemented the UI for displaying reminders in the "},{"type":"codeVoice","code":"List"},{"type":"text","text":" view, you used an "},{"type":"codeVoice","code":"Image"},{"type":"text","text":" view to create the a circular check box."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Create-a-Styleable-Toggle#Update-the-preview-provider","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-create-a-styleable-toggle#Update-the-preview-provider"},"doc://com.example.MakeItSo/tutorials/MakeItSo/05-Deleting-Data-from-Cloud-Firestore#Implement-a-swipe-action-for-deleteing-reminders-from-the-list-view":{"role":"pseudoSymbol","title":"Implement a swipe action for deleteing reminders from the list view","abstract":[{"type":"text","text":"In this chapter of the tutorial, you’ve written code for creating, reading, and updating data in Cloud Firestore. There is one more data operation that is common for many apps: deleting data."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/05-Deleting-Data-from-Cloud-Firestore#Implement-a-swipe-action-for-deleteing-reminders-from-the-list-view","kind":"section","type":"section","url":"\/tutorials\/makeitso\/05-deleting-data-from-cloud-firestore#Implement-a-swipe-action-for-deleteing-reminders-from-the-list-view"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project#Register-Your-App-with-Firebase":{"role":"pseudoSymbol","title":"Register Your App with Firebase","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Register-Your-App-with-Firebase","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project#Register-Your-App-with-Firebase"},"doc://com.example.MakeItSo/tutorials/MakeItSo/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase/Authenticating-Users":{"role":"article","title":"Authenticating Users","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Authenticating-Users","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/creating-a-simple-todo-list-app-with-swiftui-and-firebase\/authenticating-users"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Create-a-Styleable-Toggle":{"role":"project","title":"Creating a Styleable Toggle","estimatedTime":"25min","abstract":[{"type":"text","text":"When you implemented the UI for displaying reminders in the "},{"type":"codeVoice","code":"List"},{"type":"text","text":" view, you used an "},{"type":"codeVoice","code":"Image"},{"type":"text","text":" view to create the a circular check box."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Create-a-Styleable-Toggle","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/02-create-a-styleable-toggle"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Sign-in-with-Apple":{"role":"project","title":"Sign in with Apple and Firebase Authentication","estimatedTime":"25min","abstract":[{"type":"text","text":"Your app is now capable of storing data on a per-user basis. You achieved this by implementing Firebase Anonymous Authentication in the previous chapter, and then using the anonymous user’s ID to tag their reminders when storing them in Cloud Firestore."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/02-sign-in-with-apple"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project":{"role":"project","title":"Adding Firebase to Your Project","estimatedTime":"25min","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project"},"doc://com.example.MakeItSo/tutorials/MakeItSo/05-Deleting-Data-from-Cloud-Firestore#Implement-a-method-for-removing-a-single-reminder-from-the-repository":{"role":"pseudoSymbol","title":"Implement a method for removing a single reminder from the repository","abstract":[{"type":"text","text":"In this chapter of the tutorial, you’ve written code for creating, reading, and updating data in Cloud Firestore. There is one more data operation that is common for many apps: deleting data."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/05-Deleting-Data-from-Cloud-Firestore#Implement-a-method-for-removing-a-single-reminder-from-the-repository","kind":"section","type":"section","url":"\/tutorials\/makeitso\/05-deleting-data-from-cloud-firestore#Implement-a-method-for-removing-a-single-reminder-from-the-repository"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Implementing-MVVM#Add-a-method-to-the-View-Model-for-toggling-the-completion-state-of-a-reminder":{"role":"pseudoSymbol","title":"Add a method to the View Model for toggling the completion state of a reminder","abstract":[{"type":"text","text":"With the basic views for displaying and adding todo items set up, it is time to think about the architecture of the app."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Add-a-method-to-the-View-Model-for-toggling-the-completion-state-of-a-reminder","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-implementing-mvvm#Add-a-method-to-the-View-Model-for-toggling-the-completion-state-of-a-reminder"},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time":{"role":"project","title":"Retrieving data from Cloud Firestore in real-time","estimatedTime":"25min","abstract":[{"type":"text","text":"Now that you’ve implemented a "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":", and wrote code for storing "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":"s to Firestore, it is time to retrieve reminders from Firestore, so they can be displayed in the app’s UI."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/03-retrieving-data-from-cloud-firestore-in-real-time"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Anonymous-Auth#Implement-an-AuthenticationService":{"role":"pseudoSymbol","title":"Implement an AuthenticationService","abstract":[{"type":"text","text":"It seems like MakeItSo meets the bar for an MVP (minimum viable product): users can add new reminders, check them off, change their details, and even delete them. But - as you might have noticed when running the app on two different iOS Simulators - the app is not multi-user capable. What’s worse, it seems like all users can see everyone else’s todo items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Implement-an-AuthenticationService","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-anonymous-auth#Implement-an-AuthenticationService"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Anonymous-Auth#Update-the-RemindersRepository-to-operate-only-on-the-users-data":{"role":"pseudoSymbol","title":"Update the RemindersRepository to operate only on the user's data","abstract":[{"type":"text","text":"It seems like MakeItSo meets the bar for an MVP (minimum viable product): users can add new reminders, check them off, change their details, and even delete them. But - as you might have noticed when running the app on two different iOS Simulators - the app is not multi-user capable. What’s worse, it seems like all users can see everyone else’s todo items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Update-the-RemindersRepository-to-operate-only-on-the-users-data","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-anonymous-auth#Update-the-RemindersRepository-to-operate-only-on-the-users-data"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Developing-Locally-with-the-Emulator-Suite#Use-launch-arguments-to-switch-between-the-Emulator-and-your-Firebase-project":{"role":"pseudoSymbol","title":"Use launch arguments to switch between the Emulator and your Firebase project","abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite"},{"type":"text","text":" is a set of advanced tools for developers looking to build and test apps locally using Cloud Firestore, Realtime Database, Cloud Storage for Firebase, Authentication, Firebase Hosting, Cloud Functions (beta), Pub\/Sub (beta), and Firebase Extensions (beta). It provides a rich user interface to help you get running and prototyping quickly."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Use-launch-arguments-to-switch-between-the-Emulator-and-your-Firebase-project","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-developing-locally-with-the-emulator-suite#Use-launch-arguments-to-switch-between-the-Emulator-and-your-Firebase-project"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project#Initialize-Firebase-in-Your-App":{"role":"pseudoSymbol","title":"Initialize Firebase in Your App","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Initialize-Firebase-in-Your-App","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project#Initialize-Firebase-in-Your-App"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Implementing-MVVM#Add-a-method-to-the-View-Model-for-adding-new-reminders":{"role":"pseudoSymbol","title":"Add a method to the View Model for adding new reminders","abstract":[{"type":"text","text":"With the basic views for displaying and adding todo items set up, it is time to think about the architecture of the app."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Add-a-method-to-the-View-Model-for-adding-new-reminders","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-implementing-mvvm#Add-a-method-to-the-View-Model-for-adding-new-reminders"},"doc://com.example.MakeItSo/tutorials/MakeItSo/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase/Storing-Data-in-the-Cloud":{"role":"article","title":"Storing Data in the Cloud","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Storing-Data-in-the-Cloud","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/creating-a-simple-todo-list-app-with-swiftui-and-firebase\/storing-data-in-the-cloud"},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Run-the-app-to-experience-real-time-sync":{"role":"pseudoSymbol","title":"Run the app to experience real-time sync","abstract":[{"type":"text","text":"Now that you’ve implemented a "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":", and wrote code for storing "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":"s to Firestore, it is time to retrieve reminders from Firestore, so they can be displayed in the app’s UI."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Run-the-app-to-experience-real-time-sync","kind":"section","type":"section","url":"\/tutorials\/makeitso\/03-retrieving-data-from-cloud-firestore-in-real-time#Run-the-app-to-experience-real-time-sync"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Storing-Data-in-Cloud-Firestore#Conform-Reminder-to-Codable":{"role":"pseudoSymbol","title":"Conform Reminder to Codable","abstract":[{"type":"text","text":"With the UI of the application in place, and Firebase set up for local development, it is now time to store data in the cloud."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Conform-Reminder-to-Codable","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-storing-data-in-cloud-firestore#Conform-Reminder-to-Codable"},"02-sign-in-with-apple-01-create-new-plist-04.png":{"alt":null,"type":"image","identifier":"02-sign-in-with-apple-01-create-new-plist-04.png","variants":[{"url":"\/images\/02-sign-in-with-apple-01-create-new-plist-04@2x.png","traits":["2x","light"]}]},"02-sign-in-with-apple-03-AuthenticationService-SiwA-14.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","import AuthenticationServices","","public class AuthenticationService {","  @Injected(\\.auth) private var auth","  @Published var user: User?","","  @Published var errorMessage = \"\"","  private var currentNonce: String?","","  \/\/ (code ommitted for brevity)","}","","\/\/ MARK: - Sign in anonymously","","extension AuthenticationService {","  func signInAnonymously() {","  \/\/ (code ommitted for brevity)    ","  }","}","","\/\/ MARK: - Sign in with Apple","","extension AuthenticationService {","  @MainActor","  func handleSignInWithAppleCompletion(_ result: Result<ASAuthorization, Error>) async -> Bool {","    if case .failure(let failure) = result {","      errorMessage = failure.localizedDescription","      return false","    }","    else if case .success(let authorization) = result {","      if let appleIDCredential = authorization.credential as? ASAuthorizationAppleIDCredential {","        guard let nonce = currentNonce else {","          fatalError(\"Invalid state: a login callback was received, but no login request was sent.\")","        }","        guard let appleIDToken = appleIDCredential.identityToken else {","          print(\"Unable to fetch identify token.\")","          return false","        }","        guard let idTokenString = String(data: appleIDToken, encoding: .utf8) else {","          print(\"Unable to serialise token string from data: \\(appleIDToken.debugDescription)\")","          return false","        }","","        let credential = OAuthProvider.appleCredential(withIDToken: idTokenString,","                                                       rawNonce: nonce,","                                                       fullName: appleIDCredential.fullName)","","        do {","          try await auth.signIn(with: credential)","          return true","        }","        catch {","          print(\"Error authenticating: \\(error.localizedDescription)\")","          return false","        }","      }","    }","    return false","  }","","  func handleSignInWithAppleRequest(_ request: ASAuthorizationAppleIDRequest) {","    request.requestedScopes = [.fullName, .email]","    do {","      let nonce = try CryptoUtils.randomNonceString()","      currentNonce = nonce","      request.nonce = CryptoUtils.sha256(nonce)","    }","    catch {","      print(\"Error when creating a nonce: \\(error.localizedDescription)\")","    }","  }","}"],"fileName":"AuthenticationService.swift","identifier":"02-sign-in-with-apple-03-AuthenticationService-SiwA-14.swift","type":"file","fileType":"swift","highlights":[{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Create-a-Styleable-Toggle#Create-a-custom-toggle-style":{"role":"pseudoSymbol","title":"Create a custom toggle style","abstract":[{"type":"text","text":"When you implemented the UI for displaying reminders in the "},{"type":"codeVoice","code":"List"},{"type":"text","text":" view, you used an "},{"type":"codeVoice","code":"Image"},{"type":"text","text":" view to create the a circular check box."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Create-a-Styleable-Toggle#Create-a-custom-toggle-style","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-create-a-styleable-toggle#Create-a-custom-toggle-style"},"02-sign-in-with-apple-01-register-bundleid-failure.png":{"alt":null,"type":"image","identifier":"02-sign-in-with-apple-01-register-bundleid-failure.png","variants":[{"url":"\/images\/02-sign-in-with-apple-01-register-bundleid-failure@2x.png","traits":["2x","light"]},{"url":"\/images\/02-sign-in-with-apple-01-register-bundleid-failure~dark@2x.png","traits":["2x","dark"]}]},"02-sign-in-with-apple-02-enable-siwa-capability-01.png":{"alt":null,"type":"image","identifier":"02-sign-in-with-apple-02-enable-siwa-capability-01.png","variants":[{"url":"\/images\/02-sign-in-with-apple-02-enable-siwa-capability-01@2x.png","traits":["2x","light"]},{"url":"\/images\/02-sign-in-with-apple-02-enable-siwa-capability-01~dark@2x.png","traits":["2x","dark"]}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Account-Linking":{"role":"project","title":"Account Linking","estimatedTime":"10min","abstract":[{"type":"text","text":"Users of your app can now sign in to the app using their Apple ID, but unfortunately, when they do so, any data they might have entered before signing in will disappear. This is probably not what the user expected!"}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Account-Linking","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/03-account-linking"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Anonymous-Auth#Download-the-project-files":{"role":"pseudoSymbol","title":"Download the project files","abstract":[{"type":"text","text":"It seems like MakeItSo meets the bar for an MVP (minimum viable product): users can add new reminders, check them off, change their details, and even delete them. But - as you might have noticed when running the app on two different iOS Simulators - the app is not multi-user capable. What’s worse, it seems like all users can see everyone else’s todo items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Download-the-project-files","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-anonymous-auth#Download-the-project-files"},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Account-Linking#Run-the-app":{"role":"pseudoSymbol","title":"Run the app","abstract":[{"type":"text","text":"Users of your app can now sign in to the app using their Apple ID, but unfortunately, when they do so, any data they might have entered before signing in will disappear. This is probably not what the user expected!"}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Account-Linking#Run-the-app","kind":"section","type":"section","url":"\/tutorials\/makeitso\/03-account-linking#Run-the-app"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Extract-Row-View":{"role":"project","title":"Extracting the Reminder Row Into a Separate View","estimatedTime":"15min","abstract":[{"type":"text","text":"SwiftUI’s syntax for describing UIs in a declarative way is quite efficient, and allows you to describe rather complex UIs with relatively little code."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/01-extract-row-view"},"doc://com.example.MakeItSo/tutorials/MakeItSo/05-Deleting-Data-from-Cloud-Firestore":{"role":"project","title":"Deleting data from Cloud Firestore","estimatedTime":"15min","abstract":[{"type":"text","text":"In this chapter of the tutorial, you’ve written code for creating, reading, and updating data in Cloud Firestore. There is one more data operation that is common for many apps: deleting data."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/05-Deleting-Data-from-Cloud-Firestore","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/05-deleting-data-from-cloud-firestore"},"doc://com.example.MakeItSo/tutorials/MakeItSo/04-Updating-Data-in-Cloud-Firestore#Edit-reminders":{"role":"pseudoSymbol","title":"Edit reminders","abstract":[{"type":"text","text":"So far, the app you’re building can help you add an keep track of your todos, but you cannot mark them as completed."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/04-Updating-Data-in-Cloud-Firestore#Edit-reminders","kind":"section","type":"section","url":"\/tutorials\/makeitso\/04-updating-data-in-cloud-firestore#Edit-reminders"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Storing-Data-in-Cloud-Firestore#Wrap-up":{"role":"pseudoSymbol","title":"Wrap up","abstract":[{"type":"text","text":"With the UI of the application in place, and Firebase set up for local development, it is now time to store data in the cloud."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Wrap-up","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-storing-data-in-cloud-firestore#Wrap-up"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Extract-Row-View#Extract-the-view":{"role":"pseudoSymbol","title":"Extract the view","abstract":[{"type":"text","text":"SwiftUI’s syntax for describing UIs in a declarative way is quite efficient, and allows you to describe rather complex UIs with relatively little code."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View#Extract-the-view","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-extract-row-view#Extract-the-view"},"02-sign-in-with-apple-03-AuthenticationService-SiwA-04.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","import AuthenticationServices","","public class AuthenticationService {","  @Injected(\\.auth) private var auth","  @Published var user: User?","","  @Published var errorMessage = \"\"","","  \/\/ (code ommitted for brevity)","}","","\/\/ MARK: - Sign in anonymously","","extension AuthenticationService {","  func signInAnonymously() {","  \/\/ (code ommitted for brevity)    ","  }","}","","\/\/ MARK: - Sign in with Apple","","extension AuthenticationService {","  func handleSignInWithAppleRequest(_ request: ASAuthorizationAppleIDRequest) {","    request.requestedScopes = [.fullName, .email]","  }","}"],"fileName":"AuthenticationService.swift","identifier":"02-sign-in-with-apple-03-AuthenticationService-SiwA-04.swift","type":"file","fileType":"swift","highlights":[{"line":27}]},"02-sign-in-with-apple-01-create-new-plist-05.png":{"alt":null,"type":"image","identifier":"02-sign-in-with-apple-01-create-new-plist-05.png","variants":[{"url":"\/images\/02-sign-in-with-apple-01-create-new-plist-05@2x.png","traits":["2x","light"]},{"url":"\/images\/02-sign-in-with-apple-01-create-new-plist-05~dark@2x.png","traits":["2x","dark"]}]},"02-sign-in-with-apple.zip":{"checksum":"39bc0b52b5f2a8d4b7174303dde87f31d7537f86ab1b4e9e9ccf4a615f5d0b2c0b382217b2c8c5cf67735ab4ec9e1e9163cbd6ff1131ec27964ff7793809499f","type":"download","identifier":"02-sign-in-with-apple.zip","url":"\/downloads\/02-sign-in-with-apple.zip"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Dependency-Injection-with-Factory":{"role":"project","title":"Dependency Injection with Factory","estimatedTime":"20min","abstract":[{"type":"text","text":"Even though "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MakeItSo"}]},{"type":"text","text":" is a relatively simple app, it consists of quite a few components that need to interact with each other: models, views, view models, repositories, and different backend services like Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/01-dependency-injection-with-factory"},"02-sign-in-with-apple-05-AuthenticationViewModel-SiwA-01.swift":{"syntax":"swift","content":["import Foundation","import Combine","import Factory","import FirebaseCore","import FirebaseAuth","import AuthenticationServices","","\/\/ (code ommitted for brevity)","","@MainActor","class AuthenticationViewModel: ObservableObject {","  @Injected(\\.authenticationService)","  var authenticationService","","  \/\/ (code ommitted for brevity)","}","","\/\/ MARK: - Sign in with Apple","","extension AuthenticationViewModel {","}"],"fileName":"AuthenticationViewModel.swift","identifier":"02-sign-in-with-apple-05-AuthenticationViewModel-SiwA-01.swift","type":"file","fileType":"swift","highlights":[{"line":6},{"line":18},{"line":19},{"line":20},{"line":21}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Connect-the-view-model":{"role":"pseudoSymbol","title":"Connect the view model","abstract":[{"type":"text","text":"Now that you’ve implemented a "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":", and wrote code for storing "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":"s to Firestore, it is time to retrieve reminders from Firestore, so they can be displayed in the app’s UI."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Connect-the-view-model","kind":"section","type":"section","url":"\/tutorials\/makeitso\/03-retrieving-data-from-cloud-firestore-in-real-time#Connect-the-view-model"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Wrap-Up":{"role":"pseudoSymbol","title":"Wrap Up","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Wrap-Up","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Wrap-Up"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Implementing-MVVM#Organise-the-Project-Files":{"role":"pseudoSymbol","title":"Organise the Project Files","abstract":[{"type":"text","text":"With the basic views for displaying and adding todo items set up, it is time to think about the architecture of the app."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Organise-the-Project-Files","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-implementing-mvvm#Organise-the-Project-Files"},"02-sign-in-with-apple-03-AuthenticationService-SiwA-12.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","import AuthenticationServices","","public class AuthenticationService {","  @Injected(\\.auth) private var auth","  @Published var user: User?","","  @Published var errorMessage = \"\"","  private var currentNonce: String?","","  \/\/ (code ommitted for brevity)","}","","\/\/ MARK: - Sign in anonymously","","extension AuthenticationService {","  func signInAnonymously() {","  \/\/ (code ommitted for brevity)    ","  }","}","","\/\/ MARK: - Sign in with Apple","","extension AuthenticationService {","  @MainActor","  func handleSignInWithAppleCompletion(_ result: Result<ASAuthorization, Error>) async -> Bool {","    if case .failure(let failure) = result {","      errorMessage = failure.localizedDescription","      return false","    }","    else if case .success(let authorization) = result {","      if let appleIDCredential = authorization.credential as? ASAuthorizationAppleIDCredential {","        guard let nonce = currentNonce else {","          fatalError(\"Invalid state: a login callback was received, but no login request was sent.\")","        }","        guard let appleIDToken = appleIDCredential.identityToken else {","          print(\"Unable to fetch identify token.\")","          return false","        }","        guard let idTokenString = String(data: appleIDToken, encoding: .utf8) else {","          print(\"Unable to serialise token string from data: \\(appleIDToken.debugDescription)\")","          return false","        }","","      }","    }","    return false","  }","","  func handleSignInWithAppleRequest(_ request: ASAuthorizationAppleIDRequest) {","    request.requestedScopes = [.fullName, .email]","    do {","      let nonce = try CryptoUtils.randomNonceString()","      currentNonce = nonce","      request.nonce = CryptoUtils.sha256(nonce)","    }","    catch {","      print(\"Error when creating a nonce: \\(error.localizedDescription)\")","    }","  }","}"],"fileName":"AuthenticationService.swift","identifier":"02-sign-in-with-apple-03-AuthenticationService-SiwA-12.swift","type":"file","fileType":"swift","highlights":[{"line":42},{"line":43},{"line":44},{"line":45}]},"02-sign-in-with-apple-03-AuthenticationService-SiwA-06.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","import AuthenticationServices","","public class AuthenticationService {","  @Injected(\\.auth) private var auth","  @Published var user: User?","","  @Published var errorMessage = \"\"","  private var currentNonce: String?","","  \/\/ (code ommitted for brevity)","}","","\/\/ MARK: - Sign in anonymously","","extension AuthenticationService {","  func signInAnonymously() {","  \/\/ (code ommitted for brevity)    ","  }","}","","\/\/ MARK: - Sign in with Apple","","extension AuthenticationService {","  func handleSignInWithAppleRequest(_ request: ASAuthorizationAppleIDRequest) {","    request.requestedScopes = [.fullName, .email]","    do {","      let nonce = try CryptoUtils.randomNonceString()","      currentNonce = nonce","      request.nonce = CryptoUtils.sha256(nonce)","    }","    catch {","      print(\"Error when creating a nonce: \\(error.localizedDescription)\")","    }","  }","}"],"fileName":"AuthenticationService.swift","identifier":"02-sign-in-with-apple-03-AuthenticationService-SiwA-06.swift","type":"file","fileType":"swift","highlights":[{"line":11},{"line":31},{"line":32}]},"02-sign-in-with-apple-03-AuthenticationService-SiwA-02.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","import AuthenticationServices","","public class AuthenticationService {","  @Injected(\\.auth) private var auth","  @Published var user: User?","","  @Published var errorMessage = \"\"","","  \/\/ (code ommitted for brevity)","}","","\/\/ MARK: - Sign in anonymously","","extension AuthenticationService {","  func signInAnonymously() {","  \/\/ (code ommitted for brevity)    ","  }","}","","\/\/ MARK: - Sign in with Apple","","extension AuthenticationService {","}"],"fileName":"AuthenticationService.swift","identifier":"02-sign-in-with-apple-03-AuthenticationService-SiwA-02.swift","type":"file","fileType":"swift","highlights":[{"line":4}]},"doc://com.example.MakeItSo/tutorials/MakeItSo":{"role":"overview","title":"SwiftUI and Firebase","abstract":[{"type":"text","text":"Learn how to use Firebase in SwiftUI apps by building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a replica of Apple’s Reminders app."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo","kind":"overview","type":"topic","url":"\/tutorials\/makeitso"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Sign-in-with-Apple#Connect-the-app-to-your-Apple-developer-account":{"role":"pseudoSymbol","title":"Connect the app to your Apple developer account","abstract":[{"type":"text","text":"Your app is now capable of storing data on a per-user basis. You achieved this by implementing Firebase Anonymous Authentication in the previous chapter, and then using the anonymous user’s ID to tag their reminders when storing them in Cloud Firestore."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Connect-the-app-to-your-Apple-developer-account","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-sign-in-with-apple#Connect-the-app-to-your-Apple-developer-account"},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Implement-a-snapshot-listener":{"role":"pseudoSymbol","title":"Implement a snapshot listener","abstract":[{"type":"text","text":"Now that you’ve implemented a "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":", and wrote code for storing "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":"s to Firestore, it is time to retrieve reminders from Firestore, so they can be displayed in the app’s UI."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Implement-a-snapshot-listener","kind":"section","type":"section","url":"\/tutorials\/makeitso\/03-retrieving-data-from-cloud-firestore-in-real-time#Implement-a-snapshot-listener"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Developing-Locally-with-the-Emulator-Suite#Launch-the-Emulator-and-view-the-Emulator-dashboard":{"role":"pseudoSymbol","title":"Launch the Emulator and view the Emulator dashboard","abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite"},{"type":"text","text":" is a set of advanced tools for developers looking to build and test apps locally using Cloud Firestore, Realtime Database, Cloud Storage for Firebase, Authentication, Firebase Hosting, Cloud Functions (beta), Pub\/Sub (beta), and Firebase Extensions (beta). It provides a rich user interface to help you get running and prototyping quickly."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Launch-the-Emulator-and-view-the-Emulator-dashboard","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-developing-locally-with-the-emulator-suite#Launch-the-Emulator-and-view-the-Emulator-dashboard"},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Clean-up":{"role":"pseudoSymbol","title":"Clean-up","abstract":[{"type":"text","text":"Now that you’ve implemented a "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":", and wrote code for storing "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":"s to Firestore, it is time to retrieve reminders from Firestore, so they can be displayed in the app’s UI."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Clean-up","kind":"section","type":"section","url":"\/tutorials\/makeitso\/03-retrieving-data-from-cloud-firestore-in-real-time#Clean-up"}}}
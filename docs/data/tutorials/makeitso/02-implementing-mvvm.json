{"variants":[{"paths":["\/tutorials\/makeitso\/02-implementing-mvvm"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"With the basic views for displaying and adding todo items set up, it is time to think about the architecture of the app."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You will refactor the application to make use of the MVVM ("},{"type":"strong","inlineContent":[{"type":"text","text":"M"}]},{"type":"text","text":"odel, "},{"type":"strong","inlineContent":[{"type":"text","text":"V"}]},{"type":"text","text":"iew, "},{"type":"strong","inlineContent":[{"type":"text","text":"V"}]},{"type":"text","text":"iew "},{"type":"strong","inlineContent":[{"type":"text","text":"M"}]},{"type":"text","text":"odel) pattern."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Download the project files to begin building this project, and follow the steps below."}]}],"estimatedTimeInMinutes":20,"title":"Implementing Model, View, ViewModel (MVVM)","image":"building-todo-ui-intro.png","xcodeRequirement":"Xcode 14","chapter":"Building a Simple UI","kind":"hero","backgroundImage":"building-todo-ui-intro.png","projectFiles":"02-implementing-mvvm.zip"},{"kind":"tasks","tasks":[{"anchor":"Organise-the-Project-Files","title":"Organise the Project Files","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In the first tutorial, you implemented the basic todo list view inside "},{"type":"codeVoice","code":"ContentView.swift"},{"type":"text","text":", and created a couple of new files in the root folder of the project. That’s fine for a simple project, but as this project will grow in complexity, it is important to keep things nicely organised."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To get started, use the completed project from the previous tutorial. Alternatively, download the project files for this tutorial and use the project in the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"starter"}]},{"type":"text","text":" folder."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In this first step, you will create a number of folders to organise the files in your project. The top level folder will contain sub folders for the individual features of the app. Inside those features, you will create sub folders for organising files according to their architectural role: "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Models"}]},{"type":"text","text":", "},{"type":"emphasis","inlineContent":[{"type":"text","text":"View Models"}]},{"type":"text","text":", and "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Views"}]},{"type":"text","text":"."}]},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Select the root folder of your project (named "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MakeItSo"}]},{"type":"text","text":"), and then create a new folder by selecting "},{"type":"emphasis","inlineContent":[{"type":"text","text":"New Group"}]},{"type":"text","text":" in the context menu."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Name the folder "},{"type":"codeVoice","code":"Features"},{"type":"text","text":"."}]}],"type":"step","runtimePreview":null,"media":"mvvm-01-new-group.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Select the "},{"type":"codeVoice","code":"Features"},{"type":"text","text":" folder, and create a new group named "},{"type":"codeVoice","code":"Reminders"},{"type":"text","text":" as a child of "},{"type":"codeVoice","code":"Features"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"mvvm-01-group-reminders.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Inside the "},{"type":"codeVoice","code":"Reminders"},{"type":"text","text":" folder, create three new groups, naming them "},{"type":"codeVoice","code":"Models"},{"type":"text","text":", "},{"type":"codeVoice","code":"ViewModels"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Views"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"mvvm-01-group-mvvm.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The project layout in the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Project Navigator"}]},{"type":"text","text":" should now look like this."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"mvvm-01-all-groups.png"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the next step, you will move the existing files into the new folders."}]},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Drag and drop "},{"type":"codeVoice","code":"Reminder.swift"},{"type":"text","text":" into the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Models"}]},{"type":"text","text":" folder."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"mvvm-02-move-files-reminder.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Drag and drop the views "},{"type":"codeVoice","code":"ContentView.swift"},{"type":"text","text":" and "},{"type":"codeVoice","code":"AddReminderView.swift"},{"type":"text","text":" into the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Views"}]},{"type":"text","text":" folder."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The project structure should now look like this."}]}],"type":"step","runtimePreview":null,"media":"mvvm-02-move-files.png"},{"type":"paragraph","inlineContent":[{"type":"text","text":"So far, you’ve built the main UI of the app in a file named "},{"type":"codeVoice","code":"ContentView.swift"},{"type":"text","text":". However, since this view displays a list of "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":"s, it might a better idea to name it "},{"type":"codeVoice","code":"RemindersListView"},{"type":"text","text":". In the next step, you will use Xcode’s refactoring tools to rename "},{"type":"codeVoice","code":"ContentView"},{"type":"text","text":" and all its occurrences to "},{"type":"codeVoice","code":"RemindersListView"},{"type":"text","text":"."}]},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Open "},{"type":"codeVoice","code":"ContentView.swift"},{"type":"text","text":", and select the view’s name. Open the context menu, and choose "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Refactor > Rename"}]},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"mvvm-01-refactor-rename.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Xcode will find all occurrences of "},{"type":"codeVoice","code":"ContentView"},{"type":"text","text":" and show them in the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"refactoring editor"}]},{"type":"text","text":". Type in the new name for the view, "},{"type":"codeVoice","code":"RemindersListView"},{"type":"text","text":"."}]}],"caption":[{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you receive an error message saying that refactoring failed, try building the project first (⌘ + B), and resolve any compilation errors. Then try running the refactoring again."}]}],"type":"aside","name":"Tip"}],"type":"step","runtimePreview":null,"media":"mvvm-01-refactor-rename-reminderslistview.png"}]},{"anchor":"Create-a-View-Model-and-connect-it-to-the-RemindersListView","title":"Create a View Model and connect it to the RemindersListView","contentSection":[{"kind":"contentAndMedia","content":[],"mediaPosition":"trailing"}],"stepsSection":[{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Select the "},{"type":"codeVoice","code":"ViewModels"},{"type":"text","text":" folder, and create a Swift file named "},{"type":"codeVoice","code":"RemindersListViewModel"},{"type":"text","text":" as a child of "},{"type":"codeVoice","code":"ViewModels"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"mvvm-01-new-file.png"},{"code":"implementing-mvvm-02-reminderslistviewmodel-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a class named "},{"type":"codeVoice","code":"RemindersListViewModel"},{"type":"text","text":", and conform it to the "},{"type":"codeVoice","code":"ObservableObject"},{"type":"text","text":" protocol."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"implementing-mvvm-02-reminderslistviewmodel-02.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a new property "},{"type":"codeVoice","code":"reminders"},{"type":"text","text":", and assign some sample values from "},{"type":"codeVoice","code":"Reminder.samples"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"implementing-mvvm-02-reminderslistviewmodel-03.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add the "},{"type":"codeVoice","code":"@Published"},{"type":"text","text":" property wrapper to mark this property as published."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"implementing-mvvm-02-reminderslistview-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a new property "},{"type":"codeVoice","code":"viewModel"},{"type":"text","text":" to "},{"type":"codeVoice","code":"RemindersListView"},{"type":"text","text":", and instantiate "},{"type":"codeVoice","code":"RemindersListViewModel"},{"type":"text","text":". Mark the property as "},{"type":"codeVoice","code":"@StateObject"},{"type":"text","text":"."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftUI will manage the lifecycle of any properties marked as "},{"type":"codeVoice","code":"@StateObject"},{"type":"text","text":", and ensure that they are instantiated only once. This is important, as SwiftUI will create new instances of any view whenever any of the properties it observes change."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"code":"implementing-mvvm-02-reminderslistview-02.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Uncomment (or remove) the "},{"type":"codeVoice","code":"reminders"},{"type":"text","text":" property and its "},{"type":"codeVoice","code":"@State"},{"type":"text","text":" property wrapper. Then, replace all accesses to "},{"type":"codeVoice","code":"reminders"},{"type":"text","text":" in "},{"type":"codeVoice","code":"RemindersListView"},{"type":"text","text":" with an access to the "},{"type":"codeVoice","code":"reminders"},{"type":"text","text":" property on "},{"type":"codeVoice","code":"viewModel"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null}]},{"anchor":"Add-a-method-to-the-View-Model-for-adding-new-reminders","title":"Add a method to the View Model for adding new reminders","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"One of the purposes of view models is to encapsulate any code that manipulates the model. So far, you are only using the view model to access the list of "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":"s via the "},{"type":"codeVoice","code":"reminders"},{"type":"text","text":" property. For addings new reminders, you directly access the "},{"type":"codeVoice","code":"reminders"},{"type":"text","text":" property. This works, but violates encapsulation. In the next step, you will introduce a method for addings new "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":"s to the model."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"implementing-mvvm-03-reminderslistviewmodel-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a new method "},{"type":"codeVoice","code":"addReminder"},{"type":"text","text":" to "},{"type":"codeVoice","code":"RemindersListViewModel"},{"type":"text","text":". Calling this method will add the passed "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":" to the "},{"type":"codeVoice","code":"reminders"},{"type":"text","text":" array."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"implementing-mvvm-03-reminderslist-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In "},{"type":"codeVoice","code":"RemindersListView"},{"type":"text","text":", replace the call to "},{"type":"codeVoice","code":"viewModel.reminders.append(reminder)"},{"type":"text","text":" with a call to "},{"type":"codeVoice","code":"viewModel.addReminder(_ reminder:)"}]}],"caption":[],"type":"step","runtimePreview":null,"media":null}]},{"anchor":"Add-a-method-to-the-View-Model-for-toggling-the-completion-state-of-a-reminder","title":"Add a method to the View Model for toggling the completion state of a reminder","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In the next step, you will introduce a method for toggling the completion state of a reminder."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"implementing-mvvm-03-reminderslistviewmodel-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a new method "},{"type":"codeVoice","code":"toggleCompleted"},{"type":"text","text":" to "},{"type":"codeVoice","code":"RemindersListViewModel"},{"type":"text","text":". Calling this method will toggle the "},{"type":"codeVoice","code":"isCompleted"},{"type":"text","text":" state of the reminder."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"implementing-mvvm-04-reminderslist-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In "},{"type":"codeVoice","code":"RemindersListView"},{"type":"text","text":", replace the call to "},{"type":"codeVoice","code":"reminder.isCompleted.toggle()"},{"type":"text","text":" with a call to "},{"type":"codeVoice","code":"viewModel.toggleCompleted(_ reminder:)"}]}],"caption":[],"type":"step","runtimePreview":null,"media":null}]}]},{"action":{"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"isActive":true,"type":"reference","identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View","overridingTitle":"Get started"},"featuredEyebrow":"Tutorial","kind":"callToAction","title":"Extracting the Reminder Row Into a Separate View","abstract":[]}],"identifier":{"url":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM","interfaceLanguage":"swift"},"kind":"project","metadata":{"title":"Implementing Model, View, ViewModel (MVVM)","categoryPathComponent":"MakeItSo","role":"project","category":"MakeItSo"},"hierarchy":{"modules":[{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Building-a-Simple-UI","projects":[{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Create-a-New-Project"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Create-a-Reminder-Model-and-Add-some-Test-Data"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Display-a-List-of-Reminders"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Mark-Reminders-as-isCompleted"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Create-a-Dialog-for-Adding-New-Reminders"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Pass-Data-From-the-Child-View"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Present-the-Add-Reminder-Dialog"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Brush-up-the-UI"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Wrap-Up"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Organise-the-Project-Files"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Create-a-View-Model-and-connect-it-to-the-RemindersListView"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Add-a-method-to-the-View-Model-for-adding-new-reminders"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Add-a-method-to-the-View-Model-for-toggling-the-completion-state-of-a-reminder"}]}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Building-Reusable-UI-Components","projects":[{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View#Title"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Create-a-Styleable-Toggle","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Create-a-Styleable-Toggle#Title"}]}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Connecting-Your-App-to-Firebase","projects":[{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Create-a-New-Firebase-Project"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Register-Your-App-with-Firebase"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Add-a-Firebase-Configuration-File"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Add-Firebase-SDKs-to-Your-App"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Initialize-Firebase-in-Your-App"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Launch-the-App-to-Verify-Setup"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Install-the-Firebase-CLI"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Connect-to-your-Firebase-project-and-enable-the-Emulator-Suite"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Launch-the-Emulator-and-view-the-Emulator-dashboard"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Connect-your-app-to-the-Emulator-Suite"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Use-launch-arguments-to-switch-between-the-Emulator-and-your-Firebase-project"}]}]}],"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo","paths":[["doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo","doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase","doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Building-a-Simple-UI"]]},"references":{"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project#Launch-the-App-to-Verify-Setup":{"role":"pseudoSymbol","title":"Launch the App to Verify Setup","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Launch-the-App-to-Verify-Setup","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project#Launch-the-App-to-Verify-Setup"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project#Add-Firebase-SDKs-to-Your-App":{"role":"pseudoSymbol","title":"Add Firebase SDKs to Your App","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Add-Firebase-SDKs-to-Your-App","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project#Add-Firebase-SDKs-to-Your-App"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Create-a-Styleable-Toggle#Title":{"role":"pseudoSymbol","title":"Title","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Create-a-Styleable-Toggle#Title","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-create-a-styleable-toggle#Title"},"implementing-mvvm-02-reminderslistview-01.swift":{"syntax":"swift","content":["import SwiftUI","","struct RemindersListView: View {","  @State","  private var reminders = Reminder.samples","","  @StateObject","  private var viewModel = RemindersListViewModel()","","  @State","  private var isAddReminderDialogPresented = false","","  private func presentAddReminderView() {","    isAddReminderDialogPresented.toggle()","  }","","  var body: some View {","    List($reminders) { $reminder in","      HStack {","        Image(systemName: reminder.isCompleted","              ? \"largecircle.fill.circle\"","              : \"circle\")","          .imageScale(.large)","          .foregroundColor(.accentColor)","          .onTapGesture {","            reminder.isCompleted.toggle()","          }","        Text(reminder.title)","      }","    }","    .toolbar {","      ToolbarItemGroup(placement: .bottomBar) {","        Button(action: presentAddReminderView) {","          HStack {","            Image(systemName: \"plus.circle.fill\")","            Text(\"New Reminder\")","          }","        }","        Spacer()","      }","    }","    .sheet(isPresented: $isAddReminderDialogPresented) {","      AddReminderView { reminder in","        reminders.append(reminder)","      }","    }","  }","}"],"fileName":"RemindersListView.swift","identifier":"implementing-mvvm-02-reminderslistview-01.swift","type":"file","fileType":"swift","highlights":[{"line":7},{"line":8},{"line":9}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI":{"role":"project","title":"Building a Simple Todo List UI","estimatedTime":"25min","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating s simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui"},"https://firebase.google.com/docs/emulator-suite":{"title":"Firebase Local Emulator Suite","titleInlineContent":[{"type":"text","text":"Firebase Local Emulator Suite"}],"type":"link","identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite","url":"https:\/\/firebase.google.com\/docs\/emulator-suite"},"implementing-mvvm-04-reminderslist-01.swift":{"syntax":"swift","content":["import SwiftUI","","struct RemindersListView: View {","  @StateObject","  private var viewModel = RemindersListViewModel()","","  @State","  private var isAddReminderDialogPresented = false","","  private func presentAddReminderView() {","    isAddReminderDialogPresented.toggle()","  }","","  var body: some View {","    List($viewModel.reminders) { $reminder in","      HStack {","        Image(systemName: reminder.isCompleted","              ? \"largecircle.fill.circle\"","              : \"circle\")","          .imageScale(.large)","          .foregroundColor(.accentColor)","          .onTapGesture {","            viewModel.toggleCompleted(reminder)","          }","        Text(reminder.title)","      }","    }","    .toolbar {","      ToolbarItemGroup(placement: .bottomBar) {","        Button(action: presentAddReminderView) {","          HStack {","            Image(systemName: \"plus.circle.fill\")","            Text(\"New Reminder\")","          }","        }","        Spacer()","      }","    }","    .sheet(isPresented: $isAddReminderDialogPresented) {","      AddReminderView { reminder in","        viewModel.addReminder(reminder)","      }","    }","  }","}"],"fileName":"RemindersListView.swift","identifier":"implementing-mvvm-04-reminderslist-01.swift","type":"file","fileType":"swift","highlights":[{"line":23}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Developing-Locally-with-the-Emulator-Suite":{"role":"project","title":"Developing locally with the Emulator Suite","estimatedTime":"25min","abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite"},{"type":"text","text":" is a set of advanced tools for developers looking to build and test apps locally using Cloud Firestore, Realtime Database, Cloud Storage for Firebase, Authentication, Firebase Hosting, Cloud Functions (beta), Pub\/Sub (beta), and Firebase Extensions (beta). It provides a rich user interface to help you get running and prototyping quickly."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/02-developing-locally-with-the-emulator-suite"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Implementing-MVVM#Add-a-method-to-the-View-Model-for-toggling-the-completion-state-of-a-reminder":{"role":"pseudoSymbol","title":"Add a method to the View Model for toggling the completion state of a reminder","abstract":[{"type":"text","text":"With the basic views for displaying and adding todo items set up, it is time to think about the architecture of the app."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Add-a-method-to-the-View-Model-for-toggling-the-completion-state-of-a-reminder","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-implementing-mvvm#Add-a-method-to-the-View-Model-for-toggling-the-completion-state-of-a-reminder"},"implementing-mvvm-02-reminderslistviewmodel-03.swift":{"syntax":"swift","content":["import Foundation","","class RemindersListViewModel: ObservableObject {","  @Published","  var reminders = Reminder.samples","}"],"fileName":"RemindersListViewModel.swift","identifier":"implementing-mvvm-02-reminderslistviewmodel-03.swift","type":"file","fileType":"swift","highlights":[{"line":4}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Developing-Locally-with-the-Emulator-Suite#Launch-the-Emulator-and-view-the-Emulator-dashboard":{"role":"pseudoSymbol","title":"Launch the Emulator and view the Emulator dashboard","abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite"},{"type":"text","text":" is a set of advanced tools for developers looking to build and test apps locally using Cloud Firestore, Realtime Database, Cloud Storage for Firebase, Authentication, Firebase Hosting, Cloud Functions (beta), Pub\/Sub (beta), and Firebase Extensions (beta). It provides a rich user interface to help you get running and prototyping quickly."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Launch-the-Emulator-and-view-the-Emulator-dashboard","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-developing-locally-with-the-emulator-suite#Launch-the-Emulator-and-view-the-Emulator-dashboard"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Implementing-MVVM#Create-a-View-Model-and-connect-it-to-the-RemindersListView":{"role":"pseudoSymbol","title":"Create a View Model and connect it to the RemindersListView","abstract":[{"type":"text","text":"With the basic views for displaying and adding todo items set up, it is time to think about the architecture of the app."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Create-a-View-Model-and-connect-it-to-the-RemindersListView","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-implementing-mvvm#Create-a-View-Model-and-connect-it-to-the-RemindersListView"},"implementing-mvvm-03-reminderslist-01.swift":{"syntax":"swift","content":["import SwiftUI","","struct RemindersListView: View {","  @StateObject","  private var viewModel = RemindersListViewModel()","","  @State","  private var isAddReminderDialogPresented = false","","  private func presentAddReminderView() {","    isAddReminderDialogPresented.toggle()","  }","","  var body: some View {","    List($viewModel.reminders) { $reminder in","      HStack {","        Image(systemName: reminder.isCompleted","              ? \"largecircle.fill.circle\"","              : \"circle\")","          .imageScale(.large)","          .foregroundColor(.accentColor)","          .onTapGesture {","            reminder.isCompleted.toggle()","          }","        Text(reminder.title)","      }","    }","    .toolbar {","      ToolbarItemGroup(placement: .bottomBar) {","        Button(action: presentAddReminderView) {","          HStack {","            Image(systemName: \"plus.circle.fill\")","            Text(\"New Reminder\")","          }","        }","        Spacer()","      }","    }","    .sheet(isPresented: $isAddReminderDialogPresented) {","      AddReminderView { reminder in","        viewModel.addReminder(reminder)","      }","    }","  }","}"],"fileName":"RemindersListView.swift","identifier":"implementing-mvvm-03-reminderslist-01.swift","type":"file","fileType":"swift","highlights":[{"line":41}]},"implementing-mvvm-02-reminderslistviewmodel-01.swift":{"syntax":"swift","content":["import Foundation","","class RemindersListViewModel: ObservableObject {","}"],"fileName":"RemindersListViewModel.swift","identifier":"implementing-mvvm-02-reminderslistviewmodel-01.swift","type":"file","fileType":"swift","highlights":[]},"building-todo-ui-intro.png":{"alt":"","type":"image","identifier":"building-todo-ui-intro.png","variants":[{"url":"\/images\/building-todo-ui-intro@2x.png","traits":["2x","light"]}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Create-a-Styleable-Toggle":{"role":"project","title":"Creating a Styleable Toggle","estimatedTime":"25min","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Create-a-Styleable-Toggle","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/02-create-a-styleable-toggle"},"02-implementing-mvvm.zip":{"checksum":"c50186c793885856aa47a2ce77ebac95bad62c080ecd65229b5ebf88e976c152ddb1119417440bdd85d245514493a6af2a36c59a3dfa7c90d2a172ecaa8c4336","type":"download","identifier":"02-implementing-mvvm.zip","url":"\/downloads\/02-implementing-mvvm.zip"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Developing-Locally-with-the-Emulator-Suite#Connect-your-app-to-the-Emulator-Suite":{"role":"pseudoSymbol","title":"Connect your app to the Emulator Suite","abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite"},{"type":"text","text":" is a set of advanced tools for developers looking to build and test apps locally using Cloud Firestore, Realtime Database, Cloud Storage for Firebase, Authentication, Firebase Hosting, Cloud Functions (beta), Pub\/Sub (beta), and Firebase Extensions (beta). It provides a rich user interface to help you get running and prototyping quickly."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Connect-your-app-to-the-Emulator-Suite","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-developing-locally-with-the-emulator-suite#Connect-your-app-to-the-Emulator-Suite"},"implementing-mvvm-03-reminderslistviewmodel-01.swift":{"syntax":"swift","content":["import Foundation","","class RemindersListViewModel: ObservableObject {","  @Published","  var reminders = Reminder.samples","","  func addReminder(_ reminder: Reminder) {","    reminders.append(reminder)","  }","}"],"fileName":"RemindersListViewModel.swift","identifier":"implementing-mvvm-03-reminderslistviewmodel-01.swift","type":"file","fileType":"swift","highlights":[{"line":7},{"line":8},{"line":9}]},"doc://com.example.MakeItSo/tutorials/MakeItSo":{"role":"overview","title":"SwiftUI and Firebase","abstract":[{"type":"text","text":"Learn how to use Firebase in SwiftUI apps by building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a replica of Apple’s Reminders app."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo","kind":"overview","type":"topic","url":"\/tutorials\/makeitso"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project#Register-Your-App-with-Firebase":{"role":"pseudoSymbol","title":"Register Your App with Firebase","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Register-Your-App-with-Firebase","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project#Register-Your-App-with-Firebase"},"doc://com.example.MakeItSo/tutorials/MakeItSo/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase/Connecting-Your-App-to-Firebase":{"role":"article","title":"Connecting Your App to Firebase","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Connecting-Your-App-to-Firebase","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/creating-a-simple-todo-list-app-with-swiftui-and-firebase\/connecting-your-app-to-firebase"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project":{"role":"project","title":"Adding Firebase to Your Project","estimatedTime":"25min","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Implementing-MVVM#Add-a-method-to-the-View-Model-for-adding-new-reminders":{"role":"pseudoSymbol","title":"Add a method to the View Model for adding new reminders","abstract":[{"type":"text","text":"With the basic views for displaying and adding todo items set up, it is time to think about the architecture of the app."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Add-a-method-to-the-View-Model-for-adding-new-reminders","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-implementing-mvvm#Add-a-method-to-the-View-Model-for-adding-new-reminders"},"Xcode 14":{"title":"Xcode 14","type":"xcodeRequirement","identifier":"Xcode 14","url":"https:\/\/xcodereleases.com\/"},"mvvm-01-refactor-rename-reminderslistview.png":{"alt":"","type":"image","identifier":"mvvm-01-refactor-rename-reminderslistview.png","variants":[{"url":"\/images\/mvvm-01-refactor-rename-reminderslistview@2x.png","traits":["2x","light"]},{"url":"\/images\/mvvm-01-refactor-rename-reminderslistview~dark@2x.png","traits":["2x","dark"]}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Wrap-Up":{"role":"pseudoSymbol","title":"Wrap Up","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating s simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Wrap-Up","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Wrap-Up"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Mark-Reminders-as-isCompleted":{"role":"pseudoSymbol","title":"Mark Reminders as isCompleted","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating s simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Mark-Reminders-as-isCompleted","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Mark-Reminders-as-isCompleted"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project#Add-a-Firebase-Configuration-File":{"role":"pseudoSymbol","title":"Add a Firebase Configuration File","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Add-a-Firebase-Configuration-File","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project#Add-a-Firebase-Configuration-File"},"mvvm-02-move-files-reminder.png":{"alt":"","type":"image","identifier":"mvvm-02-move-files-reminder.png","variants":[{"url":"\/images\/mvvm-02-move-files-reminder@2x.png","traits":["2x","light"]},{"url":"\/images\/mvvm-02-move-files-reminder~dark@2x.png","traits":["2x","dark"]}]},"implementing-mvvm-02-reminderslistviewmodel-02.swift":{"syntax":"swift","content":["import Foundation","","class RemindersListViewModel: ObservableObject {","  var reminders = Reminder.samples","}"],"fileName":"RemindersListViewModel.swift","identifier":"implementing-mvvm-02-reminderslistviewmodel-02.swift","type":"file","fileType":"swift","highlights":[{"line":4}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Pass-Data-From-the-Child-View":{"role":"pseudoSymbol","title":"Pass Data From the Child View","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating s simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Pass-Data-From-the-Child-View","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Pass-Data-From-the-Child-View"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Present-the-Add-Reminder-Dialog":{"role":"pseudoSymbol","title":"Present the Add Reminder Dialog","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating s simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Present-the-Add-Reminder-Dialog","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Present-the-Add-Reminder-Dialog"},"mvvm-01-new-group.png":{"alt":"","type":"image","identifier":"mvvm-01-new-group.png","variants":[{"url":"\/images\/mvvm-01-new-group@2x.png","traits":["2x","light"]},{"url":"\/images\/mvvm-01-new-group~dark@2x.png","traits":["2x","dark"]}]},"mvvm-01-refactor-rename.png":{"alt":"","type":"image","identifier":"mvvm-01-refactor-rename.png","variants":[{"url":"\/images\/mvvm-01-refactor-rename@2x.png","traits":["2x","light"]},{"url":"\/images\/mvvm-01-refactor-rename~dark@2x.png","traits":["2x","dark"]}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Implementing-MVVM":{"role":"project","title":"Implementing Model, View, ViewModel (MVVM)","estimatedTime":"20min","abstract":[{"type":"text","text":"With the basic views for displaying and adding todo items set up, it is time to think about the architecture of the app."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/02-implementing-mvvm"},"doc://com.example.MakeItSo/tutorials/MakeItSo/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase/Building-Reusable-UI-Components":{"role":"article","title":"Building Reusable UI Components","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Building-Reusable-UI-Components","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/creating-a-simple-todo-list-app-with-swiftui-and-firebase\/building-reusable-ui-components"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project#Initialize-Firebase-in-Your-App":{"role":"pseudoSymbol","title":"Initialize Firebase in Your App","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Initialize-Firebase-in-Your-App","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project#Initialize-Firebase-in-Your-App"},"mvvm-01-all-groups.png":{"alt":"","type":"image","identifier":"mvvm-01-all-groups.png","variants":[{"url":"\/images\/mvvm-01-all-groups@2x.png","traits":["2x","light"]},{"url":"\/images\/mvvm-01-all-groups~dark@2x.png","traits":["2x","dark"]}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Display-a-List-of-Reminders":{"role":"pseudoSymbol","title":"Display a List of Reminders","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating s simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Display-a-List-of-Reminders","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Display-a-List-of-Reminders"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Create-a-Dialog-for-Adding-New-Reminders":{"role":"pseudoSymbol","title":"Create a Dialog for Adding New Reminders","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating s simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Create-a-Dialog-for-Adding-New-Reminders","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Create-a-Dialog-for-Adding-New-Reminders"},"implementing-mvvm-02-reminderslistview-02.swift":{"syntax":"swift","content":["import SwiftUI","","struct RemindersListView: View {","\/\/  @State","\/\/  private var reminders = Reminder.samples","","  @StateObject","  private var viewModel = RemindersListViewModel()","","  @State","  private var isAddReminderDialogPresented = false","","  private func presentAddReminderView() {","    isAddReminderDialogPresented.toggle()","  }","","  var body: some View {","    List($viewModel.reminders) { $reminder in","      HStack {","        Image(systemName: reminder.isCompleted","              ? \"largecircle.fill.circle\"","              : \"circle\")","          .imageScale(.large)","          .foregroundColor(.accentColor)","          .onTapGesture {","            reminder.isCompleted.toggle()","          }","        Text(reminder.title)","      }","    }","    .toolbar {","      ToolbarItemGroup(placement: .bottomBar) {","        Button(action: presentAddReminderView) {","          HStack {","            Image(systemName: \"plus.circle.fill\")","            Text(\"New Reminder\")","          }","        }","        Spacer()","      }","    }","    .sheet(isPresented: $isAddReminderDialogPresented) {","      AddReminderView { reminder in","        viewModel.reminders.append(reminder)","      }","    }","  }","}"],"fileName":"RemindersListView.swift","identifier":"implementing-mvvm-02-reminderslistview-02.swift","type":"file","fileType":"swift","highlights":[{"line":4},{"line":5},{"line":18},{"line":44}]},"mvvm-01-group-mvvm.png":{"alt":"","type":"image","identifier":"mvvm-01-group-mvvm.png","variants":[{"url":"\/images\/mvvm-01-group-mvvm@2x.png","traits":["2x","light"]},{"url":"\/images\/mvvm-01-group-mvvm~dark@2x.png","traits":["2x","dark"]}]},"mvvm-01-group-reminders.png":{"alt":"","type":"image","identifier":"mvvm-01-group-reminders.png","variants":[{"url":"\/images\/mvvm-01-group-reminders@2x.png","traits":["2x","light"]},{"url":"\/images\/mvvm-01-group-reminders~dark@2x.png","traits":["2x","dark"]}]},"mvvm-02-move-files.png":{"alt":"","type":"image","identifier":"mvvm-02-move-files.png","variants":[{"url":"\/images\/mvvm-02-move-files@2x.png","traits":["2x","light"]},{"url":"\/images\/mvvm-02-move-files~dark@2x.png","traits":["2x","dark"]}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Brush-up-the-UI":{"role":"pseudoSymbol","title":"Brush up the UI","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating s simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Brush-up-the-UI","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Brush-up-the-UI"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Developing-Locally-with-the-Emulator-Suite#Connect-to-your-Firebase-project-and-enable-the-Emulator-Suite":{"role":"pseudoSymbol","title":"Connect to your Firebase project and enable the Emulator Suite","abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite"},{"type":"text","text":" is a set of advanced tools for developers looking to build and test apps locally using Cloud Firestore, Realtime Database, Cloud Storage for Firebase, Authentication, Firebase Hosting, Cloud Functions (beta), Pub\/Sub (beta), and Firebase Extensions (beta). It provides a rich user interface to help you get running and prototyping quickly."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Connect-to-your-Firebase-project-and-enable-the-Emulator-Suite","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-developing-locally-with-the-emulator-suite#Connect-to-your-Firebase-project-and-enable-the-Emulator-Suite"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project#Create-a-New-Firebase-Project":{"role":"pseudoSymbol","title":"Create a New Firebase Project ","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Create-a-New-Firebase-Project","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project#Create-a-New-Firebase-Project"},"doc://com.example.MakeItSo/tutorials/MakeItSo/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase/Building-a-Simple-UI":{"role":"article","title":"Building a Simple UI","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Building-a-Simple-UI","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/creating-a-simple-todo-list-app-with-swiftui-and-firebase\/building-a-simple-ui"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Implementing-MVVM#Organise-the-Project-Files":{"role":"pseudoSymbol","title":"Organise the Project Files","abstract":[{"type":"text","text":"With the basic views for displaying and adding todo items set up, it is time to think about the architecture of the app."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Organise-the-Project-Files","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-implementing-mvvm#Organise-the-Project-Files"},"mvvm-01-new-file.png":{"alt":"","type":"image","identifier":"mvvm-01-new-file.png","variants":[{"url":"\/images\/mvvm-01-new-file@2x.png","traits":["2x","light"]},{"url":"\/images\/mvvm-01-new-file~dark@2x.png","traits":["2x","dark"]}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Create-a-Reminder-Model-and-Add-some-Test-Data":{"role":"pseudoSymbol","title":"Create a Reminder Model and Add some Test Data","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating s simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Create-a-Reminder-Model-and-Add-some-Test-Data","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Create-a-Reminder-Model-and-Add-some-Test-Data"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Developing-Locally-with-the-Emulator-Suite#Use-launch-arguments-to-switch-between-the-Emulator-and-your-Firebase-project":{"role":"pseudoSymbol","title":"Use launch arguments to switch between the Emulator and your Firebase project","abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite"},{"type":"text","text":" is a set of advanced tools for developers looking to build and test apps locally using Cloud Firestore, Realtime Database, Cloud Storage for Firebase, Authentication, Firebase Hosting, Cloud Functions (beta), Pub\/Sub (beta), and Firebase Extensions (beta). It provides a rich user interface to help you get running and prototyping quickly."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Use-launch-arguments-to-switch-between-the-Emulator-and-your-Firebase-project","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-developing-locally-with-the-emulator-suite#Use-launch-arguments-to-switch-between-the-Emulator-and-your-Firebase-project"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Create-a-New-Project":{"role":"pseudoSymbol","title":"Create a New Project","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating s simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Create-a-New-Project","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Create-a-New-Project"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Extract-Row-View":{"role":"project","title":"Extracting the Reminder Row Into a Separate View","estimatedTime":"15min","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/01-extract-row-view"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Extract-Row-View#Title":{"role":"pseudoSymbol","title":"Title","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View#Title","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-extract-row-view#Title"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Developing-Locally-with-the-Emulator-Suite#Install-the-Firebase-CLI":{"role":"pseudoSymbol","title":"Install the Firebase CLI","abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite"},{"type":"text","text":" is a set of advanced tools for developers looking to build and test apps locally using Cloud Firestore, Realtime Database, Cloud Storage for Firebase, Authentication, Firebase Hosting, Cloud Functions (beta), Pub\/Sub (beta), and Firebase Extensions (beta). It provides a rich user interface to help you get running and prototyping quickly."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Install-the-Firebase-CLI","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-developing-locally-with-the-emulator-suite#Install-the-Firebase-CLI"}}}
{"variants":[{"paths":["\/tutorials\/makeitso\/01-dependency-injection-with-factory"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Even though "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MakeItSo"}]},{"type":"text","text":" is a relatively simple app, it consists of quite a few components that need to interact with each other: models, views, view models, repositories, and different backend services like Firebase."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"So far, you’ve connected these components by hard-coding their dependencies. But as you add more components to the app, you will notice that this approach doesn’t scale."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this chapter, you will use a Dependency Injection SDK called "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Factory"}]},{"type":"text","text":" to manage the dependencies in "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MakeItSo"}]},{"type":"text","text":". This is in preparation for the next chapter, in which you will implement user authentication, which will require you to set up more complex dependencies between the components in your app."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Download the project files to begin building this project, and follow the steps below."}]}],"estimatedTimeInMinutes":20,"title":"Dependency Injection with Factory","image":"hero-dependency-injection-with-factory.png","xcodeRequirement":"Xcode 14","chapter":"Dependency Injection","kind":"hero","backgroundImage":"hero-dependency-injection-with-factory.png","projectFiles":"01-dependency-injection-with-factory.zip"},{"kind":"tasks","tasks":[{"anchor":"Add-the-Factory-SDK-to-your-project","title":"Add the Factory SDK to your project","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use Swift Package Manager to install the Factory SDK."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Select the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MakeItSo"}]},{"type":"text","text":" root node (1) in Xcode’s "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Project Navigator"}]},{"type":"text","text":", then select "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MakeItSo"}]},{"type":"text","text":" in the project editor (2). Select the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Package Dependencies"}]},{"type":"text","text":" tab (3)."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"01-dependency-injection-with-factory-01-add-factory-01.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Click on the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"+"}]},{"type":"text","text":" button to open the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Add package"}]},{"type":"text","text":" dialog"}]}],"caption":[],"type":"step","runtimePreview":null,"media":"01-dependency-injection-with-factory-01-add-factory-02.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Paste the package URL for the Factory package into the search field: "},{"type":"codeVoice","code":"https:\/\/github.com\/hmlongco\/Factory"},{"type":"text","text":"."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This is also the URL of the GitHub repository of the project."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":"01-dependency-injection-with-factory-01-add-factory-03.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Make sure to select "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Up to Next Major Version"}]},{"type":"text","text":", and then enter "},{"type":"codeVoice","code":"2.1.0"},{"type":"text","text":" into the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"from version"}]},{"type":"text","text":" field."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Click on "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Add Package"}]},{"type":"text","text":"."}]}],"type":"step","runtimePreview":null,"media":"01-dependency-injection-with-factory-01-add-factory-04.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Xcode will now download Factory and its dependencies. Once it is finished, select the following Package Products: Factory."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Then, click on Add Package."}]}],"type":"step","runtimePreview":null,"media":"01-dependency-injection-with-factory-01-add-factory-05.png"}]},{"anchor":"Make-Firebase-available-via-Dependency-Injection","title":"Make Firebase available via Dependency Injection","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory is a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Container-based Dependency Injection"}]},{"type":"text","text":" system. In a first step, you will register Firestore with Factory’s shared container. This will allow you to inject an instance of Firestore into any other component in "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MakeItSo"}]},{"type":"text","text":" that requires Firestore."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Select the "},{"type":"codeVoice","code":"Features"},{"type":"text","text":" folder in your project, and create a new folder named "},{"type":"codeVoice","code":"Firebase"},{"type":"text","text":". Inside it, create another new folder named "},{"type":"codeVoice","code":"Services"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"01-dependency-injection-with-factory-02-register-firebase-01.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new Swift file and name it "},{"type":"codeVoice","code":"Firebase+Injection.swift"},{"type":"text","text":" inside the new "},{"type":"codeVoice","code":"Firebase\/Services"},{"type":"text","text":" folder."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s a common practice to use a "},{"type":"codeVoice","code":"+"},{"type":"text","text":" sign to indicate files that contain Swift extensions for existing classes or structs."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":"01-dependency-injection-with-factory-02-register-firebase-02.png"},{"code":"01-dependency-injection-with-factory-02-register-firebase-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Import "},{"type":"codeVoice","code":"Factory"},{"type":"text","text":", "},{"type":"codeVoice","code":"FirebaseAuth"},{"type":"text","text":", "},{"type":"codeVoice","code":"FirebaseFirestore"},{"type":"text","text":", and "},{"type":"codeVoice","code":"FirebaseFirestoreSwift"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-dependency-injection-with-factory-02-register-firebase-02.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a Swift extension on "},{"type":"codeVoice","code":"Container"},{"type":"text","text":"."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"Container"},{"type":"text","text":" is a class provided by Factory that helps manage object creation, object resolution, and object lifecycles."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the next few steps, you will take the code you previously wrote for setting up Firebase and convert it into dependency-injection compatible code. First, you will define a property that tells your app whether it should use the Firebase Emulator suite."}]},{"code":"01-dependency-injection-with-factory-02-register-firebase-03.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Inside the extension on "},{"type":"codeVoice","code":"Container"},{"type":"text","text":", create a new property named "},{"type":"codeVoice","code":"useEmulator"},{"type":"text","text":"."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This property will return a "},{"type":"codeVoice","code":"Factory"},{"type":"text","text":" that produces a "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" value that will contain the value of the "},{"type":"codeVoice","code":"useEmulator"},{"type":"text","text":" launch parameter."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"01-dependency-injection-with-factory-02-register-firebase-04.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Instantiate a "},{"type":"codeVoice","code":"Factory"},{"type":"text","text":", passing in a reference to the "},{"type":"codeVoice","code":"Container"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-dependency-injection-with-factory-02-register-firebase-05.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Since you only need exactly "},{"type":"emphasis","inlineContent":[{"type":"text","text":"one"}]},{"type":"text","text":" instance of this property in your app, mark the factory as "},{"type":"codeVoice","code":"singleton"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-dependency-injection-with-factory-02-register-firebase-06.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Using the same code you used in "},{"type":"codeVoice","code":"MakeItSoApp"},{"type":"text","text":", read the launch parameter "},{"type":"codeVoice","code":"useEmulator"},{"type":"text","text":". Write a log output indicating whether or not the app is using the Emulator."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Nice - you just wrote your first dependency registration! Next, you will write a dependency registration for Firestore."}]},{"code":"01-dependency-injection-with-factory-02-register-firebase-07.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Inside the extension on "},{"type":"codeVoice","code":"Container"},{"type":"text","text":", create a new property named "},{"type":"codeVoice","code":"firestore"},{"type":"text","text":"."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This property will return a "},{"type":"codeVoice","code":"Factory"},{"type":"text","text":" that produces an instance of "},{"type":"codeVoice","code":"Firestore"},{"type":"text","text":"."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"01-dependency-injection-with-factory-02-register-firebase-08.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Instantiate a "},{"type":"codeVoice","code":"Factory"},{"type":"text","text":", passing in a reference to the "},{"type":"codeVoice","code":"Container"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-dependency-injection-with-factory-02-register-firebase-09.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Again, since you only need exactly "},{"type":"emphasis","inlineContent":[{"type":"text","text":"one"}]},{"type":"text","text":" instance of this property in your app, mark the factory as "},{"type":"codeVoice","code":"singleton"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-dependency-injection-with-factory-02-register-firebase-10.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"useEmulator"},{"type":"text","text":" property you just created to determine if the app should use the Emulator or not."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-dependency-injection-with-factory-02-register-firebase-11.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Using the same code as in "},{"type":"codeVoice","code":"MakeItSoApp"},{"type":"text","text":", configure the settings for Firestore. This code will connect your app to the Firestore Emulator."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-dependency-injection-with-factory-02-register-firebase-12.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the app should "},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" connect to the Emulator, you don’t need to configure anything."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-dependency-injection-with-factory-02-register-firebase-13.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Return an instance of Firestore."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null}]},{"anchor":"Use-Dependency-Injection-to-inject-Firebase-into-your-Repository","title":"Use Dependency Injection to inject Firebase into your Repository","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In this step, you will replace all hard-coded dependencies to Firestore, and inject the singleton instance you just registered."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"01-dependency-injection-with-factory-03-inject-firestore-RemindersRepository-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Navigate to "},{"type":"codeVoice","code":"ReminderFactory.swift"},{"type":"text","text":" and import "},{"type":"codeVoice","code":"Factory"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-dependency-injection-with-factory-03-inject-firestore-RemindersRepository-02.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use Factory’s "},{"type":"codeVoice","code":"@Injected"},{"type":"text","text":" property wrapper to inject an instance of Firestore."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-dependency-injection-with-factory-03-inject-firestore-RemindersRepository-03.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can now replace all occurrences of "},{"type":"codeVoice","code":"Firestore.firestore"},{"type":"text","text":" with "},{"type":"codeVoice","code":"firestore"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null}]},{"anchor":"Inject-RemindersRepository-into-RemindersListViewModel","title":"Inject RemindersRepository into RemindersListViewModel","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Instead of hard-coding a reference to "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":", put your newly gained knowledge of Dependency Injection to use. In this section, you will first register "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":" for Dependency Injection (DI), and then inject it into "},{"type":"codeVoice","code":"RemindersListViewModel"},{"type":"text","text":"."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"type":"paragraph","inlineContent":[{"type":"text","text":"First, set up the container and register a factory for "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":"."}]},{"code":"01-dependency-injection-with-factory-04-inject-repository-Repositories+Injection-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Inside the "},{"type":"codeVoice","code":"Features\/Reminders\/Repositories"},{"type":"text","text":" folder, create a new Swift file and name it "},{"type":"codeVoice","code":"Repositories+Injection.swift"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-dependency-injection-with-factory-04-inject-repository-Repositories+Injection-02.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Import "},{"type":"codeVoice","code":"Factory"},{"type":"text","text":" and create an extension on "},{"type":"codeVoice","code":"Container"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-dependency-injection-with-factory-04-inject-repository-Repositories+Injection-03.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new property named "},{"type":"codeVoice","code":"remindersRepository"},{"type":"text","text":". This will return an instance of "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-dependency-injection-with-factory-04-inject-repository-Repositories+Injection-04.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Set up the factory, and mark it as a "},{"type":"codeVoice","code":"singleton"},{"type":"text","text":", as you only need one single intance of the repository in your app."}]}],"caption":[{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use "},{"type":"codeVoice","code":"self { }"},{"type":"text","text":" as a shortcut for "},{"type":"codeVoice","code":"Factory(self) { }"},{"type":"text","text":"."}]}],"type":"aside","name":"Tip"}],"type":"step","runtimePreview":null,"media":null},{"code":"01-dependency-injection-with-factory-04-inject-repository-Repositories+Injection-05.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Instantiate the "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, you can inject an instance of "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":" into your view model."}]},{"code":"01-dependency-injection-with-factory-04-inject-repository-RemindersListViewModel-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Navigate to "},{"type":"codeVoice","code":"ReminderListViewModel.swift"},{"type":"text","text":", and import "},{"type":"codeVoice","code":"Factory"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-dependency-injection-with-factory-04-inject-repository-RemindersListViewModel-02.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Annotate the "},{"type":"codeVoice","code":"remindersRepository"},{"type":"text","text":" property with the "},{"type":"codeVoice","code":"@Injected"},{"type":"text","text":" property wrapper to inject the singleton instance of "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":" you just set up."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Make sure to remove the initialisation part of the "},{"type":"codeVoice","code":"reminderRepository"},{"type":"text","text":" property."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null}]},{"anchor":"Wrap-up","title":"Wrap-up","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"As a final step, you will do some clean-up before verifying the app still works."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"01-dependency-injection-with-factory-05-inject-repository-MakeItSoApp-00.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Navigate to "},{"type":"codeVoice","code":"MakeItSoApp.swift"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-dependency-injection-with-factory-05-inject-repository-MakeItSoApp-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Remove the entire code block you previously used for configuring Firebase."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The code is uncommented in this tutorial, as the current version of DocC doesn’t support highlighting removed lines yet. Feel free to remove the code completely in your app."}]}],"type":"aside","name":"Note"},{"style":"warning","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Make sure to keep the line "},{"type":"codeVoice","code":"FirebaseApp.configure()"},{"type":"text","text":" in place!"}]}],"type":"aside","name":"Warning"}],"type":"step","runtimePreview":null,"media":null},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now is a good time to run the app and verify it still works as expected."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null}]}]},{"action":{"overridingTitleInlineContent":[{"type":"text","text":"Read article"}],"isActive":true,"type":"reference","identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/00-Intro-to-Firebase-Authentication","overridingTitle":"Read article"},"featuredEyebrow":"Article","kind":"callToAction","title":"Firebase Authenticatioon","abstract":[{"type":"text","text":"Firebase Authentication provides backend services, easy-to-use SDKs, and ready-made UI libraries to authenticate users to your app. It supports authentication using passwords, phone numbers, popular federated identity providers like Google, Facebook and Twitter, and more."}]}],"identifier":{"url":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory","interfaceLanguage":"swift"},"kind":"project","metadata":{"title":"Dependency Injection with Factory","categoryPathComponent":"MakeItSo","role":"project","category":"MakeItSo"},"hierarchy":{"modules":[{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Building-a-Simple-UI","projects":[{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Create-a-New-Project"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Create-a-Reminder-Model-and-Add-some-Test-Data"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Display-a-List-of-Reminders"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Mark-Reminders-as-completed"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Create-a-Dialog-for-Adding-New-Reminders"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Pass-Data-From-the-Child-View"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Present-the-Add-Reminder-Dialog"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Brush-up-the-UI"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Wrap-Up"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Organise-the-Project-Files"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Create-a-View-Model-and-connect-it-to-the-RemindersListView"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Add-a-method-to-the-View-Model-for-adding-new-reminders"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Add-a-method-to-the-View-Model-for-toggling-the-completion-state-of-a-reminder"}]}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Building-Reusable-UI-Components","projects":[{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View#Extract-the-view"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View#Implement-parentchild-communiction"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View#Move-the-new-view-into-its-own-file"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View#Make-the-preview-provider-interactive"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View#Customise-the-preview"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Create-a-Styleable-Toggle","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Create-a-Styleable-Toggle#Create-a-custom-toggle-style"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Create-a-Styleable-Toggle#Update-the-preview-provider"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Create-a-Styleable-Toggle#Use-the-new-style-in-your-app"}]}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Connecting-Your-App-to-Firebase","projects":[{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Create-a-New-Firebase-Project"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Register-Your-App-with-Firebase"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Add-a-Firebase-Configuration-File"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Add-Firebase-SDKs-to-Your-App"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Initialize-Firebase-in-Your-App"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Launch-the-App-to-Verify-Setup"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Install-the-Firebase-CLI"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Connect-to-your-Firebase-project-and-enable-the-Emulator-Suite"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Launch-the-Emulator-and-view-the-Emulator-dashboard"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Connect-your-app-to-the-Emulator-Suite"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Use-launch-arguments-to-switch-between-the-Emulator-and-your-Firebase-project"}]}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Storing-Data-in-the-Cloud","projects":[{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Intro-to-Cloud-Firestore","sections":[]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Implement-a-repository-for-managing-reminders"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Implement-a-method-for-adding-new-reminders-to-the-repository"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Conform-Reminder-to-Codable"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Connect-the-view-model-to-the-repository"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Wrap-up"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Implement-a-snapshot-listener"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Manage-the-lifecycle-of-the-snapshot-listener"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Connect-the-view-model"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Run-the-app-to-experience-real-time-sync"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Clean-up"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/04-Updating-Data-in-Cloud-Firestore","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/04-Updating-Data-in-Cloud-Firestore#Mark-reminders-as-completed"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/04-Updating-Data-in-Cloud-Firestore#Edit-reminders"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/05-Deleting-Data-from-Cloud-Firestore","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/05-Deleting-Data-from-Cloud-Firestore#Implement-a-method-for-removing-a-single-reminder-from-the-repository"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/05-Deleting-Data-from-Cloud-Firestore#Add-a-method-for-deleting-reminders-to-the-view-model"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/05-Deleting-Data-from-Cloud-Firestore#Implement-a-swipe-action-for-deleteing-reminders-from-the-list-view"}]}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Dependency-Injection","projects":[{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Add-the-Factory-SDK-to-your-project"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Make-Firebase-available-via-Dependency-Injection"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Use-Dependency-Injection-to-inject-Firebase-into-your-Repository"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Inject-RemindersRepository-into-RemindersListViewModel"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Wrap-up"}]}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Authenticating-Users","projects":[{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/00-Intro-to-Firebase-Authentication","sections":[]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Download-the-project-files"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Implement-an-AuthenticationService"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Register-AuthenticationService-with-the-Dependency-Injection-container"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Inject-AuthenticationService-into-its-dependants"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Add-a-userId-property-to-the-Reminder-struct"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Update-the-RemindersRepository-to-operate-only-on-the-users-data"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Take-the-app-for-a-spin-and-experience-its-multi-user-capabilities"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Connect-the-app-to-your-Apple-developer-account"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Enable-the-Sign-in-with-Apple-capability-for-your-app"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Implement-Sign-in-with-Apple"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Sign-in-to-Firebase-and-create-a-new-user-account"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Connect-the-UI"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Run-the-app"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Account-Linking","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Account-Linking#Whats-the-problem"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Account-Linking#Implement-Account-Linking"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Account-Linking#Run-the-app"}]}]}],"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo","paths":[["doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo","doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase","doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Dependency-Injection"]]},"references":{"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project#Add-Firebase-SDKs-to-Your-App":{"role":"pseudoSymbol","title":"Add Firebase SDKs to Your App","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Add-Firebase-SDKs-to-Your-App","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project#Add-Firebase-SDKs-to-Your-App"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Present-the-Add-Reminder-Dialog":{"role":"pseudoSymbol","title":"Present the Add Reminder Dialog","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Present-the-Add-Reminder-Dialog","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Present-the-Add-Reminder-Dialog"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Storing-Data-in-Cloud-Firestore#Conform-Reminder-to-Codable":{"role":"pseudoSymbol","title":"Conform Reminder to Codable","abstract":[{"type":"text","text":"With the UI of the application in place, and Firebase set up for local development, it is now time to store data in the cloud."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Conform-Reminder-to-Codable","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-storing-data-in-cloud-firestore#Conform-Reminder-to-Codable"},"doc://com.example.MakeItSo/tutorials/MakeItSo":{"role":"overview","title":"SwiftUI and Firebase","abstract":[{"type":"text","text":"Learn how to use Firebase in SwiftUI apps by building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a replica of Apple’s Reminders app."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo","kind":"overview","type":"topic","url":"\/tutorials\/makeitso"},"doc://com.example.MakeItSo/tutorials/MakeItSo/04-Updating-Data-in-Cloud-Firestore":{"role":"project","title":"Updating data in Cloud Firestore","estimatedTime":"35min","abstract":[{"type":"text","text":"So far, the app you’re building can help you add an keep track of your todos, but you cannot mark them as completed."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/04-Updating-Data-in-Cloud-Firestore","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/04-updating-data-in-cloud-firestore"},"01-dependency-injection-with-factory-02-register-firebase-11.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","import FirebaseFirestore","import FirebaseFirestoreSwift","","extension Container {","","  \/\/\/ Determines whether to use the Firebase Local Emulator Suite.","  \/\/\/ To use the local emulator, go to the active scheme, and add `-useEmulator YES`","  \/\/\/ to the _Arguments Passed On Launch_ section.","  public var useEmulator: Factory<Bool> {","    Factory(self) {","      let value =  UserDefaults.standard.bool(forKey: \"useEmulator\")","      print(\"Using the emulator: \\(value == true ? \"YES\" : \"NO\")\")","      return value","    }.singleton","  }","","  public var firestore: Factory<Firestore> {","    Factory(self) {","      var environment = \"\"","      if Container.shared.useEmulator() {","        let settings = Firestore.firestore().settings","        settings.host = \"localhost:8080\"","        settings.cacheSettings = MemoryCacheSettings()","        settings.isSSLEnabled = false","        environment = \"to use the local emulator on \\(settings.host)\"","","        Firestore.firestore().settings = settings","        Auth.auth().useEmulator(withHost: \"localhost\", port: 9099)","      }","      else {","      }","    }.singleton","  }","}"],"fileName":"Firebase+Injection.swift","identifier":"01-dependency-injection-with-factory-02-register-firebase-11.swift","type":"file","fileType":"swift","highlights":[{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Dependency-Injection-with-Factory#Add-the-Factory-SDK-to-your-project":{"role":"pseudoSymbol","title":"Add the Factory SDK to your project","abstract":[{"type":"text","text":"Even though "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MakeItSo"}]},{"type":"text","text":" is a relatively simple app, it consists of quite a few components that need to interact with each other: models, views, view models, repositories, and different backend services like Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Add-the-Factory-SDK-to-your-project","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-dependency-injection-with-factory#Add-the-Factory-SDK-to-your-project"},"doc://com.example.MakeItSo/tutorials/MakeItSo/04-Updating-Data-in-Cloud-Firestore#Mark-reminders-as-completed":{"role":"pseudoSymbol","title":"Mark reminders as completed","abstract":[{"type":"text","text":"So far, the app you’re building can help you add an keep track of your todos, but you cannot mark them as completed."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/04-Updating-Data-in-Cloud-Firestore#Mark-reminders-as-completed","kind":"section","type":"section","url":"\/tutorials\/makeitso\/04-updating-data-in-cloud-firestore#Mark-reminders-as-completed"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Extract-Row-View#Move-the-new-view-into-its-own-file":{"role":"pseudoSymbol","title":"Move the new view into its own file","abstract":[{"type":"text","text":"SwiftUI’s syntax for describing UIs in a declarative way is quite efficient, and allows you to describe rather complex UIs with relatively little code."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View#Move-the-new-view-into-its-own-file","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-extract-row-view#Move-the-new-view-into-its-own-file"},"01-dependency-injection-with-factory-02-register-firebase-07.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","import FirebaseFirestore","import FirebaseFirestoreSwift","","extension Container {","","  \/\/\/ Determines whether to use the Firebase Local Emulator Suite.","  \/\/\/ To use the local emulator, go to the active scheme, and add `-useEmulator YES`","  \/\/\/ to the _Arguments Passed On Launch_ section.","  public var useEmulator: Factory<Bool> {","    Factory(self) {","      let value =  UserDefaults.standard.bool(forKey: \"useEmulator\")","      print(\"Using the emulator: \\(value == true ? \"YES\" : \"NO\")\")","      return value","    }.singleton","  }","","  public var firestore: Factory<Firestore> {","  }","}"],"fileName":"Firebase+Injection.swift","identifier":"01-dependency-injection-with-factory-02-register-firebase-07.swift","type":"file","fileType":"swift","highlights":[{"line":19},{"line":20},{"line":21}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/05-Deleting-Data-from-Cloud-Firestore#Add-a-method-for-deleting-reminders-to-the-view-model":{"role":"pseudoSymbol","title":"Add a method for deleting reminders to the view model","abstract":[{"type":"text","text":"In this chapter of the tutorial, you’ve written code for creating, reading, and updating data in Cloud Firestore. There is one more data operation that is common for many apps: deleting data."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/05-Deleting-Data-from-Cloud-Firestore#Add-a-method-for-deleting-reminders-to-the-view-model","kind":"section","type":"section","url":"\/tutorials\/makeitso\/05-deleting-data-from-cloud-firestore#Add-a-method-for-deleting-reminders-to-the-view-model"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Pass-Data-From-the-Child-View":{"role":"pseudoSymbol","title":"Pass Data From the Child View","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Pass-Data-From-the-Child-View","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Pass-Data-From-the-Child-View"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project#Add-a-Firebase-Configuration-File":{"role":"pseudoSymbol","title":"Add a Firebase Configuration File","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Add-a-Firebase-Configuration-File","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project#Add-a-Firebase-Configuration-File"},"01-dependency-injection-with-factory-02-register-firebase-13.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","import FirebaseFirestore","import FirebaseFirestoreSwift","","extension Container {","","  \/\/\/ Determines whether to use the Firebase Local Emulator Suite.","  \/\/\/ To use the local emulator, go to the active scheme, and add `-useEmulator YES`","  \/\/\/ to the _Arguments Passed On Launch_ section.","  public var useEmulator: Factory<Bool> {","    Factory(self) {","      let value =  UserDefaults.standard.bool(forKey: \"useEmulator\")","      print(\"Using the emulator: \\(value == true ? \"YES\" : \"NO\")\")","      return value","    }.singleton","  }","","  public var firestore: Factory<Firestore> {","    Factory(self) {","      var environment = \"\"","      if Container.shared.useEmulator() {","        let settings = Firestore.firestore().settings","        settings.host = \"localhost:8080\"","        settings.cacheSettings = MemoryCacheSettings()","        settings.isSSLEnabled = false","        environment = \"to use the local emulator on \\(settings.host)\"","","        Firestore.firestore().settings = settings","        Auth.auth().useEmulator(withHost: \"localhost\", port: 9099)","      }","      else {","        environment = \"to use the Firebase backend\"","      }","      print(\"Configuring Cloud Firestore \\(environment).\")","      return Firestore.firestore()      ","    }.singleton","  }","}"],"fileName":"Firebase+Injection.swift","identifier":"01-dependency-injection-with-factory-02-register-firebase-13.swift","type":"file","fileType":"swift","highlights":[{"line":37}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Developing-Locally-with-the-Emulator-Suite#Connect-your-app-to-the-Emulator-Suite":{"role":"pseudoSymbol","title":"Connect your app to the Emulator Suite","abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite"},{"type":"text","text":" is a set of advanced tools for developers looking to build and test apps locally using Cloud Firestore, Realtime Database, Cloud Storage for Firebase, Authentication, Firebase Hosting, Cloud Functions (beta), Pub\/Sub (beta), and Firebase Extensions (beta). It provides a rich user interface to help you get running and prototyping quickly."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Connect-your-app-to-the-Emulator-Suite","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-developing-locally-with-the-emulator-suite#Connect-your-app-to-the-Emulator-Suite"},"01-dependency-injection-with-factory-03-inject-firestore-RemindersRepository-02.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseFirestore","import FirebaseFirestoreSwift","","public class RemindersRepository: ObservableObject {","  \/\/ MARK: - Dependencies","  @Injected(\\.firestore) var firestore","","  @Published","  var reminders = [Reminder]()","","  private var listenerRegistration: ListenerRegistration?","","  init() {","    subscribe()","  }","","  deinit {","    unsubscribe()","  }","","  func subscribe() {","    if listenerRegistration == nil {","      let query = Firestore.firestore().collection(Reminder.collectionName)","","      listenerRegistration = query","        .addSnapshotListener { [weak self] (querySnapshot, error) in","          guard let documents = querySnapshot?.documents else {","            print(\"No documents\")","            return","          }","","          print(\"Mapping \\(documents.count) documents\")","          self?.reminders = documents.compactMap { queryDocumentSnapshot in","            do {","              return try queryDocumentSnapshot.data(as: Reminder.self)","            }","            catch {","              print(\"Error while trying to map document \\(queryDocumentSnapshot.documentID): \\(error.localizedDescription)\")","              return nil","            }","          }","        }","    }","  }","","  private func unsubscribe() {","    if listenerRegistration != nil {","      listenerRegistration?.remove()","      listenerRegistration = nil","    }","  }","","  func addReminder(_ reminder: Reminder) throws {","    try Firestore","      .firestore()","      .collection(Reminder.collectionName)","      .addDocument(from: reminder)","  }","","  func updateReminder(_ reminder: Reminder) throws {","    guard let documentId = reminder.id else {","      fatalError(\"Reminder \\(reminder.title) has no document ID.\")","    }","    try Firestore","      .firestore()","      .collection(Reminder.collectionName)","      .document(documentId)","      .setData(from: reminder, merge: true)","  }","","  func removeReminder(_ reminder: Reminder) {","    guard let documentId = reminder.id else {","      fatalError(\"Reminder \\(reminder.title) has no document ID.\")","    }","    Firestore","      .firestore()","      .collection(Reminder.collectionName)","      .document(documentId)","      .delete()","  }","","}"],"fileName":"RemindersRepository.swift","identifier":"01-dependency-injection-with-factory-03-inject-firestore-RemindersRepository-02.swift","type":"file","fileType":"swift","highlights":[{"line":7},{"line":8}]},"01-dependency-injection-with-factory-04-inject-repository-RemindersListViewModel-02.swift":{"syntax":"swift","content":["import Foundation","import Factory","import Combine","","class RemindersListViewModel: ObservableObject {","  @Published","  var reminders = [Reminder]()","","  @Published","  var errorMessage: String?","","  \/\/ MARK: - Dependencies","  @Injected(\\.remindersRepository)","  private var remindersRepository: RemindersRepository","","  init() {","    remindersRepository","      .$reminders","      .assign(to: &$reminders)","  }","","  func addReminder(_ reminder: Reminder) {","    do {","      try remindersRepository.addReminder(reminder)","      errorMessage = nil","    }","    catch {","      print(error)","      errorMessage = error.localizedDescription","    }","  }","","  func updateReminder(_ reminder: Reminder) {","    do {","      try remindersRepository.updateReminder(reminder)","    }","    catch {","      print(error)","      errorMessage = error.localizedDescription","    }","  }","","  func deleteReminder(_ reminder: Reminder) {","    remindersRepository.removeReminder(reminder)","  }","","  func setCompleted(_ reminder: Reminder, isCompleted: Bool) {","    var editedReminder = reminder","    editedReminder.isCompleted = isCompleted","    updateReminder(editedReminder)","  }","","}"],"fileName":"ReminderListViewModel.swift","identifier":"01-dependency-injection-with-factory-04-inject-repository-RemindersListViewModel-02.swift","type":"file","fileType":"swift","highlights":[{"line":12},{"line":13},{"line":14}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Implementing-MVVM":{"role":"project","title":"Implementing Model, View, ViewModel (MVVM)","estimatedTime":"20min","abstract":[{"type":"text","text":"With the basic views for displaying and adding todo items set up, it is time to think about the architecture of the app."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/02-implementing-mvvm"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Display-a-List-of-Reminders":{"role":"pseudoSymbol","title":"Display a List of Reminders","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Display-a-List-of-Reminders","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Display-a-List-of-Reminders"},"01-dependency-injection-with-factory-02-register-firebase-10.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","import FirebaseFirestore","import FirebaseFirestoreSwift","","extension Container {","","  \/\/\/ Determines whether to use the Firebase Local Emulator Suite.","  \/\/\/ To use the local emulator, go to the active scheme, and add `-useEmulator YES`","  \/\/\/ to the _Arguments Passed On Launch_ section.","  public var useEmulator: Factory<Bool> {","    Factory(self) {","      let value =  UserDefaults.standard.bool(forKey: \"useEmulator\")","      print(\"Using the emulator: \\(value == true ? \"YES\" : \"NO\")\")","      return value","    }.singleton","  }","","  public var firestore: Factory<Firestore> {","    Factory(self) {","      var environment = \"\"","      if Container.shared.useEmulator() {","      }","      else {","      }","    }.singleton","  }","}"],"fileName":"Firebase+Injection.swift","identifier":"01-dependency-injection-with-factory-02-register-firebase-10.swift","type":"file","fileType":"swift","highlights":[{"line":22},{"line":23},{"line":24},{"line":25},{"line":26}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Run-the-app-to-experience-real-time-sync":{"role":"pseudoSymbol","title":"Run the app to experience real-time sync","abstract":[{"type":"text","text":"Now that you’ve implemented a "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":", and wrote code for storing "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":"s to Firestore, it is time to retrieve reminders from Firestore, so they can be displayed in the app’s UI."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Run-the-app-to-experience-real-time-sync","kind":"section","type":"section","url":"\/tutorials\/makeitso\/03-retrieving-data-from-cloud-firestore-in-real-time#Run-the-app-to-experience-real-time-sync"},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Manage-the-lifecycle-of-the-snapshot-listener":{"role":"pseudoSymbol","title":"Manage the lifecycle of the snapshot listener","abstract":[{"type":"text","text":"Now that you’ve implemented a "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":", and wrote code for storing "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":"s to Firestore, it is time to retrieve reminders from Firestore, so they can be displayed in the app’s UI."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Manage-the-lifecycle-of-the-snapshot-listener","kind":"section","type":"section","url":"\/tutorials\/makeitso\/03-retrieving-data-from-cloud-firestore-in-real-time#Manage-the-lifecycle-of-the-snapshot-listener"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Dependency-Injection-with-Factory":{"role":"project","title":"Dependency Injection with Factory","estimatedTime":"20min","abstract":[{"type":"text","text":"Even though "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MakeItSo"}]},{"type":"text","text":" is a relatively simple app, it consists of quite a few components that need to interact with each other: models, views, view models, repositories, and different backend services like Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/01-dependency-injection-with-factory"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Anonymous-Auth#Register-AuthenticationService-with-the-Dependency-Injection-container":{"role":"pseudoSymbol","title":"Register AuthenticationService with the Dependency Injection container","abstract":[{"type":"text","text":"It seems like MakeItSo meets the bar for an MVP (minimum viable product): users can add new reminders, check them off, change their details, and even delete them. But - as you might have noticed when running the app on two different iOS Simulators - the app is not multi-user capable. What’s worse, it seems like all users can see everyone else’s todo items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Register-AuthenticationService-with-the-Dependency-Injection-container","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-anonymous-auth#Register-AuthenticationService-with-the-Dependency-Injection-container"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project#Create-a-New-Firebase-Project":{"role":"pseudoSymbol","title":"Create a New Firebase Project ","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Create-a-New-Firebase-Project","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project#Create-a-New-Firebase-Project"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project":{"role":"project","title":"Adding Firebase to Your Project","estimatedTime":"25min","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project"},"doc://com.example.MakeItSo/tutorials/MakeItSo/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase/Authenticating-Users":{"role":"article","title":"Authenticating Users","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Authenticating-Users","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/creating-a-simple-todo-list-app-with-swiftui-and-firebase\/authenticating-users"},"01-dependency-injection-with-factory-01-add-factory-01.png":{"alt":null,"type":"image","identifier":"01-dependency-injection-with-factory-01-add-factory-01.png","variants":[{"url":"\/images\/01-dependency-injection-with-factory-01-add-factory-01@2x.png","traits":["2x","light"]},{"url":"\/images\/01-dependency-injection-with-factory-01-add-factory-01~dark@2x.png","traits":["2x","dark"]}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project#Launch-the-App-to-Verify-Setup":{"role":"pseudoSymbol","title":"Launch the App to Verify Setup","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Launch-the-App-to-Verify-Setup","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project#Launch-the-App-to-Verify-Setup"},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Connect-the-view-model":{"role":"pseudoSymbol","title":"Connect the view model","abstract":[{"type":"text","text":"Now that you’ve implemented a "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":", and wrote code for storing "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":"s to Firestore, it is time to retrieve reminders from Firestore, so they can be displayed in the app’s UI."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Connect-the-view-model","kind":"section","type":"section","url":"\/tutorials\/makeitso\/03-retrieving-data-from-cloud-firestore-in-real-time#Connect-the-view-model"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Mark-Reminders-as-completed":{"role":"pseudoSymbol","title":"Mark Reminders as completed","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Mark-Reminders-as-completed","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Mark-Reminders-as-completed"},"01-dependency-injection-with-factory-04-inject-repository-Repositories+Injection-01.swift":{"syntax":"swift","content":["import Foundation"],"fileName":"Repositories+Injection.swift","identifier":"01-dependency-injection-with-factory-04-inject-repository-Repositories+Injection-01.swift","type":"file","fileType":"swift","highlights":[]},"doc://com.example.MakeItSo/tutorials/MakeItSo/04-Updating-Data-in-Cloud-Firestore#Edit-reminders":{"role":"pseudoSymbol","title":"Edit reminders","abstract":[{"type":"text","text":"So far, the app you’re building can help you add an keep track of your todos, but you cannot mark them as completed."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/04-Updating-Data-in-Cloud-Firestore#Edit-reminders","kind":"section","type":"section","url":"\/tutorials\/makeitso\/04-updating-data-in-cloud-firestore#Edit-reminders"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Create-a-Styleable-Toggle":{"role":"project","title":"Creating a Styleable Toggle","estimatedTime":"25min","abstract":[{"type":"text","text":"When you implemented the UI for displaying reminders in the "},{"type":"codeVoice","code":"List"},{"type":"text","text":" view, you used an "},{"type":"codeVoice","code":"Image"},{"type":"text","text":" view to create the a circular check box."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Create-a-Styleable-Toggle","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/02-create-a-styleable-toggle"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Wrap-Up":{"role":"pseudoSymbol","title":"Wrap Up","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Wrap-Up","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Wrap-Up"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Anonymous-Auth#Add-a-userId-property-to-the-Reminder-struct":{"role":"pseudoSymbol","title":"Add a userId property to the Reminder struct","abstract":[{"type":"text","text":"It seems like MakeItSo meets the bar for an MVP (minimum viable product): users can add new reminders, check them off, change their details, and even delete them. But - as you might have noticed when running the app on two different iOS Simulators - the app is not multi-user capable. What’s worse, it seems like all users can see everyone else’s todo items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Add-a-userId-property-to-the-Reminder-struct","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-anonymous-auth#Add-a-userId-property-to-the-Reminder-struct"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Create-a-Styleable-Toggle#Create-a-custom-toggle-style":{"role":"pseudoSymbol","title":"Create a custom toggle style","abstract":[{"type":"text","text":"When you implemented the UI for displaying reminders in the "},{"type":"codeVoice","code":"List"},{"type":"text","text":" view, you used an "},{"type":"codeVoice","code":"Image"},{"type":"text","text":" view to create the a circular check box."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Create-a-Styleable-Toggle#Create-a-custom-toggle-style","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-create-a-styleable-toggle#Create-a-custom-toggle-style"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Developing-Locally-with-the-Emulator-Suite":{"role":"project","title":"Developing locally with the Emulator Suite","estimatedTime":"25min","abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite"},{"type":"text","text":" is a set of advanced tools for developers looking to build and test apps locally using Cloud Firestore, Realtime Database, Cloud Storage for Firebase, Authentication, Firebase Hosting, Cloud Functions (beta), Pub\/Sub (beta), and Firebase Extensions (beta). It provides a rich user interface to help you get running and prototyping quickly."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/02-developing-locally-with-the-emulator-suite"},"01-dependency-injection-with-factory-01-add-factory-03.png":{"alt":null,"type":"image","identifier":"01-dependency-injection-with-factory-01-add-factory-03.png","variants":[{"url":"\/images\/01-dependency-injection-with-factory-01-add-factory-03@2x.png","traits":["2x","light"]},{"url":"\/images\/01-dependency-injection-with-factory-01-add-factory-03~dark@2x.png","traits":["2x","dark"]}]},"01-dependency-injection-with-factory-02-register-firebase-09.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","import FirebaseFirestore","import FirebaseFirestoreSwift","","extension Container {","","  \/\/\/ Determines whether to use the Firebase Local Emulator Suite.","  \/\/\/ To use the local emulator, go to the active scheme, and add `-useEmulator YES`","  \/\/\/ to the _Arguments Passed On Launch_ section.","  public var useEmulator: Factory<Bool> {","    Factory(self) {","      let value =  UserDefaults.standard.bool(forKey: \"useEmulator\")","      print(\"Using the emulator: \\(value == true ? \"YES\" : \"NO\")\")","      return value","    }.singleton","  }","","  public var firestore: Factory<Firestore> {","    Factory(self) {","    }.singleton","  }","}"],"fileName":"Firebase+Injection.swift","identifier":"01-dependency-injection-with-factory-02-register-firebase-09.swift","type":"file","fileType":"swift","highlights":[{"line":22}]},"Xcode 14":{"title":"Xcode 14","type":"xcodeRequirement","identifier":"Xcode 14","url":"https:\/\/xcodereleases.com\/"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Sign-in-with-Apple#Implement-Sign-in-with-Apple":{"role":"pseudoSymbol","title":"Implement Sign in with Apple","abstract":[{"type":"text","text":"Your app is now capable of storing data on a per-user basis. You achieved this by implementing Firebase Anonymous Authentication in the previous chapter, and then using the anonymous user’s ID to tag their reminders when storing them in Cloud Firestore."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Implement-Sign-in-with-Apple","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-sign-in-with-apple#Implement-Sign-in-with-Apple"},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Clean-up":{"role":"pseudoSymbol","title":"Clean-up","abstract":[{"type":"text","text":"Now that you’ve implemented a "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":", and wrote code for storing "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":"s to Firestore, it is time to retrieve reminders from Firestore, so they can be displayed in the app’s UI."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Clean-up","kind":"section","type":"section","url":"\/tutorials\/makeitso\/03-retrieving-data-from-cloud-firestore-in-real-time#Clean-up"},"01-dependency-injection-with-factory-01-add-factory-05.png":{"alt":null,"type":"image","identifier":"01-dependency-injection-with-factory-01-add-factory-05.png","variants":[{"url":"\/images\/01-dependency-injection-with-factory-01-add-factory-05@2x.png","traits":["2x","light"]},{"url":"\/images\/01-dependency-injection-with-factory-01-add-factory-05~dark@2x.png","traits":["2x","dark"]}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project#Register-Your-App-with-Firebase":{"role":"pseudoSymbol","title":"Register Your App with Firebase","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Register-Your-App-with-Firebase","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project#Register-Your-App-with-Firebase"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Anonymous-Auth#Download-the-project-files":{"role":"pseudoSymbol","title":"Download the project files","abstract":[{"type":"text","text":"It seems like MakeItSo meets the bar for an MVP (minimum viable product): users can add new reminders, check them off, change their details, and even delete them. But - as you might have noticed when running the app on two different iOS Simulators - the app is not multi-user capable. What’s worse, it seems like all users can see everyone else’s todo items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Download-the-project-files","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-anonymous-auth#Download-the-project-files"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Create-a-Styleable-Toggle#Use-the-new-style-in-your-app":{"role":"pseudoSymbol","title":"Use the new style in your app","abstract":[{"type":"text","text":"When you implemented the UI for displaying reminders in the "},{"type":"codeVoice","code":"List"},{"type":"text","text":" view, you used an "},{"type":"codeVoice","code":"Image"},{"type":"text","text":" view to create the a circular check box."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Create-a-Styleable-Toggle#Use-the-new-style-in-your-app","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-create-a-styleable-toggle#Use-the-new-style-in-your-app"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Developing-Locally-with-the-Emulator-Suite#Connect-to-your-Firebase-project-and-enable-the-Emulator-Suite":{"role":"pseudoSymbol","title":"Connect to your Firebase project and enable the Emulator Suite","abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite"},{"type":"text","text":" is a set of advanced tools for developers looking to build and test apps locally using Cloud Firestore, Realtime Database, Cloud Storage for Firebase, Authentication, Firebase Hosting, Cloud Functions (beta), Pub\/Sub (beta), and Firebase Extensions (beta). It provides a rich user interface to help you get running and prototyping quickly."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Connect-to-your-Firebase-project-and-enable-the-Emulator-Suite","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-developing-locally-with-the-emulator-suite#Connect-to-your-Firebase-project-and-enable-the-Emulator-Suite"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Implementing-MVVM#Create-a-View-Model-and-connect-it-to-the-RemindersListView":{"role":"pseudoSymbol","title":"Create a View Model and connect it to the RemindersListView","abstract":[{"type":"text","text":"With the basic views for displaying and adding todo items set up, it is time to think about the architecture of the app."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Create-a-View-Model-and-connect-it-to-the-RemindersListView","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-implementing-mvvm#Create-a-View-Model-and-connect-it-to-the-RemindersListView"},"01-dependency-injection-with-factory-04-inject-repository-Repositories+Injection-05.swift":{"syntax":"swift","content":["import Foundation","import Factory","","extension Container {","  public var remindersRepository: Factory<RemindersRepository> {","    self {","      RemindersRepository()","    }.singleton","  }","}"],"fileName":"Repositories+Injection.swift","identifier":"01-dependency-injection-with-factory-04-inject-repository-Repositories+Injection-05.swift","type":"file","fileType":"swift","highlights":[{"line":7}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Developing-Locally-with-the-Emulator-Suite#Install-the-Firebase-CLI":{"role":"pseudoSymbol","title":"Install the Firebase CLI","abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite"},{"type":"text","text":" is a set of advanced tools for developers looking to build and test apps locally using Cloud Firestore, Realtime Database, Cloud Storage for Firebase, Authentication, Firebase Hosting, Cloud Functions (beta), Pub\/Sub (beta), and Firebase Extensions (beta). It provides a rich user interface to help you get running and prototyping quickly."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Install-the-Firebase-CLI","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-developing-locally-with-the-emulator-suite#Install-the-Firebase-CLI"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Create-a-New-Project":{"role":"pseudoSymbol","title":"Create a New Project","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Create-a-New-Project","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Create-a-New-Project"},"doc://com.example.MakeItSo/tutorials/MakeItSo/05-Deleting-Data-from-Cloud-Firestore#Implement-a-method-for-removing-a-single-reminder-from-the-repository":{"role":"pseudoSymbol","title":"Implement a method for removing a single reminder from the repository","abstract":[{"type":"text","text":"In this chapter of the tutorial, you’ve written code for creating, reading, and updating data in Cloud Firestore. There is one more data operation that is common for many apps: deleting data."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/05-Deleting-Data-from-Cloud-Firestore#Implement-a-method-for-removing-a-single-reminder-from-the-repository","kind":"section","type":"section","url":"\/tutorials\/makeitso\/05-deleting-data-from-cloud-firestore#Implement-a-method-for-removing-a-single-reminder-from-the-repository"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Sign-in-with-Apple":{"role":"project","title":"Sign in with Apple and Firebase Authentication","estimatedTime":"25min","abstract":[{"type":"text","text":"Your app is now capable of storing data on a per-user basis. You achieved this by implementing Firebase Anonymous Authentication in the previous chapter, and then using the anonymous user’s ID to tag their reminders when storing them in Cloud Firestore."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/02-sign-in-with-apple"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Sign-in-with-Apple#Connect-the-app-to-your-Apple-developer-account":{"role":"pseudoSymbol","title":"Connect the app to your Apple developer account","abstract":[{"type":"text","text":"Your app is now capable of storing data on a per-user basis. You achieved this by implementing Firebase Anonymous Authentication in the previous chapter, and then using the anonymous user’s ID to tag their reminders when storing them in Cloud Firestore."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Connect-the-app-to-your-Apple-developer-account","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-sign-in-with-apple#Connect-the-app-to-your-Apple-developer-account"},"01-dependency-injection-with-factory-02-register-firebase-01.png":{"alt":null,"type":"image","identifier":"01-dependency-injection-with-factory-02-register-firebase-01.png","variants":[{"url":"\/images\/01-dependency-injection-with-factory-02-register-firebase-01@2x.png","traits":["2x","light"]},{"url":"\/images\/01-dependency-injection-with-factory-02-register-firebase-01~dark@2x.png","traits":["2x","dark"]}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Anonymous-Auth":{"role":"project","title":"Implementing guest users with Firebase Anonymous Authentication","estimatedTime":"35min","abstract":[{"type":"text","text":"It seems like MakeItSo meets the bar for an MVP (minimum viable product): users can add new reminders, check them off, change their details, and even delete them. But - as you might have noticed when running the app on two different iOS Simulators - the app is not multi-user capable. What’s worse, it seems like all users can see everyone else’s todo items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/01-anonymous-auth"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Sign-in-with-Apple#Sign-in-to-Firebase-and-create-a-new-user-account":{"role":"pseudoSymbol","title":"Sign in to Firebase and create a new user account","abstract":[{"type":"text","text":"Your app is now capable of storing data on a per-user basis. You achieved this by implementing Firebase Anonymous Authentication in the previous chapter, and then using the anonymous user’s ID to tag their reminders when storing them in Cloud Firestore."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Sign-in-to-Firebase-and-create-a-new-user-account","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-sign-in-with-apple#Sign-in-to-Firebase-and-create-a-new-user-account"},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Implement-a-snapshot-listener":{"role":"pseudoSymbol","title":"Implement a snapshot listener","abstract":[{"type":"text","text":"Now that you’ve implemented a "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":", and wrote code for storing "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":"s to Firestore, it is time to retrieve reminders from Firestore, so they can be displayed in the app’s UI."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Implement-a-snapshot-listener","kind":"section","type":"section","url":"\/tutorials\/makeitso\/03-retrieving-data-from-cloud-firestore-in-real-time#Implement-a-snapshot-listener"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Sign-in-with-Apple#Run-the-app":{"role":"pseudoSymbol","title":"Run the app","abstract":[{"type":"text","text":"Your app is now capable of storing data on a per-user basis. You achieved this by implementing Firebase Anonymous Authentication in the previous chapter, and then using the anonymous user’s ID to tag their reminders when storing them in Cloud Firestore."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Run-the-app","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-sign-in-with-apple#Run-the-app"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Extract-Row-View#Implement-parentchild-communiction":{"role":"pseudoSymbol","title":"Implement parent\/child communiction","abstract":[{"type":"text","text":"SwiftUI’s syntax for describing UIs in a declarative way is quite efficient, and allows you to describe rather complex UIs with relatively little code."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View#Implement-parentchild-communiction","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-extract-row-view#Implement-parentchild-communiction"},"01-dependency-injection-with-factory-02-register-firebase-01.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","import FirebaseFirestore","import FirebaseFirestoreSwift"],"fileName":"Firebase+Injection.swift","identifier":"01-dependency-injection-with-factory-02-register-firebase-01.swift","type":"file","fileType":"swift","highlights":[{"line":2},{"line":3},{"line":4},{"line":5}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Sign-in-with-Apple#Connect-the-UI":{"role":"pseudoSymbol","title":"Connect the UI","abstract":[{"type":"text","text":"Your app is now capable of storing data on a per-user basis. You achieved this by implementing Firebase Anonymous Authentication in the previous chapter, and then using the anonymous user’s ID to tag their reminders when storing them in Cloud Firestore."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Connect-the-UI","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-sign-in-with-apple#Connect-the-UI"},"01-dependency-injection-with-factory-02-register-firebase-08.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","import FirebaseFirestore","import FirebaseFirestoreSwift","","extension Container {","","  \/\/\/ Determines whether to use the Firebase Local Emulator Suite.","  \/\/\/ To use the local emulator, go to the active scheme, and add `-useEmulator YES`","  \/\/\/ to the _Arguments Passed On Launch_ section.","  public var useEmulator: Factory<Bool> {","    Factory(self) {","      let value =  UserDefaults.standard.bool(forKey: \"useEmulator\")","      print(\"Using the emulator: \\(value == true ? \"YES\" : \"NO\")\")","      return value","    }.singleton","  }","","  public var firestore: Factory<Firestore> {","    Factory(self) {","    }","  }","}"],"fileName":"Firebase+Injection.swift","identifier":"01-dependency-injection-with-factory-02-register-firebase-08.swift","type":"file","fileType":"swift","highlights":[{"line":21},{"line":22}]},"01-dependency-injection-with-factory-02-register-firebase-06.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","import FirebaseFirestore","import FirebaseFirestoreSwift","","extension Container {","","  \/\/\/ Determines whether to use the Firebase Local Emulator Suite.","  \/\/\/ To use the local emulator, go to the active scheme, and add `-useEmulator YES`","  \/\/\/ to the _Arguments Passed On Launch_ section.","  public var useEmulator: Factory<Bool> {","    Factory(self) {","      let value =  UserDefaults.standard.bool(forKey: \"useEmulator\")","      print(\"Using the emulator: \\(value == true ? \"YES\" : \"NO\")\")","      return value","    }.singleton","  }","}"],"fileName":"Firebase+Injection.swift","identifier":"01-dependency-injection-with-factory-02-register-firebase-06.swift","type":"file","fileType":"swift","highlights":[{"line":14},{"line":15},{"line":16}]},"01-dependency-injection-with-factory-05-inject-repository-MakeItSoApp-00.swift":{"syntax":"swift","content":["import SwiftUI","import FirebaseCore","import FirebaseAuth","import FirebaseFirestore","","class AppDelegate: NSObject, UIApplicationDelegate {","  func application(_ application: UIApplication,","                   didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil) -> Bool {","","    FirebaseApp.configure()","","    let useEmulator = UserDefaults.standard.bool(forKey: \"useEmulator\")","    if useEmulator {","      let settings = Firestore.firestore().settings","      settings.host = \"localhost:8080\"","      settings.isSSLEnabled = false","      Firestore.firestore().settings = settings","","      Auth.auth().useEmulator(withHost: \"localhost\", port: 9099)","    }","","    return true","  }","}","","@main","struct MakeItSoApp: App {","  @UIApplicationDelegateAdaptor(AppDelegate.self) var delegate","  var body: some Scene {","    WindowGroup {","      NavigationStack {","        RemindersListView()","          .navigationTitle(\"Reminders\")","      }","    }","  }","}"],"fileName":"MakeItSoApp.swift","identifier":"01-dependency-injection-with-factory-05-inject-repository-MakeItSoApp-00.swift","type":"file","fileType":"swift","highlights":[]},"https://firebase.google.com/docs/emulator-suite":{"title":"Firebase Local Emulator Suite","titleInlineContent":[{"type":"text","text":"Firebase Local Emulator Suite"}],"type":"link","identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite","url":"https:\/\/firebase.google.com\/docs\/emulator-suite"},"01-dependency-injection-with-factory-03-inject-firestore-RemindersRepository-01.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseFirestore","import FirebaseFirestoreSwift","","public class RemindersRepository: ObservableObject {","","  @Published","  var reminders = [Reminder]()","","  private var listenerRegistration: ListenerRegistration?","","  init() {","    subscribe()","  }","","  deinit {","    unsubscribe()","  }","","  func subscribe() {","    if listenerRegistration == nil {","      let query = Firestore.firestore().collection(Reminder.collectionName)","","      listenerRegistration = query","        .addSnapshotListener { [weak self] (querySnapshot, error) in","          guard let documents = querySnapshot?.documents else {","            print(\"No documents\")","            return","          }","","          print(\"Mapping \\(documents.count) documents\")","          self?.reminders = documents.compactMap { queryDocumentSnapshot in","            do {","              return try queryDocumentSnapshot.data(as: Reminder.self)","            }","            catch {","              print(\"Error while trying to map document \\(queryDocumentSnapshot.documentID): \\(error.localizedDescription)\")","              return nil","            }","          }","        }","    }","  }","","  private func unsubscribe() {","    if listenerRegistration != nil {","      listenerRegistration?.remove()","      listenerRegistration = nil","    }","  }","","  func addReminder(_ reminder: Reminder) throws {","    try Firestore","      .firestore()","      .collection(Reminder.collectionName)","      .addDocument(from: reminder)","  }","","  func updateReminder(_ reminder: Reminder) throws {","    guard let documentId = reminder.id else {","      fatalError(\"Reminder \\(reminder.title) has no document ID.\")","    }","    try Firestore","      .firestore()","      .collection(Reminder.collectionName)","      .document(documentId)","      .setData(from: reminder, merge: true)","  }","","  func removeReminder(_ reminder: Reminder) {","    guard let documentId = reminder.id else {","      fatalError(\"Reminder \\(reminder.title) has no document ID.\")","    }","    Firestore","      .firestore()","      .collection(Reminder.collectionName)","      .document(documentId)","      .delete()","  }","","}"],"fileName":"RemindersRepository.swift","identifier":"01-dependency-injection-with-factory-03-inject-firestore-RemindersRepository-01.swift","type":"file","fileType":"swift","highlights":[{"line":2}]},"01-dependency-injection-with-factory-02-register-firebase-02.png":{"alt":null,"type":"image","identifier":"01-dependency-injection-with-factory-02-register-firebase-02.png","variants":[{"url":"\/images\/01-dependency-injection-with-factory-02-register-firebase-02@2x.png","traits":["2x","light"]},{"url":"\/images\/01-dependency-injection-with-factory-02-register-firebase-02~dark@2x.png","traits":["2x","dark"]}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Create-a-Styleable-Toggle#Update-the-preview-provider":{"role":"pseudoSymbol","title":"Update the preview provider","abstract":[{"type":"text","text":"When you implemented the UI for displaying reminders in the "},{"type":"codeVoice","code":"List"},{"type":"text","text":" view, you used an "},{"type":"codeVoice","code":"Image"},{"type":"text","text":" view to create the a circular check box."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Create-a-Styleable-Toggle#Update-the-preview-provider","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-create-a-styleable-toggle#Update-the-preview-provider"},"doc://com.example.MakeItSo/tutorials/MakeItSo/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase/Dependency-Injection":{"role":"article","title":"Dependency Injection","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Dependency-Injection","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/creating-a-simple-todo-list-app-with-swiftui-and-firebase\/dependency-injection"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Implementing-MVVM#Add-a-method-to-the-View-Model-for-adding-new-reminders":{"role":"pseudoSymbol","title":"Add a method to the View Model for adding new reminders","abstract":[{"type":"text","text":"With the basic views for displaying and adding todo items set up, it is time to think about the architecture of the app."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Add-a-method-to-the-View-Model-for-adding-new-reminders","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-implementing-mvvm#Add-a-method-to-the-View-Model-for-adding-new-reminders"},"doc://com.example.MakeItSo/tutorials/MakeItSo/00-Intro-to-Firebase-Authentication":{"role":"article","title":"Firebase Authenticatioon","estimatedTime":"10min","abstract":[{"type":"text","text":"Firebase Authentication provides backend services, easy-to-use SDKs, and ready-made UI libraries to authenticate users to your app. It supports authentication using passwords, phone numbers, popular federated identity providers like Google, Facebook and Twitter, and more."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/00-Intro-to-Firebase-Authentication","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/00-intro-to-firebase-authentication"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Storing-Data-in-Cloud-Firestore#Implement-a-repository-for-managing-reminders":{"role":"pseudoSymbol","title":"Implement a repository for managing reminders","abstract":[{"type":"text","text":"With the UI of the application in place, and Firebase set up for local development, it is now time to store data in the cloud."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Implement-a-repository-for-managing-reminders","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-storing-data-in-cloud-firestore#Implement-a-repository-for-managing-reminders"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project#Initialize-Firebase-in-Your-App":{"role":"pseudoSymbol","title":"Initialize Firebase in Your App","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Initialize-Firebase-in-Your-App","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project#Initialize-Firebase-in-Your-App"},"01-dependency-injection-with-factory-02-register-firebase-12.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","import FirebaseFirestore","import FirebaseFirestoreSwift","","extension Container {","","  \/\/\/ Determines whether to use the Firebase Local Emulator Suite.","  \/\/\/ To use the local emulator, go to the active scheme, and add `-useEmulator YES`","  \/\/\/ to the _Arguments Passed On Launch_ section.","  public var useEmulator: Factory<Bool> {","    Factory(self) {","      let value =  UserDefaults.standard.bool(forKey: \"useEmulator\")","      print(\"Using the emulator: \\(value == true ? \"YES\" : \"NO\")\")","      return value","    }.singleton","  }","","  public var firestore: Factory<Firestore> {","    Factory(self) {","      var environment = \"\"","      if Container.shared.useEmulator() {","        let settings = Firestore.firestore().settings","        settings.host = \"localhost:8080\"","        settings.cacheSettings = MemoryCacheSettings()","        settings.isSSLEnabled = false","        environment = \"to use the local emulator on \\(settings.host)\"","","        Firestore.firestore().settings = settings","        Auth.auth().useEmulator(withHost: \"localhost\", port: 9099)","      }","      else {","        environment = \"to use the Firebase backend\"","      }","      print(\"Configuring Cloud Firestore \\(environment).\")","    }.singleton","  }","}"],"fileName":"Firebase+Injection.swift","identifier":"01-dependency-injection-with-factory-02-register-firebase-12.swift","type":"file","fileType":"swift","highlights":[{"line":34},{"line":36}]},"01-dependency-injection-with-factory-04-inject-repository-Repositories+Injection-02.swift":{"syntax":"swift","content":["import Foundation","import Factory","","extension Container {","}"],"fileName":"Repositories+Injection.swift","identifier":"01-dependency-injection-with-factory-04-inject-repository-Repositories+Injection-02.swift","type":"file","fileType":"swift","highlights":[{"line":2},{"line":3},{"line":4},{"line":5}]},"01-dependency-injection-with-factory-02-register-firebase-03.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","import FirebaseFirestore","import FirebaseFirestoreSwift","","extension Container {","","  \/\/\/ Determines whether to use the Firebase Local Emulator Suite.","  \/\/\/ To use the local emulator, go to the active scheme, and add `-useEmulator YES`","  \/\/\/ to the _Arguments Passed On Launch_ section.","  public var useEmulator: Factory<Bool> {","  }","}"],"fileName":"Firebase+Injection.swift","identifier":"01-dependency-injection-with-factory-02-register-firebase-03.swift","type":"file","fileType":"swift","highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Dependency-Injection-with-Factory#Inject-RemindersRepository-into-RemindersListViewModel":{"role":"pseudoSymbol","title":"Inject RemindersRepository into RemindersListViewModel","abstract":[{"type":"text","text":"Even though "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MakeItSo"}]},{"type":"text","text":" is a relatively simple app, it consists of quite a few components that need to interact with each other: models, views, view models, repositories, and different backend services like Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Inject-RemindersRepository-into-RemindersListViewModel","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-dependency-injection-with-factory#Inject-RemindersRepository-into-RemindersListViewModel"},"hero-dependency-injection-with-factory.png":{"alt":null,"type":"image","identifier":"hero-dependency-injection-with-factory.png","variants":[{"url":"\/images\/hero-dependency-injection-with-factory@2x.png","traits":["2x","light"]},{"url":"\/images\/hero-dependency-injection-with-factory~dark@2x.png","traits":["2x","dark"]}]},"01-dependency-injection-with-factory-01-add-factory-04.png":{"alt":null,"type":"image","identifier":"01-dependency-injection-with-factory-01-add-factory-04.png","variants":[{"url":"\/images\/01-dependency-injection-with-factory-01-add-factory-04@2x.png","traits":["2x","light"]},{"url":"\/images\/01-dependency-injection-with-factory-01-add-factory-04~dark@2x.png","traits":["2x","dark"]}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase/Connecting-Your-App-to-Firebase":{"role":"article","title":"Connecting Your App to Firebase","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Connecting-Your-App-to-Firebase","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/creating-a-simple-todo-list-app-with-swiftui-and-firebase\/connecting-your-app-to-firebase"},"01-dependency-injection-with-factory-04-inject-repository-Repositories+Injection-03.swift":{"syntax":"swift","content":["import Foundation","import Factory","","extension Container {","  public var remindersRepository: Factory<RemindersRepository> {","  }","}"],"fileName":"Repositories+Injection.swift","identifier":"01-dependency-injection-with-factory-04-inject-repository-Repositories+Injection-03.swift","type":"file","fileType":"swift","highlights":[{"line":5},{"line":6}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Developing-Locally-with-the-Emulator-Suite#Use-launch-arguments-to-switch-between-the-Emulator-and-your-Firebase-project":{"role":"pseudoSymbol","title":"Use launch arguments to switch between the Emulator and your Firebase project","abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite"},{"type":"text","text":" is a set of advanced tools for developers looking to build and test apps locally using Cloud Firestore, Realtime Database, Cloud Storage for Firebase, Authentication, Firebase Hosting, Cloud Functions (beta), Pub\/Sub (beta), and Firebase Extensions (beta). It provides a rich user interface to help you get running and prototyping quickly."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Use-launch-arguments-to-switch-between-the-Emulator-and-your-Firebase-project","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-developing-locally-with-the-emulator-suite#Use-launch-arguments-to-switch-between-the-Emulator-and-your-Firebase-project"},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Account-Linking":{"role":"project","title":"Account Linking","estimatedTime":"10min","abstract":[{"type":"text","text":"Users of your app can now sign in to the app using their Apple ID, but unfortunately, when they do so, any data they might have entered before signing in will disappear. This is probably not what the user expected!"}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Account-Linking","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/03-account-linking"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Create-a-Dialog-for-Adding-New-Reminders":{"role":"pseudoSymbol","title":"Create a Dialog for Adding New Reminders","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Create-a-Dialog-for-Adding-New-Reminders","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Create-a-Dialog-for-Adding-New-Reminders"},"01-dependency-injection-with-factory-04-inject-repository-RemindersListViewModel-01.swift":{"syntax":"swift","content":["import Foundation","import Factory","import Combine","","class RemindersListViewModel: ObservableObject {","  @Published","  var reminders = [Reminder]()","","  @Published","  var errorMessage: String?","","  private var remindersRepository: RemindersRepository =  RemindersRepository()","","  init() {","    remindersRepository","      .$reminders","      .assign(to: &$reminders)","  }","","  func addReminder(_ reminder: Reminder) {","    do {","      try remindersRepository.addReminder(reminder)","      errorMessage = nil","    }","    catch {","      print(error)","      errorMessage = error.localizedDescription","    }","  }","","  func updateReminder(_ reminder: Reminder) {","    do {","      try remindersRepository.updateReminder(reminder)","    }","    catch {","      print(error)","      errorMessage = error.localizedDescription","    }","  }","","  func deleteReminder(_ reminder: Reminder) {","    remindersRepository.removeReminder(reminder)","  }","","  func setCompleted(_ reminder: Reminder, isCompleted: Bool) {","    var editedReminder = reminder","    editedReminder.isCompleted = isCompleted","    updateReminder(editedReminder)","  }","","}"],"fileName":"ReminderListViewModel.swift","identifier":"01-dependency-injection-with-factory-04-inject-repository-RemindersListViewModel-01.swift","type":"file","fileType":"swift","highlights":[{"line":2}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase/Building-a-Simple-UI":{"role":"article","title":"Building a Simple UI","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Building-a-Simple-UI","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/creating-a-simple-todo-list-app-with-swiftui-and-firebase\/building-a-simple-ui"},"doc://com.example.MakeItSo/tutorials/MakeItSo/05-Deleting-Data-from-Cloud-Firestore#Implement-a-swipe-action-for-deleteing-reminders-from-the-list-view":{"role":"pseudoSymbol","title":"Implement a swipe action for deleteing reminders from the list view","abstract":[{"type":"text","text":"In this chapter of the tutorial, you’ve written code for creating, reading, and updating data in Cloud Firestore. There is one more data operation that is common for many apps: deleting data."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/05-Deleting-Data-from-Cloud-Firestore#Implement-a-swipe-action-for-deleteing-reminders-from-the-list-view","kind":"section","type":"section","url":"\/tutorials\/makeitso\/05-deleting-data-from-cloud-firestore#Implement-a-swipe-action-for-deleteing-reminders-from-the-list-view"},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Account-Linking#Run-the-app":{"role":"pseudoSymbol","title":"Run the app","abstract":[{"type":"text","text":"Users of your app can now sign in to the app using their Apple ID, but unfortunately, when they do so, any data they might have entered before signing in will disappear. This is probably not what the user expected!"}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Account-Linking#Run-the-app","kind":"section","type":"section","url":"\/tutorials\/makeitso\/03-account-linking#Run-the-app"},"01-dependency-injection-with-factory-02-register-firebase-04.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","import FirebaseFirestore","import FirebaseFirestoreSwift","","extension Container {","","  \/\/\/ Determines whether to use the Firebase Local Emulator Suite.","  \/\/\/ To use the local emulator, go to the active scheme, and add `-useEmulator YES`","  \/\/\/ to the _Arguments Passed On Launch_ section.","  public var useEmulator: Factory<Bool> {","    Factory(self) {","    }","  }","}"],"fileName":"Firebase+Injection.swift","identifier":"01-dependency-injection-with-factory-02-register-firebase-04.swift","type":"file","fileType":"swift","highlights":[{"line":13},{"line":14}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Implementing-MVVM#Add-a-method-to-the-View-Model-for-toggling-the-completion-state-of-a-reminder":{"role":"pseudoSymbol","title":"Add a method to the View Model for toggling the completion state of a reminder","abstract":[{"type":"text","text":"With the basic views for displaying and adding todo items set up, it is time to think about the architecture of the app."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Add-a-method-to-the-View-Model-for-toggling-the-completion-state-of-a-reminder","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-implementing-mvvm#Add-a-method-to-the-View-Model-for-toggling-the-completion-state-of-a-reminder"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Storing-Data-in-Cloud-Firestore":{"role":"project","title":"Storing data in Cloud Firestore","estimatedTime":"25min","abstract":[{"type":"text","text":"With the UI of the application in place, and Firebase set up for local development, it is now time to store data in the cloud."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/02-storing-data-in-cloud-firestore"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Intro-to-Cloud-Firestore":{"role":"article","title":"Cloud Firestore","estimatedTime":"5min","abstract":[{"type":"text","text":"Cloud Firestore is Firebase’s NoSQL cloud database for mobile, web, and server development."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Intro-to-Cloud-Firestore","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/01-intro-to-cloud-firestore"},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Account-Linking#Whats-the-problem":{"role":"pseudoSymbol","title":"What's the problem","abstract":[{"type":"text","text":"Users of your app can now sign in to the app using their Apple ID, but unfortunately, when they do so, any data they might have entered before signing in will disappear. This is probably not what the user expected!"}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Account-Linking#Whats-the-problem","kind":"section","type":"section","url":"\/tutorials\/makeitso\/03-account-linking#Whats-the-problem"},"01-dependency-injection-with-factory-02-register-firebase-05.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","import FirebaseFirestore","import FirebaseFirestoreSwift","","extension Container {","","  \/\/\/ Determines whether to use the Firebase Local Emulator Suite.","  \/\/\/ To use the local emulator, go to the active scheme, and add `-useEmulator YES`","  \/\/\/ to the _Arguments Passed On Launch_ section.","  public var useEmulator: Factory<Bool> {","    Factory(self) {","    }.singleton","  }","}"],"fileName":"Firebase+Injection.swift","identifier":"01-dependency-injection-with-factory-02-register-firebase-05.swift","type":"file","fileType":"swift","highlights":[{"line":14}]},"01-dependency-injection-with-factory.zip":{"checksum":"326efedf4cc1606c9c0b8df832830bc23890caf90f210965c7bb92faf096d5d74dc9808803b398b777f4f71b1ce50e8ba48964aeec11a19d304044289e91bdc3","type":"download","identifier":"01-dependency-injection-with-factory.zip","url":"\/downloads\/01-dependency-injection-with-factory.zip"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Developing-Locally-with-the-Emulator-Suite#Launch-the-Emulator-and-view-the-Emulator-dashboard":{"role":"pseudoSymbol","title":"Launch the Emulator and view the Emulator dashboard","abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite"},{"type":"text","text":" is a set of advanced tools for developers looking to build and test apps locally using Cloud Firestore, Realtime Database, Cloud Storage for Firebase, Authentication, Firebase Hosting, Cloud Functions (beta), Pub\/Sub (beta), and Firebase Extensions (beta). It provides a rich user interface to help you get running and prototyping quickly."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Launch-the-Emulator-and-view-the-Emulator-dashboard","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-developing-locally-with-the-emulator-suite#Launch-the-Emulator-and-view-the-Emulator-dashboard"},"01-dependency-injection-with-factory-04-inject-repository-Repositories+Injection-04.swift":{"syntax":"swift","content":["import Foundation","import Factory","","extension Container {","  public var remindersRepository: Factory<RemindersRepository> {","    self {","    }.singleton","  }","}"],"fileName":"Repositories+Injection.swift","identifier":"01-dependency-injection-with-factory-04-inject-repository-Repositories+Injection-04.swift","type":"file","fileType":"swift","highlights":[{"line":6},{"line":7}]},"01-dependency-injection-with-factory-02-register-firebase-02.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","import FirebaseFirestore","import FirebaseFirestoreSwift","","extension Container {","}"],"fileName":"Firebase+Injection.swift","identifier":"01-dependency-injection-with-factory-02-register-firebase-02.swift","type":"file","fileType":"swift","highlights":[{"line":6},{"line":7},{"line":8}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Anonymous-Auth#Inject-AuthenticationService-into-its-dependants":{"role":"pseudoSymbol","title":"Inject AuthenticationService into its dependants","abstract":[{"type":"text","text":"It seems like MakeItSo meets the bar for an MVP (minimum viable product): users can add new reminders, check them off, change their details, and even delete them. But - as you might have noticed when running the app on two different iOS Simulators - the app is not multi-user capable. What’s worse, it seems like all users can see everyone else’s todo items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Inject-AuthenticationService-into-its-dependants","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-anonymous-auth#Inject-AuthenticationService-into-its-dependants"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Dependency-Injection-with-Factory#Make-Firebase-available-via-Dependency-Injection":{"role":"pseudoSymbol","title":"Make Firebase available via Dependency Injection","abstract":[{"type":"text","text":"Even though "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MakeItSo"}]},{"type":"text","text":" is a relatively simple app, it consists of quite a few components that need to interact with each other: models, views, view models, repositories, and different backend services like Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Make-Firebase-available-via-Dependency-Injection","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-dependency-injection-with-factory#Make-Firebase-available-via-Dependency-Injection"},"doc://com.example.MakeItSo/tutorials/MakeItSo/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase/Building-Reusable-UI-Components":{"role":"article","title":"Building Reusable UI Components","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Building-Reusable-UI-Components","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/creating-a-simple-todo-list-app-with-swiftui-and-firebase\/building-reusable-ui-components"},"doc://com.example.MakeItSo/tutorials/MakeItSo/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase/Storing-Data-in-the-Cloud":{"role":"article","title":"Storing Data in the Cloud","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Storing-Data-in-the-Cloud","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/creating-a-simple-todo-list-app-with-swiftui-and-firebase\/storing-data-in-the-cloud"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Brush-up-the-UI":{"role":"pseudoSymbol","title":"Brush up the UI","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Brush-up-the-UI","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Brush-up-the-UI"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Anonymous-Auth#Take-the-app-for-a-spin-and-experience-its-multi-user-capabilities":{"role":"pseudoSymbol","title":"Take the app for a spin and experience its multi-user capabilities","abstract":[{"type":"text","text":"It seems like MakeItSo meets the bar for an MVP (minimum viable product): users can add new reminders, check them off, change their details, and even delete them. But - as you might have noticed when running the app on two different iOS Simulators - the app is not multi-user capable. What’s worse, it seems like all users can see everyone else’s todo items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Take-the-app-for-a-spin-and-experience-its-multi-user-capabilities","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-anonymous-auth#Take-the-app-for-a-spin-and-experience-its-multi-user-capabilities"},"01-dependency-injection-with-factory-05-inject-repository-MakeItSoApp-01.swift":{"syntax":"swift","content":["import SwiftUI","import FirebaseCore","import FirebaseAuth","import FirebaseFirestore","","class AppDelegate: NSObject, UIApplicationDelegate {","  func application(_ application: UIApplication,","                   didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil) -> Bool {","","    FirebaseApp.configure()","","\/\/    let useEmulator = UserDefaults.standard.bool(forKey: \"useEmulator\")","\/\/    if useEmulator {","\/\/      let settings = Firestore.firestore().settings","\/\/      settings.host = \"localhost:8080\"","\/\/      settings.isSSLEnabled = false","\/\/      Firestore.firestore().settings = settings","\/\/","\/\/      Auth.auth().useEmulator(withHost: \"localhost\", port: 9099)","\/\/    }","","    return true","  }","}","","@main","struct MakeItSoApp: App {","  @UIApplicationDelegateAdaptor(AppDelegate.self) var delegate","  var body: some Scene {","    WindowGroup {","      NavigationStack {","        RemindersListView()","          .navigationTitle(\"Reminders\")","      }","    }","  }","}"],"fileName":"MakeItSoApp.swift","identifier":"01-dependency-injection-with-factory-05-inject-repository-MakeItSoApp-01.swift","type":"file","fileType":"swift","highlights":[{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Extract-Row-View":{"role":"project","title":"Extracting the Reminder Row Into a Separate View","estimatedTime":"15min","abstract":[{"type":"text","text":"SwiftUI’s syntax for describing UIs in a declarative way is quite efficient, and allows you to describe rather complex UIs with relatively little code."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/01-extract-row-view"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI":{"role":"project","title":"Building a Simple Todo List UI","estimatedTime":"25min","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui"},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Account-Linking#Implement-Account-Linking":{"role":"pseudoSymbol","title":"Implement Account Linking","abstract":[{"type":"text","text":"Users of your app can now sign in to the app using their Apple ID, but unfortunately, when they do so, any data they might have entered before signing in will disappear. This is probably not what the user expected!"}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Account-Linking#Implement-Account-Linking","kind":"section","type":"section","url":"\/tutorials\/makeitso\/03-account-linking#Implement-Account-Linking"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Anonymous-Auth#Update-the-RemindersRepository-to-operate-only-on-the-users-data":{"role":"pseudoSymbol","title":"Update the RemindersRepository to operate only on the user's data","abstract":[{"type":"text","text":"It seems like MakeItSo meets the bar for an MVP (minimum viable product): users can add new reminders, check them off, change their details, and even delete them. But - as you might have noticed when running the app on two different iOS Simulators - the app is not multi-user capable. What’s worse, it seems like all users can see everyone else’s todo items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Update-the-RemindersRepository-to-operate-only-on-the-users-data","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-anonymous-auth#Update-the-RemindersRepository-to-operate-only-on-the-users-data"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Sign-in-with-Apple#Enable-the-Sign-in-with-Apple-capability-for-your-app":{"role":"pseudoSymbol","title":"Enable the Sign in with Apple capability for your app","abstract":[{"type":"text","text":"Your app is now capable of storing data on a per-user basis. You achieved this by implementing Firebase Anonymous Authentication in the previous chapter, and then using the anonymous user’s ID to tag their reminders when storing them in Cloud Firestore."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Enable-the-Sign-in-with-Apple-capability-for-your-app","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-sign-in-with-apple#Enable-the-Sign-in-with-Apple-capability-for-your-app"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Dependency-Injection-with-Factory#Use-Dependency-Injection-to-inject-Firebase-into-your-Repository":{"role":"pseudoSymbol","title":"Use Dependency Injection to inject Firebase into your Repository","abstract":[{"type":"text","text":"Even though "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MakeItSo"}]},{"type":"text","text":" is a relatively simple app, it consists of quite a few components that need to interact with each other: models, views, view models, repositories, and different backend services like Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Use-Dependency-Injection-to-inject-Firebase-into-your-Repository","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-dependency-injection-with-factory#Use-Dependency-Injection-to-inject-Firebase-into-your-Repository"},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time":{"role":"project","title":"Retrieving data from Cloud Firestore in real-time","estimatedTime":"25min","abstract":[{"type":"text","text":"Now that you’ve implemented a "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":", and wrote code for storing "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":"s to Firestore, it is time to retrieve reminders from Firestore, so they can be displayed in the app’s UI."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/03-retrieving-data-from-cloud-firestore-in-real-time"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Storing-Data-in-Cloud-Firestore#Implement-a-method-for-adding-new-reminders-to-the-repository":{"role":"pseudoSymbol","title":"Implement a method for adding new reminders to the repository","abstract":[{"type":"text","text":"With the UI of the application in place, and Firebase set up for local development, it is now time to store data in the cloud."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Implement-a-method-for-adding-new-reminders-to-the-repository","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-storing-data-in-cloud-firestore#Implement-a-method-for-adding-new-reminders-to-the-repository"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Extract-Row-View#Make-the-preview-provider-interactive":{"role":"pseudoSymbol","title":"Make the preview provider interactive","abstract":[{"type":"text","text":"SwiftUI’s syntax for describing UIs in a declarative way is quite efficient, and allows you to describe rather complex UIs with relatively little code."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View#Make-the-preview-provider-interactive","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-extract-row-view#Make-the-preview-provider-interactive"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Dependency-Injection-with-Factory#Wrap-up":{"role":"pseudoSymbol","title":"Wrap-up","abstract":[{"type":"text","text":"Even though "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MakeItSo"}]},{"type":"text","text":" is a relatively simple app, it consists of quite a few components that need to interact with each other: models, views, view models, repositories, and different backend services like Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Wrap-up","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-dependency-injection-with-factory#Wrap-up"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Storing-Data-in-Cloud-Firestore#Wrap-up":{"role":"pseudoSymbol","title":"Wrap up","abstract":[{"type":"text","text":"With the UI of the application in place, and Firebase set up for local development, it is now time to store data in the cloud."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Wrap-up","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-storing-data-in-cloud-firestore#Wrap-up"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Anonymous-Auth#Implement-an-AuthenticationService":{"role":"pseudoSymbol","title":"Implement an AuthenticationService","abstract":[{"type":"text","text":"It seems like MakeItSo meets the bar for an MVP (minimum viable product): users can add new reminders, check them off, change their details, and even delete them. But - as you might have noticed when running the app on two different iOS Simulators - the app is not multi-user capable. What’s worse, it seems like all users can see everyone else’s todo items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Implement-an-AuthenticationService","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-anonymous-auth#Implement-an-AuthenticationService"},"01-dependency-injection-with-factory-03-inject-firestore-RemindersRepository-03.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseFirestore","import FirebaseFirestoreSwift","","public class RemindersRepository: ObservableObject {","  \/\/ MARK: - Dependencies","  @Injected(\\.firestore) var firestore","","  @Published","  var reminders = [Reminder]()","","  private var listenerRegistration: ListenerRegistration?","","  init() {","    subscribe()","  }","","  deinit {","    unsubscribe()","  }","","  func subscribe() {","    if listenerRegistration == nil {","      let query = firestore.collection(Reminder.collectionName)","","      listenerRegistration = query","        .addSnapshotListener { [weak self] (querySnapshot, error) in","          guard let documents = querySnapshot?.documents else {","            print(\"No documents\")","            return","          }","","          print(\"Mapping \\(documents.count) documents\")","          self?.reminders = documents.compactMap { queryDocumentSnapshot in","            do {","              return try queryDocumentSnapshot.data(as: Reminder.self)","            }","            catch {","              print(\"Error while trying to map document \\(queryDocumentSnapshot.documentID): \\(error.localizedDescription)\")","              return nil","            }","          }","        }","    }","  }","","  private func unsubscribe() {","    if listenerRegistration != nil {","      listenerRegistration?.remove()","      listenerRegistration = nil","    }","  }","","  func addReminder(_ reminder: Reminder) throws {","    try firestore","      .collection(Reminder.collectionName)","      .addDocument(from: reminder)","  }","","  func updateReminder(_ reminder: Reminder) throws {","    guard let documentId = reminder.id else {","      fatalError(\"Reminder \\(reminder.title) has no document ID.\")","    }","    try firestore","      .collection(Reminder.collectionName)","      .document(documentId)","      .setData(from: reminder, merge: true)","  }","","  func removeReminder(_ reminder: Reminder) {","    guard let documentId = reminder.id else {","      fatalError(\"Reminder \\(reminder.title) has no document ID.\")","    }","    firestore","      .collection(Reminder.collectionName)","      .document(documentId)","      .delete()","  }","","}"],"fileName":"RemindersRepository.swift","identifier":"01-dependency-injection-with-factory-03-inject-firestore-RemindersRepository-03.swift","type":"file","fileType":"swift","highlights":[{"line":25},{"line":56},{"line":65},{"line":75}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/05-Deleting-Data-from-Cloud-Firestore":{"role":"project","title":"Deleting data from Cloud Firestore","estimatedTime":"15min","abstract":[{"type":"text","text":"In this chapter of the tutorial, you’ve written code for creating, reading, and updating data in Cloud Firestore. There is one more data operation that is common for many apps: deleting data."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/05-Deleting-Data-from-Cloud-Firestore","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/05-deleting-data-from-cloud-firestore"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Storing-Data-in-Cloud-Firestore#Connect-the-view-model-to-the-repository":{"role":"pseudoSymbol","title":"Connect the view model to the repository","abstract":[{"type":"text","text":"With the UI of the application in place, and Firebase set up for local development, it is now time to store data in the cloud."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Connect-the-view-model-to-the-repository","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-storing-data-in-cloud-firestore#Connect-the-view-model-to-the-repository"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Implementing-MVVM#Organise-the-Project-Files":{"role":"pseudoSymbol","title":"Organise the Project Files","abstract":[{"type":"text","text":"With the basic views for displaying and adding todo items set up, it is time to think about the architecture of the app."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Organise-the-Project-Files","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-implementing-mvvm#Organise-the-Project-Files"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Extract-Row-View#Extract-the-view":{"role":"pseudoSymbol","title":"Extract the view","abstract":[{"type":"text","text":"SwiftUI’s syntax for describing UIs in a declarative way is quite efficient, and allows you to describe rather complex UIs with relatively little code."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View#Extract-the-view","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-extract-row-view#Extract-the-view"},"01-dependency-injection-with-factory-01-add-factory-02.png":{"alt":null,"type":"image","identifier":"01-dependency-injection-with-factory-01-add-factory-02.png","variants":[{"url":"\/images\/01-dependency-injection-with-factory-01-add-factory-02@2x.png","traits":["2x","light"]},{"url":"\/images\/01-dependency-injection-with-factory-01-add-factory-02~dark@2x.png","traits":["2x","dark"]}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Create-a-Reminder-Model-and-Add-some-Test-Data":{"role":"pseudoSymbol","title":"Create a Reminder Model and Add some Test Data","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Create-a-Reminder-Model-and-Add-some-Test-Data","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Create-a-Reminder-Model-and-Add-some-Test-Data"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Extract-Row-View#Customise-the-preview":{"role":"pseudoSymbol","title":"Customise the preview","abstract":[{"type":"text","text":"SwiftUI’s syntax for describing UIs in a declarative way is quite efficient, and allows you to describe rather complex UIs with relatively little code."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View#Customise-the-preview","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-extract-row-view#Customise-the-preview"}}}
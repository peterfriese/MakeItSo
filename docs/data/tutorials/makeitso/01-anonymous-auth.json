{"variants":[{"paths":["\/tutorials\/makeitso\/01-anonymous-auth"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It seems like MakeItSo meets the bar for an MVP (minimum viable product): users can add new reminders, check them off, change their details, and even delete them. But - as you might have noticed when running the app on two different iOS Simulators - the app is not multi-user capable. What’s worse, it seems like all users can see everyone else’s todo items."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That’s definitely not what most users expect from a todo list app! Your app needs a way to store data on a per-user basis."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this chapter, you will implement user authentication, allowing users to sign in to your app with their preferred authentication mechanism. Firebase Authentication supports a broad range or authentication providers: signing in with email and password, email and link authentication, Sign in with Apple, Google Sign-In, phone number authentication, to name just a few."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Download the project files to begin building this project, and follow the steps below."}]}],"estimatedTimeInMinutes":25,"title":"Implementing guest users with Firebase Anonymous Authentication","image":"hero-anonymous-auth.png","xcodeRequirement":"Xcode 14","chapter":"Authenticating Users","kind":"hero","backgroundImage":"hero-anonymous-auth.png","projectFiles":"01-anonymous-auth.zip"},{"kind":"tasks","tasks":[{"anchor":"Download-the-project-files","title":"Download the project files","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Since this chapter relies on a relatively complex UI for authenticating the user, you "},{"type":"strong","inlineContent":[{"type":"text","text":"NEED"}]},{"type":"text","text":" to use the starter project provided in the project files zip file. It contains a number of screens (settings, user profile, login, and sign-up), as well as the corresponding view models. In this first section, you will walk through the provided source code files to understand the code and how the individual parts are connected."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the following sections, you will then implement a guest account system based on Firebase Anonymous Authentication."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In the following steps, you will navigate through the new screens of the app. You can read the code here in this tutorial, or open the files in Xcode."}]},{"code":"01-anonymous-auth-01-walkthrough-RemindersListView-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Take a look at "},{"type":"codeVoice","code":"RemindersListView.swift"},{"type":"text","text":". It now includes a gear-shaped toolbar button that will open the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Settings"}]},{"type":"text","text":" screen of the app."}]}],"caption":[],"type":"step","runtimePreview":"01-anonymous-auth-01-walkthrough-RemindersListView-01.png","media":null},{"code":"01-anonymous-auth-01-walkthrough-SettingsView-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"SettingsView"},{"type":"text","text":" includes a couple of authentication-related UI elements: users can navigate to the "},{"type":"codeVoice","code":"ProfileView"},{"type":"text","text":" to inspect their account."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"There also is aa button for logging out or signing in, dependin on whether or not a user is signed in."}]}],"type":"step","runtimePreview":"01-anonymous-auth-01-walkthrough-SettingsView-01.png","media":null},{"code":"01-anonymous-auth-01-walkthrough-UserProfileView-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"UserProfileView"},{"type":"text","text":" features a SwiftUI form for displaying some of the user account’s details, such as their email address, full name, the user ID, and some information about the authentication provider used to sign in."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The screen also has two buttons: one for signing out, the other one for deleting the account."}]}],"type":"step","runtimePreview":"01-anonymous-auth-01-walkthrough-UserProfileView-01.png","media":null},{"code":"01-anonymous-auth-01-walkthrough-SignupView-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"SignupView"},{"type":"text","text":" will be shown to the user when they tap on the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Sign up"}]},{"type":"text","text":" button on the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Settings"}]},{"type":"text","text":" screen."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The reason for showing the sign-up screen first (rather than the login screen) is that most users will not yet have an account, so they are more likely going to want to create a new account. You can see that the screen has buttons for signin in with Google and Apple. There also is a section for signin up with email and password, but it will only become visible once the user taps on the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"More sign-in options"}]},{"type":"text","text":" button."}]}],"type":"step","runtimePreview":"01-anonymous-auth-01-walkthrough-SignupView-01.png","media":null},{"code":"01-anonymous-auth-01-walkthrough-LoginView-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When the user taps on the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Already have an account? Log in"}]},{"type":"text","text":" button, they will be taken to the "},{"type":"codeVoice","code":"LoginView"},{"type":"text","text":". This looks very similar to the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Sign up"}]},{"type":"text","text":" screen."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The main differences are the different labels on the Sign in with Apple and Google Sign-In buttons. Also, the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"sign in with email and password"}]},{"type":"text","text":" section on this screen doesn’t have a password confirmation field (like the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Sign up"}]},{"type":"text","text":" screen)."}]}],"type":"step","runtimePreview":"01-anonymous-auth-01-walkthrough-LoginView-01.png","media":null},{"code":"01-anonymous-auth-01-walkthrough-AuthenticationView-00","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Switching between the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"sign up"}]},{"type":"text","text":" and "},{"type":"emphasis","inlineContent":[{"type":"text","text":"log in"}]},{"type":"text","text":" flows is handled by the "},{"type":"codeVoice","code":"AuthenticationView"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null}]},{"anchor":"Implement-an-AuthenticationService","title":"Implement an AuthenticationService","contentSection":[{"kind":"contentAndMedia","content":[],"mediaPosition":"trailing"}],"stepsSection":[{"code":"01-anonymous-auth-02-Firebase+Injection-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In "},{"type":"codeVoice","code":"Firebase+Injection.swift"},{"type":"text","text":", add a factory for Firebase Auth."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-anonymous-auth-02-AuthenticationService-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Find the "},{"type":"codeVoice","code":"Features\/Reminders\/Authentication\/Services"},{"type":"text","text":" folder in the Xcode’s prooject navigator, and create a new file named "},{"type":"codeVoice","code":"AuthenticationService.swift"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-anonymous-auth-02-AuthenticationService-02.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Import "},{"type":"codeVoice","code":"FirebaseAuth"},{"type":"text","text":", and create a new class named "},{"type":"codeVoice","code":"AuthenticationService"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-anonymous-auth-02-AuthenticationService-02a.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Import "},{"type":"codeVoice","code":"Factory"},{"type":"text","text":", and inject an instance of Firebase Auth."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-anonymous-auth-02-AuthenticationService-03.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define a property named "},{"type":"codeVoice","code":"user"},{"type":"text","text":". This property will hold the signed in user."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Mark the property as "},{"type":"codeVoice","code":"@Published"},{"type":"text","text":", so that you can later connect the view models to this property and make sure they get notified whenever a user signs in or out."}]}],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"To keep track of the signed in Firebase user, you will now implement an authentication state listener. This listener will be called whenever the authenticated user changes."}]},{"code":"01-anonymous-auth-02-AuthenticationService-04.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define a new private property to hold a reference to an "},{"type":"codeVoice","code":"AuthStateDidChangeListenerHandle"},{"type":"text","text":", and create a function "},{"type":"codeVoice","code":"registerAuthStateHandler"},{"type":"text","text":" for registering the handler."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-anonymous-auth-02-AuthenticationService-05.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Inside "},{"type":"codeVoice","code":"registerAuthStateHandler"},{"type":"text","text":", call "},{"type":"codeVoice","code":"auth.addStateDidChangeListener"},{"type":"text","text":" to register a closure that will be called whenever the authentication state changes."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-anonymous-auth-02-AuthenticationService-06.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When the closure is called, it will receive a "},{"type":"codeVoice","code":"user"},{"type":"text","text":" object."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If this object is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", it means that the user has signed out. Assign the "},{"type":"codeVoice","code":"user"},{"type":"text","text":" to the published "},{"type":"codeVoice","code":"user"},{"type":"text","text":" property on the "},{"type":"codeVoice","code":"AuthenticationService"},{"type":"text","text":". Any observers listening to this publisher will receive an event, and can consequently perform some logic (such as updating the UI)."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"code":"01-anonymous-auth-02-AuthenticationService-07.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create an initialiser, and call "},{"type":"codeVoice","code":"registerAuthStateHandler"},{"type":"text","text":". This ensures the authentication state handler will be activated once the "},{"type":"codeVoice","code":"AuthenticationService"},{"type":"text","text":" is created."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, you will implement anonymous authentication. This is an authentication mechanism that create a Firebase user account without requiring the user to provide any credentials. Firebase will generate a completely random UUID and create a new user account with this ID."}]},{"code":"01-anonymous-auth-02-AuthenticationService-08.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To keep your code nicely separated, create an extension on "},{"type":"codeVoice","code":"AuthenticationService"},{"type":"text","text":", and implement a method "},{"type":"codeVoice","code":"signInAnonymously"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-anonymous-auth-02-AuthenticationService-09.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Check if a user is already signed in."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This will be the case if the user has already used the app before, or has signed in using one of the other authentication providers that your apps supports."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"code":"01-anonymous-auth-02-AuthenticationService-10.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If no user is signed in, call "},{"type":"codeVoice","code":"auth.signInAnonymously"},{"type":"text","text":" to sign the user in anonymously."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-anonymous-auth-02-AuthenticationService-11.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Call "},{"type":"codeVoice","code":"signInAnonymously"},{"type":"text","text":" in the initialiser to ensure there is always a signed in user."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-anonymous-auth-02-AuthenticationService-12.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add some log statements to make it easier to see what’s going on."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"To complete the picture, add methods for signing out and deleting the currently signed in user. These are required for some of the authentication screens you saw ealier in this chapter."}]},{"code":"01-anonymous-auth-02-AuthenticationService-13.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a method "},{"type":"codeVoice","code":"signOut"},{"type":"text","text":" for signing out."}]}],"caption":[{"style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"After signing our, "},{"type":"emphasis","inlineContent":[{"type":"text","text":"immediately"}]},{"type":"text","text":" sign back in again anonymously. This is to make sure that the app always has a signed in user that it can use to key the user’s data to when writing to Firestore."}]}],"type":"aside","name":"Important"}],"type":"step","runtimePreview":null,"media":null},{"code":"01-anonymous-auth-02-AuthenticationService-14.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a method "},{"type":"codeVoice","code":"deleteAccount"},{"type":"text","text":" for deleting the user account."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null}]},{"anchor":"Register-AuthenticationService-with-the-Dependency-Injection-container","title":"Register AuthenticationService with the Dependency Injection container","contentSection":[{"kind":"contentAndMedia","content":[],"mediaPosition":"trailing"}],"stepsSection":[{"code":"01-anonymous-auth-03-AuthenticationService+Injection-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In the "},{"type":"codeVoice","code":"Features\/Reminders\/Authentication\/Services"},{"type":"text","text":" folder, create a new file named "},{"type":"codeVoice","code":"AuthenticationService+Injection.swift"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-anonymous-auth-03-AuthenticationService+Injection-02.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Import "},{"type":"codeVoice","code":"Factory"},{"type":"text","text":", and create a Swift extension on "},{"type":"codeVoice","code":"Container"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-anonymous-auth-03-AuthenticationService+Injection-03.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new factory method named "},{"type":"codeVoice","code":"authenticationService"},{"type":"text","text":" that will produce instances of "},{"type":"codeVoice","code":"AuthenticationService"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-anonymous-auth-03-AuthenticationService+Injection-04.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Instantiate a factory, and configure it to produce a "},{"type":"codeVoice","code":"singleton"},{"type":"text","text":"."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Remember: "},{"type":"codeVoice","code":"self { }"},{"type":"text","text":" is a shortcut for calling "},{"type":"codeVoice","code":"Factory(self) { }"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"code":"01-anonymous-auth-03-AuthenticationService+Injection-05.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Inside the factory, reate an instance of "},{"type":"codeVoice","code":"AuthenticationService"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null}]},{"anchor":"Inject-AuthenticationService-into-its-dependants","title":"Inject AuthenticationService into its dependants","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Your app has a couple of objects that depend on "},{"type":"codeVoice","code":"AuthenticationService"},{"type":"text","text":": the "},{"type":"codeVoice","code":"AppDelegate"},{"type":"text","text":", "},{"type":"codeVoice","code":"AuthenticationViewModel"},{"type":"text","text":", "},{"type":"codeVoice","code":"UserProfileViewModel"},{"type":"text","text":", "},{"type":"codeVoice","code":"SettingsViewModel"},{"type":"text","text":", and "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this section, you will inject the singleton instance of "},{"type":"codeVoice","code":"AuthenticationService"},{"type":"text","text":" you just registered into all of these."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Start by injecting the "},{"type":"codeVoice","code":"AppDelegate"},{"type":"text","text":"."}]},{"code":"01-anonymous-auth-04-MakeItSoApp-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In "},{"type":"codeVoice","code":"MakeItSoApp.swift"},{"type":"text","text":", use the "},{"type":"codeVoice","code":"@LazyInjected"},{"type":"text","text":" property wrapper to inject "},{"type":"codeVoice","code":"AuthenticationService"},{"type":"text","text":" into the "},{"type":"codeVoice","code":"AppDelegate"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-anonymous-auth-04-MakeItSoApp-02.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In "},{"type":"codeVoice","code":"didFinishLaunchingWithOptions"},{"type":"text","text":", call "},{"type":"codeVoice","code":"authenticationService.signInAnonymously"},{"type":"text","text":" to sign the user anonymously in once the application starts."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Inject the "},{"type":"codeVoice","code":"AuthenticationService"},{"type":"text","text":" into "},{"type":"codeVoice","code":"AuthenticationViewModel"},{"type":"text","text":"."}]},{"code":"01-anonymous-auth-04-AuthenticationViewModel-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In "},{"type":"codeVoice","code":"AuthenticationViewModel.swift"},{"type":"text","text":", use the "},{"type":"codeVoice","code":"@Injected"},{"type":"text","text":" property wrapper to inject "},{"type":"codeVoice","code":"AuthenticationService"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-anonymous-auth-04-AuthenticationViewModel-02.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"At the end of "},{"type":"codeVoice","code":"AuthenticationViewModel.swift"},{"type":"text","text":", you can now use this instance to call the "},{"type":"codeVoice","code":"deleteAccount"},{"type":"text","text":" and "},{"type":"codeVoice","code":"signOut"},{"type":"text","text":" methods on the service."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Inject the "},{"type":"codeVoice","code":"AuthenticationService"},{"type":"text","text":" into "},{"type":"codeVoice","code":"UserProfileViewModel"},{"type":"text","text":"."}]},{"code":"01-anonymous-auth-04-UserProfileViewModel-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In "},{"type":"codeVoice","code":"UserProfileViewModel.swift"},{"type":"text","text":", use the "},{"type":"codeVoice","code":"@Injected"},{"type":"text","text":" property wrapper to inject "},{"type":"codeVoice","code":"AuthenticationService"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-anonymous-auth-04-UserProfileViewModel-02.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In the initialiser, use the "},{"type":"codeVoice","code":"assign"},{"type":"text","text":" operator to keep the local "},{"type":"codeVoice","code":"user"},{"type":"text","text":" property in sync with the published "},{"type":"codeVoice","code":"user"},{"type":"text","text":" property on the "},{"type":"codeVoice","code":"AuthenticationService"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-anonymous-auth-04-UserProfileViewModel-03.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"At the end of "},{"type":"codeVoice","code":"UserProfileViewModel.swift"},{"type":"text","text":", you can now use this instance to call the "},{"type":"codeVoice","code":"deleteAccount"},{"type":"text","text":" and "},{"type":"codeVoice","code":"signOut"},{"type":"text","text":" methods on the service."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Inject the "},{"type":"codeVoice","code":"AuthenticationService"},{"type":"text","text":" into "},{"type":"codeVoice","code":"SettingsViewModel"},{"type":"text","text":"."}]},{"code":"01-anonymous-auth-04-SettingsViewModel-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In "},{"type":"codeVoice","code":"SettingsViewModel.swift"},{"type":"text","text":", use the "},{"type":"codeVoice","code":"@Injected"},{"type":"text","text":" property wrapper to inject "},{"type":"codeVoice","code":"AuthenticationService"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-anonymous-auth-04-SettingsViewModel-02.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In the initialiser, use the "},{"type":"codeVoice","code":"assign"},{"type":"text","text":" operator to keep the local "},{"type":"codeVoice","code":"user"},{"type":"text","text":" property in sync with the published "},{"type":"codeVoice","code":"user"},{"type":"text","text":" property on the "},{"type":"codeVoice","code":"AuthenticationService"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-anonymous-auth-04-SettingsViewModel-03.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"At the end of "},{"type":"codeVoice","code":"SettingsViewModel.swift"},{"type":"text","text":", you can now use this instance to call the "},{"type":"codeVoice","code":"signOut"},{"type":"text","text":" method on the service."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, inject the "},{"type":"codeVoice","code":"AuthenticationService"},{"type":"text","text":" into the "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":"."}]},{"code":"01-anonymous-auth-04-RemindersRepository-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In "},{"type":"codeVoice","code":"RemindersRepository.swift"},{"type":"text","text":", use the "},{"type":"codeVoice","code":"@Injected"},{"type":"text","text":" property wrapper to inject "},{"type":"codeVoice","code":"AuthenticationService"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-anonymous-auth-04-RemindersRepository-02.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a published propery for the signed-in user, and connect it to the "},{"type":"codeVoice","code":"user"},{"type":"text","text":" property on "},{"type":"codeVoice","code":"AuthenticationService"},{"type":"text","text":"."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In the next section, you will use this user to make sure data that is written to and read from Firestore belongs to the signed in user."}]}],"type":"step","runtimePreview":null,"media":null}]},{"anchor":"Add-a-userId-property-to-the-Reminder-struct","title":"Add a userId property to the Reminder struct","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":" you created in an earlier chapter of this tutorial didn’t take the signed in user into consideration. Instead, it just stored all "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":" documents into the top-level "},{"type":"codeVoice","code":"reminders"},{"type":"text","text":" collection in Firestore. This means that all users see the same reminders."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To make sure users can only see their own reminders, you need to add a "},{"type":"codeVoice","code":"userId"},{"type":"text","text":" attribute to the "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":". In the next section, you will then set this attribute when storing new reminders to Firestore."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"01-anonymous-auth-05-Reminder-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a new property named "},{"type":"codeVoice","code":"userId"},{"type":"text","text":" to the "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":" struct, and make sure to mark it as optional."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null}]},{"anchor":"Update-the-RemindersRepository-to-operate-only-on-the-users-data","title":"Update the RemindersRepository to operate only on the user's data","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":" has a property for the user’s ID, you can update "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":" to fill this field when storing the user’s reminders into Firestore. Likewise, you will need to update the query you use to fetch the user’s reminders from Firestore."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"01-anonymous-auth-05-RemindersRepository-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Make sure that, when the user signs in or out, the snapshot listener is first unregistered, and then a new one is registered for the newly signed-in user. This is to make sure your app always uses the signed-in user’s user ID when fetching or writing data."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To achieve this, set up a Combine pipeline on the "},{"type":"codeVoice","code":"$user"},{"type":"text","text":" publisher. When the pipeline receives an event (i.e., the "},{"type":"codeVoice","code":"user"},{"type":"text","text":" property has changed), first unsubscribe, and then subscribe with the new user."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"01-anonymous-auth-05-RemindersRepository-02.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Unwrap the "},{"type":"codeVoice","code":"user"},{"type":"text","text":" object. If it is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", use the "},{"type":"codeVoice","code":"user"},{"type":"text","text":" property on the "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-anonymous-auth-05-RemindersRepository-03.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Update the query and include a confition that compares the "},{"type":"codeVoice","code":"userId"},{"type":"text","text":" attribute on the Firestore document to the "},{"type":"codeVoice","code":"uid"},{"type":"text","text":" property of the signed-in user. This way, you will filter only the user’s reminders."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, make sure to include the user’s "},{"type":"codeVoice","code":"uid"},{"type":"text","text":" when storing their reminders in Firestore."}]},{"code":"01-anonymous-auth-05-RemindersRepository-04.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In the "},{"type":"codeVoice","code":"addReminder"},{"type":"text","text":" method, first make a mutable copy of the reminder. Then, set the "},{"type":"codeVoice","code":"userId"},{"type":"text","text":" property of the mutable copy to the "},{"type":"codeVoice","code":"uid"},{"type":"text","text":" of the signed-in user."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null}]},{"anchor":"Take-the-app-for-a-spin-and-experience-its-multi-user-capabilities","title":"Take the app for a spin and experience its multi-user capabilities","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Congratulations! In this chapter, you implemented anonymous authentication for your app and updated the "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":" to use the signed-in user’s ID to assign all their data to them. This is a major step on turning your app into a true multi-user app."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Run the app on an iOS Simulator, and try all the features."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Note, that after signing out, you will be assigned a new anonymous user ID."}]}],"type":"step","runtimePreview":null,"media":"01-anonymous-auth-final-demo.mp4"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Run the app on a second Simulator. Notice how both Simulators will use two different anonymous users, and that they will each have their own set of data."}]}],"caption":[{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The easiest way to achieve this is to launch the app from Xcode on the first Simulator, and then use the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Debug > Detach"}]},{"type":"text","text":" menu item to detach the debugger. This will prevent the app from being terminated. You can then choose a different Simulator launch target, and launch the app on this second Simulator. This approach makes sure the app gets passed the launch argument to connect to the Firebase Emulator. If you’re connecting to the Firebase project in the cloud, you won’t need to detach the app from the debugger, as it won’t need to reach the launch argument."}]}],"type":"aside","name":"Tip"}],"type":"step","runtimePreview":null,"media":null}]}]},{"action":{"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"isActive":true,"type":"reference","identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple","overridingTitle":"Get started"},"featuredEyebrow":"Tutorial","kind":"callToAction","title":"Sign in with Apple and Firebase Authentication","abstract":[{"type":"text","text":"Your app is now capable of storing data on a per-user basis. You achieved this by implementing Firebase Anonymous Authentication in the previous chapter, and then using the anonymous user’s ID to tag their reminders when storing them in Cloud Firestore."}]}],"identifier":{"url":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth","interfaceLanguage":"swift"},"kind":"project","metadata":{"title":"Implementing guest users with Firebase Anonymous Authentication","categoryPathComponent":"MakeItSo","role":"project","category":"MakeItSo"},"hierarchy":{"modules":[{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Building-a-Simple-UI","projects":[{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Create-a-New-Project"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Create-a-Reminder-Model-and-Add-some-Test-Data"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Display-a-List-of-Reminders"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Mark-Reminders-as-completed"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Create-a-Dialog-for-Adding-New-Reminders"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Pass-Data-From-the-Child-View"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Present-the-Add-Reminder-Dialog"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Brush-up-the-UI"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Wrap-Up"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Organise-the-Project-Files"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Create-a-View-Model-and-connect-it-to-the-RemindersListView"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Add-a-method-to-the-View-Model-for-adding-new-reminders"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Add-a-method-to-the-View-Model-for-toggling-the-completion-state-of-a-reminder"}]}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Building-Reusable-UI-Components","projects":[{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View#Title"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Create-a-Styleable-Toggle","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Create-a-Styleable-Toggle#Title"}]}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Connecting-Your-App-to-Firebase","projects":[{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Create-a-New-Firebase-Project"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Register-Your-App-with-Firebase"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Add-a-Firebase-Configuration-File"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Add-Firebase-SDKs-to-Your-App"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Initialize-Firebase-in-Your-App"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Launch-the-App-to-Verify-Setup"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Install-the-Firebase-CLI"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Connect-to-your-Firebase-project-and-enable-the-Emulator-Suite"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Launch-the-Emulator-and-view-the-Emulator-dashboard"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Connect-your-app-to-the-Emulator-Suite"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Use-launch-arguments-to-switch-between-the-Emulator-and-your-Firebase-project"}]}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Storing-Data-in-the-Cloud","projects":[{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Intro-to-Cloud-Firestore","sections":[]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Implement-a-repository"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Implement-a-method-for-adding-new-reminders-to-the-repository"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Conform-Reminder-to-Codable"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Connect-the-view-model-to-the-repository"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Wrap-up"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Implement-a-snapshot-listener"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Manage-the-lifecycle-of-the-snapshot-listener"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Connect-the-view-model"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Run-the-app-to-experience-real-time-sync"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Clean-up"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/04-Updating-Data-in-Cloud-Firestore","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/04-Updating-Data-in-Cloud-Firestore#Mark-reminders-as-completed"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/04-Updating-Data-in-Cloud-Firestore#Edit-reminders"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/05-Deleting-Data-from-Cloud-Firestore","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/05-Deleting-Data-from-Cloud-Firestore#Implement-a-method-for-removing-a-single-reminder-from-the-repository"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/05-Deleting-Data-from-Cloud-Firestore#Add-a-method-for-deleting-reminders-to-the-view-model"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/05-Deleting-Data-from-Cloud-Firestore#Implement-a-swipe-action-for-deleteing-reminders-from-the-list-view"}]}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Dependency-Injection","projects":[{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Add-the-Factory-SDK-to-your-project"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Make-Firebase-available-via-Dependency-Injection"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Use-Dependency-Injection-to-inject-Firebase-into-your-Repository"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Inject-RemindersRepository-into-RemindersListViewModel"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Wrap-up"}]}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Authenticating-Users","projects":[{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/00-Intro-to-Firebase-Authentication","sections":[]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Download-the-project-files"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Implement-an-AuthenticationService"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Register-AuthenticationService-with-the-Dependency-Injection-container"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Inject-AuthenticationService-into-its-dependants"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Add-a-userId-property-to-the-Reminder-struct"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Update-the-RemindersRepository-to-operate-only-on-the-users-data"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Take-the-app-for-a-spin-and-experience-its-multi-user-capabilities"}]},{"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple","sections":[{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Connect-the-app-to-your-Apple-developer-account"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Enable-the-Sign-in-with-Apple-capability-for-your-app"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Implement-Sign-in-with-Apple"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Sign-in-to-Firebase-and-create-a-new-user-account"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Connect-the-UI"},{"kind":"task","reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Run-the-app"}]}]}],"reference":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo","paths":[["doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo","doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase","doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Authenticating-Users"]]},"references":{"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Developing-Locally-with-the-Emulator-Suite#Connect-your-app-to-the-Emulator-Suite":{"role":"pseudoSymbol","title":"Connect your app to the Emulator Suite","abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite"},{"type":"text","text":" is a set of advanced tools for developers looking to build and test apps locally using Cloud Firestore, Realtime Database, Cloud Storage for Firebase, Authentication, Firebase Hosting, Cloud Functions (beta), Pub\/Sub (beta), and Firebase Extensions (beta). It provides a rich user interface to help you get running and prototyping quickly."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Connect-your-app-to-the-Emulator-Suite","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-developing-locally-with-the-emulator-suite#Connect-your-app-to-the-Emulator-Suite"},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Clean-up":{"role":"pseudoSymbol","title":"Clean-up","abstract":[{"type":"text","text":"Now that you’ve implemented a "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":", and wrote code for storing "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":"s to Firestore, it is time to retrieve reminders from Firestore, so they can be displayed in the app’s UI."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Clean-up","kind":"section","type":"section","url":"\/tutorials\/makeitso\/03-retrieving-data-from-cloud-firestore-in-real-time#Clean-up"},"01-anonymous-auth-02-AuthenticationService-11.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","","public class AuthenticationService {","  @Injected(\\.auth) private var auth","  @Published var user: User?","","  private var authStateHandler: AuthStateDidChangeListenerHandle?","","  init() {","    registerAuthStateHandler()","    signInAnonymously()","  }","","  func registerAuthStateHandler() {","    if authStateHandler == nil {","      authStateHandler = auth.addStateDidChangeListener { auth, user in","        self.user = user","      }","    }","  }","","}","","\/\/ MARK: - Sign in anonymously","","extension AuthenticationService {","  func signInAnonymously() {","    if auth.currentUser == nil {","      auth.signInAnonymously()","    }","  }","}"],"fileName":"AuthenticationService.swift","identifier":"01-anonymous-auth-02-AuthenticationService-11.swift","type":"file","fileType":"swift","highlights":[{"line":13}]},"01-anonymous-auth-04-AuthenticationViewModel-01.swift":{"syntax":"swift","content":["import Foundation","import Combine","import Factory","import FirebaseCore","import FirebaseAuth","","enum AuthenticationState {","  case unauthenticated","  case authenticating","  case authenticated","}","","enum AuthenticationFlow {","  case login","  case signUp","}","","@MainActor","class AuthenticationViewModel: ObservableObject {","  @Injected(\\.authenticationService)","  var authenticationService","","  @Published var email = \"\"","  @Published var password = \"\"","  @Published var confirmPassword = \"\"","","  @Published var flow: AuthenticationFlow = .signUp","  @Published var isOtherAuthOptionsVisible = false","","  @Published var isValid = false","  @Published var authenticationState: AuthenticationState = .unauthenticated","  @Published var errorMessage = \"\"","  @Published var user: User?","  @Published var displayName = \"\"","","  @Published var isGuestUser = false","  @Published var isVerified = false","","  private var cancellables = Set<AnyCancellable>()","","  init(flow: AuthenticationFlow = .signUp) {","    self.flow = flow","","    $flow","      .combineLatest($email, $password, $confirmPassword)","      .map { flow, email, password, confirmPassword in","        flow == .login","        ? !(email.isEmpty || password.isEmpty)","        : !(email.isEmpty || password.isEmpty || confirmPassword.isEmpty)","      }","      .assign(to: &$isValid)","","    $user","      .compactMap { user in","        user?.isAnonymous","      }","      .assign(to: &$isGuestUser)","","    $user","      .compactMap { user in","        user?.isEmailVerified","      }","      .assign(to: &$isVerified)","","    $user","      .compactMap { user in","        user?.displayName ?? user?.email ?? \"\"","      }","      .assign(to: &$displayName)","  }","","  func switchFlow() {","    flow = flow == .login ? .signUp : .login","    errorMessage = \"\"","  }","","  func reset() {","    flow = .login","    email = \"\"","    password = \"\"","    confirmPassword = \"\"","  }","","","  \/\/ MARK: - Account Deletion","  func deleteAccount() async -> Bool {","    fatalError(\"Not implemented yet\")","  }","","  \/\/ MARK: - Signing out","  func signOut() {","    fatalError(\"Not implemented yet\")","  }","}"],"fileName":"AuthenticationViewModel.swift","identifier":"01-anonymous-auth-04-AuthenticationViewModel-01.swift","type":"file","fileType":"swift","highlights":[{"line":20},{"line":21},{"line":22}]},"01-anonymous-auth-04-MakeItSoApp-02.swift":{"syntax":"swift","content":["import SwiftUI","import Factory","import FirebaseCore","import FirebaseAuth","import FirebaseFirestore","","class AppDelegate: NSObject, UIApplicationDelegate {","  @LazyInjected(\\.authenticationService)","  private var authenticationService","","  func application(_ application: UIApplication,","                   didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil) -> Bool {","","    FirebaseApp.configure()","    authenticationService.signInAnonymously()","    return true","  }","}","","@main","struct MakeItSoApp: App {","  @UIApplicationDelegateAdaptor(AppDelegate.self) var delegate","  var body: some Scene {","    WindowGroup {","      NavigationStack {","        RemindersListView()","          .navigationTitle(\"Reminders\")","      }","    }","  }","}"],"fileName":"MakeItSoApp.swift","identifier":"01-anonymous-auth-04-MakeItSoApp-02.swift","type":"file","fileType":"swift","highlights":[{"line":15}]},"01-anonymous-auth-01-walkthrough-SignupView-01.png":{"alt":null,"type":"image","identifier":"01-anonymous-auth-01-walkthrough-SignupView-01.png","variants":[{"url":"\/images\/01-anonymous-auth-01-walkthrough-SignupView-01@2x.png","traits":["2x","light"]}]},"01-anonymous-auth-03-AuthenticationService+Injection-02.swift":{"syntax":"swift","content":["import Foundation","import Factory","","extension Container {","}"],"fileName":"AuthenticationService+Injection.swift","identifier":"01-anonymous-auth-03-AuthenticationService+Injection-02.swift","type":"file","fileType":"swift","highlights":[{"line":2},{"line":3},{"line":4},{"line":5}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Developing-Locally-with-the-Emulator-Suite":{"role":"project","title":"Developing locally with the Emulator Suite","estimatedTime":"25min","abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite"},{"type":"text","text":" is a set of advanced tools for developers looking to build and test apps locally using Cloud Firestore, Realtime Database, Cloud Storage for Firebase, Authentication, Firebase Hosting, Cloud Functions (beta), Pub\/Sub (beta), and Firebase Extensions (beta). It provides a rich user interface to help you get running and prototyping quickly."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/02-developing-locally-with-the-emulator-suite"},"01-anonymous-auth-01-walkthrough-UserProfileView-01.png":{"alt":null,"type":"image","identifier":"01-anonymous-auth-01-walkthrough-UserProfileView-01.png","variants":[{"url":"\/images\/01-anonymous-auth-01-walkthrough-UserProfileView-01@2x.png","traits":["2x","light"]}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Create-a-Styleable-Toggle#Title":{"role":"pseudoSymbol","title":"Title","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Create-a-Styleable-Toggle#Title","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-create-a-styleable-toggle#Title"},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time":{"role":"project","title":"Retrieving data from Cloud Firestore in real-time","estimatedTime":"25min","abstract":[{"type":"text","text":"Now that you’ve implemented a "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":", and wrote code for storing "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":"s to Firestore, it is time to retrieve reminders from Firestore, so they can be displayed in the app’s UI."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/03-retrieving-data-from-cloud-firestore-in-real-time"},"01-anonymous-auth-02-AuthenticationService-09.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","","public class AuthenticationService {","  @Injected(\\.auth) private var auth","  @Published var user: User?","","  private var authStateHandler: AuthStateDidChangeListenerHandle?","","  init() {","    registerAuthStateHandler()","  }","","  func registerAuthStateHandler() {","    if authStateHandler == nil {","      authStateHandler = auth.addStateDidChangeListener { auth, user in","        self.user = user","      }","    }","  }","","}","","\/\/ MARK: - Sign in anonymously","","extension AuthenticationService {","  func signInAnonymously() {","    if auth.currentUser == nil {","    }","  }","}"],"fileName":"AuthenticationService.swift","identifier":"01-anonymous-auth-02-AuthenticationService-09.swift","type":"file","fileType":"swift","highlights":[{"line":29},{"line":30}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Present-the-Add-Reminder-Dialog":{"role":"pseudoSymbol","title":"Present the Add Reminder Dialog","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Present-the-Add-Reminder-Dialog","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Present-the-Add-Reminder-Dialog"},"01-anonymous-auth-04-SettingsViewModel-01.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","import Combine","","class SettingsViewModel: ObservableObject {","  @Injected(\\.authenticationService)","  private var authenticationService","","  @Published var user: User?","  @Published var displayName = \"\"","","  @Published var isGuestUser = false","","  @Published var loggedInAs = \"\"","","  init() {","    $user","      .compactMap { user in","        user?.isAnonymous","      }","      .assign(to: &$isGuestUser)","","    $user","      .compactMap { user in","        user?.displayName ?? user?.email ?? \"\"","      }","      .assign(to: &$displayName)","","    Publishers.CombineLatest($isGuestUser, $displayName)","      .map { isGuest, displayName in","        isGuest","          ? \"You're using the app as a guest\"","          : \"Logged in as \\(displayName)\"","      }","      .assign(to: &$loggedInAs)","  }","","  func signOut() {","    fatalError(\"Not implemented yet\")","  }","}"],"fileName":"SettingsViewModel.swift","identifier":"01-anonymous-auth-04-SettingsViewModel-01.swift","type":"file","fileType":"swift","highlights":[{"line":7},{"line":8},{"line":9}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Run-the-app-to-experience-real-time-sync":{"role":"pseudoSymbol","title":"Run the app to experience real-time sync","abstract":[{"type":"text","text":"Now that you’ve implemented a "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":", and wrote code for storing "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":"s to Firestore, it is time to retrieve reminders from Firestore, so they can be displayed in the app’s UI."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Run-the-app-to-experience-real-time-sync","kind":"section","type":"section","url":"\/tutorials\/makeitso\/03-retrieving-data-from-cloud-firestore-in-real-time#Run-the-app-to-experience-real-time-sync"},"01-anonymous-auth-02-AuthenticationService-10.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","","public class AuthenticationService {","  @Injected(\\.auth) private var auth","  @Published var user: User?","","  private var authStateHandler: AuthStateDidChangeListenerHandle?","","  init() {","    registerAuthStateHandler()","  }","","  func registerAuthStateHandler() {","    if authStateHandler == nil {","      authStateHandler = auth.addStateDidChangeListener { auth, user in","        self.user = user","      }","    }","  }","","}","","\/\/ MARK: - Sign in anonymously","","extension AuthenticationService {","  func signInAnonymously() {","    if auth.currentUser == nil {","      auth.signInAnonymously()","    }","  }","}"],"fileName":"AuthenticationService.swift","identifier":"01-anonymous-auth-02-AuthenticationService-10.swift","type":"file","fileType":"swift","highlights":[{"line":30}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/05-Deleting-Data-from-Cloud-Firestore#Implement-a-method-for-removing-a-single-reminder-from-the-repository":{"role":"pseudoSymbol","title":"Implement a method for removing a single reminder from the repository","abstract":[{"type":"text","text":"In this chapter of the tutorial, you’ve written code for creating, reading, and updating data in Cloud Firestore. There is one more data operation that is common for many apps: deleting data."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/05-Deleting-Data-from-Cloud-Firestore#Implement-a-method-for-removing-a-single-reminder-from-the-repository","kind":"section","type":"section","url":"\/tutorials\/makeitso\/05-deleting-data-from-cloud-firestore#Implement-a-method-for-removing-a-single-reminder-from-the-repository"},"doc://com.example.MakeItSo/tutorials/MakeItSo/05-Deleting-Data-from-Cloud-Firestore#Implement-a-swipe-action-for-deleteing-reminders-from-the-list-view":{"role":"pseudoSymbol","title":"Implement a swipe action for deleteing reminders from the list view","abstract":[{"type":"text","text":"In this chapter of the tutorial, you’ve written code for creating, reading, and updating data in Cloud Firestore. There is one more data operation that is common for many apps: deleting data."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/05-Deleting-Data-from-Cloud-Firestore#Implement-a-swipe-action-for-deleteing-reminders-from-the-list-view","kind":"section","type":"section","url":"\/tutorials\/makeitso\/05-deleting-data-from-cloud-firestore#Implement-a-swipe-action-for-deleteing-reminders-from-the-list-view"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Create-a-Styleable-Toggle":{"role":"project","title":"Creating a Styleable Toggle","estimatedTime":"25min","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Create-a-Styleable-Toggle","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/02-create-a-styleable-toggle"},"01-anonymous-auth-02-AuthenticationService-07.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","","public class AuthenticationService {","  @Injected(\\.auth) private var auth","  @Published var user: User?","","  private var authStateHandler: AuthStateDidChangeListenerHandle?","","  init() {","    registerAuthStateHandler()","  }","","  func registerAuthStateHandler() {","    if authStateHandler == nil {","      authStateHandler = auth.addStateDidChangeListener { auth, user in","        self.user = user","      }","    }","  }","","}"],"fileName":"AuthenticationService.swift","identifier":"01-anonymous-auth-02-AuthenticationService-07.swift","type":"file","fileType":"swift","highlights":[{"line":11},{"line":12},{"line":13},{"line":14}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Developing-Locally-with-the-Emulator-Suite#Install-the-Firebase-CLI":{"role":"pseudoSymbol","title":"Install the Firebase CLI","abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite"},{"type":"text","text":" is a set of advanced tools for developers looking to build and test apps locally using Cloud Firestore, Realtime Database, Cloud Storage for Firebase, Authentication, Firebase Hosting, Cloud Functions (beta), Pub\/Sub (beta), and Firebase Extensions (beta). It provides a rich user interface to help you get running and prototyping quickly."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Install-the-Firebase-CLI","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-developing-locally-with-the-emulator-suite#Install-the-Firebase-CLI"},"01-anonymous-auth-02-AuthenticationService-01.swift":{"syntax":"swift","content":["import Foundation"],"fileName":"AuthenticationService.swift","identifier":"01-anonymous-auth-02-AuthenticationService-01.swift","type":"file","fileType":"swift","highlights":[]},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Sign-in-with-Apple#Run-the-app":{"role":"pseudoSymbol","title":"Run the app","abstract":[{"type":"text","text":"Your app is now capable of storing data on a per-user basis. You achieved this by implementing Firebase Anonymous Authentication in the previous chapter, and then using the anonymous user’s ID to tag their reminders when storing them in Cloud Firestore."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Run-the-app","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-sign-in-with-apple#Run-the-app"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Sign-in-with-Apple#Connect-the-UI":{"role":"pseudoSymbol","title":"Connect the UI","abstract":[{"type":"text","text":"Your app is now capable of storing data on a per-user basis. You achieved this by implementing Firebase Anonymous Authentication in the previous chapter, and then using the anonymous user’s ID to tag their reminders when storing them in Cloud Firestore."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Connect-the-UI","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-sign-in-with-apple#Connect-the-UI"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Create-a-New-Project":{"role":"pseudoSymbol","title":"Create a New Project","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Create-a-New-Project","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Create-a-New-Project"},"01-anonymous-auth-01-walkthrough-LoginView-01.swift":{"syntax":"swift","content":["import SwiftUI","import Combine","import FirebaseAnalyticsSwift","import AuthenticationServices","","private enum FocusableField: Hashable {","  case email","  case password","}","","struct LoginView: View {","  @EnvironmentObject var viewModel: AuthenticationViewModel","  @Environment(\\.colorScheme) var colorScheme","  @Environment(\\.dismiss) var dismiss","","  @FocusState private var focus: FocusableField?","","  var body: some View {","    VStack {","      HStack {","        Image(colorScheme == .light ? \"logo-light\" : \"logo-dark\")","          .resizable()","          .frame(width: 30, height: 30 , alignment: .center)","          .cornerRadius(8)","        Text(\"Make It So\")","          .font(.title)","          .bold()","      }","      .padding(.horizontal)","","      VStack {","        Image(colorScheme == .light ? \"auth-hero-light\" : \"auth-hero-dark\")","          .resizable()","          .frame(maxWidth: .infinity)","          .scaledToFit()","          .padding(.vertical, 24)","","        Text(\"Get your work done. Make it so.\")","          .font(.title2)","          .padding(.bottom, 16)","      }","","      Spacer()","","      GoogleSignInButton(.signIn) {","        \/\/ sign in with Google","      }","","      SignInWithAppleButton(.signIn) { request in","        \/\/ handle sign in requst","      } onCompletion: { result in","        \/\/ handle completion","      }","      .signInWithAppleButtonStyle(colorScheme == .light ? .black : .white)","      .frame(maxWidth: .infinity, minHeight: 50, maxHeight: 50)","      .cornerRadius(8)","","      Button(action: {","        withAnimation {","          viewModel.isOtherAuthOptionsVisible.toggle()","        }","      }) {","        Text(\"More sign-in options\")","          .underline()","      }","      .buttonStyle(.plain)","      .padding(.top, 16)","","      if viewModel.isOtherAuthOptionsVisible {","        emailPasswordSignInArea","      }","","      HStack {","        Text(\"Don't have an account yet?\")","        Button(action: { viewModel.switchFlow() }) {","          Text(\"Sign up\")","            .fontWeight(.semibold)","            .foregroundColor(.blue)","        }","      }","      .padding(.vertical, 8)","    }","    .padding()","    .analyticsScreen(name: \"\\(Self.self)\")","  }","","  var emailPasswordSignInArea: some View {","    VStack {","      HStack {","        Image(systemName: \"at\")","        TextField(\"Email\", text: $viewModel.email)","          .textInputAutocapitalization(.never)","          .disableAutocorrection(true)","          .focused($focus, equals: .email)","          .submitLabel(.next)","          .onSubmit {","            self.focus = .password","          }","      }","      .padding(.vertical, 6)","      .background(Divider(), alignment: .bottom)","      .padding(.bottom, 4)","","      HStack {","        Image(systemName: \"lock\")","        SecureField(\"Password\", text: $viewModel.password)","          .focused($focus, equals: .password)","          .submitLabel(.go)","          .onSubmit {","            \/\/ sign in with email and password","          }","      }","      .padding(.vertical, 6)","      .background(Divider(), alignment: .bottom)","      .padding(.bottom, 8)","","      if !viewModel.errorMessage.isEmpty {","        VStack {","          Text(viewModel.errorMessage)","            .foregroundColor(Color(UIColor.systemRed))","        }","      }","","      Button(action: { \/* sign in with email and password *\/ } ) {","        if viewModel.authenticationState != .authenticating {","          Text(\"Login\")","            .padding(.vertical, 8)","            .frame(maxWidth: .infinity)","        }","        else {","          ProgressView()","            .progressViewStyle(CircularProgressViewStyle(tint: .white))","            .padding(.vertical, 8)","            .frame(maxWidth: .infinity)","        }","      }","      .disabled(!viewModel.isValid)","      .frame(maxWidth: .infinity)","      .buttonStyle(.borderedProminent)","    }","  }  ","}","","struct LoginView_Previews: PreviewProvider {","  struct Container: View {","    @StateObject var viewModel = AuthenticationViewModel(flow: .login)","","    var body: some View {","      LoginView()","        .environmentObject(viewModel)","    }","  }","","  static var previews: some View {","    Container()","  }","}"],"fileName":"SettingsView.swift","identifier":"01-anonymous-auth-01-walkthrough-LoginView-01.swift","type":"file","fileType":"swift","highlights":[{"line":45},{"line":46},{"line":47},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":86},{"line":87},{"line":88},{"line":89},{"line":90},{"line":91},{"line":92},{"line":93},{"line":94},{"line":95},{"line":96},{"line":97},{"line":98},{"line":99},{"line":100},{"line":101},{"line":102},{"line":103},{"line":104},{"line":105},{"line":106},{"line":107},{"line":108},{"line":109},{"line":110},{"line":111},{"line":112},{"line":113},{"line":114},{"line":115},{"line":116},{"line":117},{"line":118},{"line":119},{"line":120},{"line":121},{"line":122},{"line":123},{"line":124},{"line":125},{"line":126},{"line":127},{"line":128},{"line":129},{"line":130},{"line":131},{"line":132},{"line":133},{"line":134},{"line":135},{"line":136},{"line":137},{"line":138},{"line":139},{"line":140},{"line":141}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/04-Updating-Data-in-Cloud-Firestore":{"role":"project","title":"Updating data in Cloud Firestore","estimatedTime":"35min","abstract":[{"type":"text","text":"So far, the app you’re building can help you add an keep track of your todos, but you cannot mark them as completed."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/04-Updating-Data-in-Cloud-Firestore","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/04-updating-data-in-cloud-firestore"},"01-anonymous-auth-01-walkthrough-SignupView-01.swift":{"syntax":"swift","content":["import SwiftUI","import Combine","import AuthenticationServices","import FirebaseAnalyticsSwift","","private enum FocusableField: Hashable {","  case email","  case password","  case confirmPassword","}","","struct SignupView: View {","  @EnvironmentObject var viewModel: AuthenticationViewModel","  @Environment(\\.colorScheme) var colorScheme","  @Environment(\\.dismiss) var dismiss","","  @FocusState private var focus: FocusableField?","","  var body: some View {","    VStack {","      HStack {","        Image(colorScheme == .light ? \"logo-light\" : \"logo-dark\")","          .resizable()","          .frame(width: 30, height: 30 , alignment: .center)","          .cornerRadius(8)","        Text(\"Make It So\")","          .font(.title)","          .bold()","      }","      .padding(.horizontal)","","      VStack {","        Image(colorScheme == .light ? \"auth-hero-light\" : \"auth-hero-dark\")","          .resizable()","          .frame(maxWidth: .infinity)","          .scaledToFit()","          .padding(.vertical, 24)","","        Text(\"Get your work done. Make it so.\")","          .font(.title2)","          .padding(.bottom, 16)","      }","","      Spacer()","","      GoogleSignInButton(.signUp) {","        \/\/ sign in with Google","      }","","      SignInWithAppleButton(.signUp) { request in","        \/\/ handle sign in request","      } onCompletion: { result in","        \/\/ handle completion","      }","      .signInWithAppleButtonStyle(colorScheme == .light ? .black : .white)","      .frame(maxWidth: .infinity, minHeight: 50, maxHeight: 50)","      .cornerRadius(8)","","      Button(action: {","        withAnimation {","          viewModel.isOtherAuthOptionsVisible.toggle()","        }","      }) {","        Text(\"More sign-in options\")","          .underline()","      }","      .buttonStyle(.plain)","      .padding(.top, 16)","","      if viewModel.isOtherAuthOptionsVisible {","        emailPasswordSignInArea","      }","","      HStack {","        Text(\"Already have an account?\")","        Button(action: { viewModel.switchFlow() }) {","          Text(\"Log in\")","            .fontWeight(.semibold)","            .foregroundColor(.blue)","        }","      }","      .padding(.vertical, 8)","    }","    .padding()","    .analyticsScreen(name: \"\\(Self.self)\")","  }","","  var emailPasswordSignInArea: some View {","    VStack {","      HStack {","        Image(systemName: \"at\")","        TextField(\"Email\", text: $viewModel.email)","          .textInputAutocapitalization(.never)","          .disableAutocorrection(true)","          .focused($focus, equals: .email)","          .submitLabel(.next)","          .onSubmit {","            self.focus = .password","          }","      }","      .padding(.vertical, 6)","      .background(Divider(), alignment: .bottom)","      .padding(.bottom, 4)","","      HStack {","        Image(systemName: \"lock\")","        SecureField(\"Password\", text: $viewModel.password)","          .focused($focus, equals: .password)","          .submitLabel(.go)","          .onSubmit {","            \/\/ sign up with email and password","          }","      }","      .padding(.vertical, 6)","      .background(Divider(), alignment: .bottom)","      .padding(.bottom, 8)","","      HStack {","        Image(systemName: \"lock\")","        SecureField(\"Confirm password\", text: $viewModel.confirmPassword)","          .focused($focus, equals: .confirmPassword)","          .submitLabel(.go)","          .onSubmit {","            \/\/ sign up with email and password","          }","      }","      .padding(.vertical, 6)","      .background(Divider(), alignment: .bottom)","      .padding(.bottom, 8)","","      if !viewModel.errorMessage.isEmpty {","        VStack {","          Text(viewModel.errorMessage)","            .foregroundColor(Color(UIColor.systemRed))","        }","      }","","      Button(action: { \/* sign up with email and password *\/ } ) {","        if viewModel.authenticationState != .authenticating {","          Text(\"Sign up\")","            .padding(.vertical, 8)","            .frame(maxWidth: .infinity)","        }","        else {","          ProgressView()","            .progressViewStyle(CircularProgressViewStyle(tint: .white))","            .padding(.vertical, 8)","            .frame(maxWidth: .infinity)","        }","      }","      .disabled(!viewModel.isValid)","      .frame(maxWidth: .infinity)","      .buttonStyle(.borderedProminent)","    }","  }  ","}","","","struct SignupView_Previews: PreviewProvider {","  static var previews: some View {","    Group {","      SignupView()","      SignupView()","        .preferredColorScheme(.dark)","    }","    .environmentObject(AuthenticationViewModel())","  }","}"],"fileName":"SettingsView.swift","identifier":"01-anonymous-auth-01-walkthrough-SignupView-01.swift","type":"file","fileType":"swift","highlights":[{"line":46},{"line":47},{"line":48},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":87},{"line":88},{"line":89},{"line":90},{"line":91},{"line":92},{"line":93},{"line":94},{"line":95},{"line":96},{"line":97},{"line":98},{"line":99},{"line":100},{"line":101},{"line":102},{"line":103},{"line":104},{"line":105},{"line":106},{"line":107},{"line":108},{"line":109},{"line":110},{"line":111},{"line":112},{"line":113},{"line":114},{"line":115},{"line":116},{"line":117},{"line":118},{"line":119},{"line":120},{"line":121},{"line":122},{"line":123},{"line":124},{"line":125},{"line":126},{"line":127},{"line":128},{"line":129},{"line":130},{"line":131},{"line":132},{"line":133},{"line":134},{"line":135},{"line":136},{"line":137},{"line":138},{"line":139},{"line":140},{"line":141},{"line":142},{"line":143},{"line":144},{"line":145},{"line":146},{"line":147},{"line":148},{"line":149},{"line":150},{"line":151},{"line":152},{"line":153},{"line":154},{"line":155}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase/Connecting-Your-App-to-Firebase":{"role":"article","title":"Connecting Your App to Firebase","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Connecting-Your-App-to-Firebase","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/creating-a-simple-todo-list-app-with-swiftui-and-firebase\/connecting-your-app-to-firebase"},"01-anonymous-auth-02-AuthenticationService-02a.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","","public class AuthenticationService {","  @Injected(\\.auth) private var auth","}"],"fileName":"AuthenticationService.swift","identifier":"01-anonymous-auth-02-AuthenticationService-02a.swift","type":"file","fileType":"swift","highlights":[{"line":2},{"line":6}]},"01-anonymous-auth-final-demo.mp4":{"poster":null,"alt":null,"type":"video","identifier":"01-anonymous-auth-final-demo.mp4","variants":[{"url":"\/videos\/01-anonymous-auth-final-demo.mp4","traits":["1x","light"]}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project#Create-a-New-Firebase-Project":{"role":"pseudoSymbol","title":"Create a New Firebase Project ","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Create-a-New-Firebase-Project","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project#Create-a-New-Firebase-Project"},"01-anonymous-auth-02-AuthenticationService-14.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","","public class AuthenticationService {","  @Injected(\\.auth) private var auth","  @Published var user: User?","","  private var authStateHandler: AuthStateDidChangeListenerHandle?","","  init() {","    registerAuthStateHandler()","    signInAnonymously()","  }","","  func registerAuthStateHandler() {","    if authStateHandler == nil {","      authStateHandler = auth.addStateDidChangeListener { auth, user in","        self.user = user","      }","    }","  }","","  func signOut() {","    do {","      try auth.signOut()","    }","    catch {","      print(\"Error while trying to sign out: \\(error.localizedDescription)\")","    }","  }","","  func deleteAccount() async -> Bool {","    do {","      try await user?.delete()","      signOut()","      return true","    }","    catch {","      print(error.localizedDescription)","      return false","    }","  }","","}","","\/\/ MARK: - Sign in anonymously","","extension AuthenticationService {","  func signInAnonymously() {","    if auth.currentUser == nil {","      print(\"Nobody is signed in. Trying to sign in anonymously.\")","      auth.signInAnonymously()","    }","    else {","      if let user = auth.currentUser {","        print(\"Someone is signed in with \\(user.providerID) and user ID \\(user.uid)\")","      }","    }","  }","}"],"fileName":"AuthenticationService.swift","identifier":"01-anonymous-auth-02-AuthenticationService-14.swift","type":"file","fileType":"swift","highlights":[{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Implement-a-snapshot-listener":{"role":"pseudoSymbol","title":"Implement a snapshot listener","abstract":[{"type":"text","text":"Now that you’ve implemented a "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":", and wrote code for storing "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":"s to Firestore, it is time to retrieve reminders from Firestore, so they can be displayed in the app’s UI."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Implement-a-snapshot-listener","kind":"section","type":"section","url":"\/tutorials\/makeitso\/03-retrieving-data-from-cloud-firestore-in-real-time#Implement-a-snapshot-listener"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Extract-Row-View":{"role":"project","title":"Extracting the Reminder Row Into a Separate View","estimatedTime":"15min","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/01-extract-row-view"},"01-anonymous-auth-02-AuthenticationService-04.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","","public class AuthenticationService {","  @Injected(\\.auth) private var auth","  @Published var user: User?","","  private var authStateHandler: AuthStateDidChangeListenerHandle?","","  func registerAuthStateHandler() {","    if authStateHandler == nil {","    }","  }","","}"],"fileName":"AuthenticationService.swift","identifier":"01-anonymous-auth-02-AuthenticationService-04.swift","type":"file","fileType":"swift","highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/04-Updating-Data-in-Cloud-Firestore#Edit-reminders":{"role":"pseudoSymbol","title":"Edit reminders","abstract":[{"type":"text","text":"So far, the app you’re building can help you add an keep track of your todos, but you cannot mark them as completed."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/04-Updating-Data-in-Cloud-Firestore#Edit-reminders","kind":"section","type":"section","url":"\/tutorials\/makeitso\/04-updating-data-in-cloud-firestore#Edit-reminders"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project#Add-a-Firebase-Configuration-File":{"role":"pseudoSymbol","title":"Add a Firebase Configuration File","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Add-a-Firebase-Configuration-File","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project#Add-a-Firebase-Configuration-File"},"01-anonymous-auth-01-walkthrough-SettingsView-01.swift":{"syntax":"swift","content":["import SwiftUI","","struct SettingsView: View {","  @Environment(\\.dismiss) var dismiss","  @StateObject var viewModel = SettingsViewModel()","  @State var isShowSignUpDialogPresented = false","","  private func signUp() {","    isShowSignUpDialogPresented.toggle()","  }","","  private func signOut() {","    viewModel.signOut()","  }","","  var body: some View {","    NavigationStack {","      Form {","        Section {","          NavigationLink(destination: UserProfileView()) {","            Label(\"Account\", systemImage: \"person.circle\")","          }","        }","        Section {","          if viewModel.isGuestUser {","            Button(action: signUp) {","              HStack {","                Spacer()","                Text(\"Sign up\")","                Spacer()","              }","            }","          }","          else {","            Button(action: signOut) {","              HStack {","                Spacer()","                Text(\"Sign out\")","                Spacer()","              }","            }","          }","        } footer: {","          HStack {","            Spacer()","            Text(viewModel.loggedInAs)","            Spacer()","          }","        }","      }","      .navigationTitle(\"Settings\")","      .navigationBarTitleDisplayMode(.inline)","      .toolbar {","        ToolbarItem(placement: .confirmationAction) {","          Button(action: { dismiss() }) {","            Text(\"Done\")","          }","        }","      }","      .sheet(isPresented: $isShowSignUpDialogPresented) {","        AuthenticationView()","      }","    }","  }","}","","struct SettingsView_Previews: PreviewProvider {","  static var previews: some View {","    SettingsView()","  }","}"],"fileName":"SettingsView.swift","identifier":"01-anonymous-auth-01-walkthrough-SettingsView-01.swift","type":"file","fileType":"swift","highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":20},{"line":21},{"line":22},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":60},{"line":61},{"line":62}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Anonymous-Auth#Implement-an-AuthenticationService":{"role":"pseudoSymbol","title":"Implement an AuthenticationService","abstract":[{"type":"text","text":"It seems like MakeItSo meets the bar for an MVP (minimum viable product): users can add new reminders, check them off, change their details, and even delete them. But - as you might have noticed when running the app on two different iOS Simulators - the app is not multi-user capable. What’s worse, it seems like all users can see everyone else’s todo items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Implement-an-AuthenticationService","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-anonymous-auth#Implement-an-AuthenticationService"},"Xcode 14":{"title":"Xcode 14","type":"xcodeRequirement","identifier":"Xcode 14","url":"https:\/\/xcodereleases.com\/"},"doc://com.example.MakeItSo/tutorials/MakeItSo/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase/Building-a-Simple-UI":{"role":"article","title":"Building a Simple UI","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Building-a-Simple-UI","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/creating-a-simple-todo-list-app-with-swiftui-and-firebase\/building-a-simple-ui"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Developing-Locally-with-the-Emulator-Suite#Connect-to-your-Firebase-project-and-enable-the-Emulator-Suite":{"role":"pseudoSymbol","title":"Connect to your Firebase project and enable the Emulator Suite","abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite"},{"type":"text","text":" is a set of advanced tools for developers looking to build and test apps locally using Cloud Firestore, Realtime Database, Cloud Storage for Firebase, Authentication, Firebase Hosting, Cloud Functions (beta), Pub\/Sub (beta), and Firebase Extensions (beta). It provides a rich user interface to help you get running and prototyping quickly."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Connect-to-your-Firebase-project-and-enable-the-Emulator-Suite","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-developing-locally-with-the-emulator-suite#Connect-to-your-Firebase-project-and-enable-the-Emulator-Suite"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Anonymous-Auth#Take-the-app-for-a-spin-and-experience-its-multi-user-capabilities":{"role":"pseudoSymbol","title":"Take the app for a spin and experience its multi-user capabilities","abstract":[{"type":"text","text":"It seems like MakeItSo meets the bar for an MVP (minimum viable product): users can add new reminders, check them off, change their details, and even delete them. But - as you might have noticed when running the app on two different iOS Simulators - the app is not multi-user capable. What’s worse, it seems like all users can see everyone else’s todo items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Take-the-app-for-a-spin-and-experience-its-multi-user-capabilities","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-anonymous-auth#Take-the-app-for-a-spin-and-experience-its-multi-user-capabilities"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project#Initialize-Firebase-in-Your-App":{"role":"pseudoSymbol","title":"Initialize Firebase in Your App","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Initialize-Firebase-in-Your-App","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project#Initialize-Firebase-in-Your-App"},"01-anonymous-auth-05-RemindersRepository-02.swift":{"syntax":"swift","content":["import Foundation","import Combine","import Factory","import FirebaseAuth","import FirebaseFirestore","import FirebaseFirestoreSwift","","public class RemindersRepository: ObservableObject {","  \/\/ MARK: - Dependencies","  @Injected(\\.firestore) var firestore","  @Injected(\\.authenticationService) var authenticationService","","  @Published","  var reminders = [Reminder]()","","  @Published","  var user: User? = nil","","  private var listenerRegistration: ListenerRegistration?","  private var cancelables = Set<AnyCancellable>()","","  init() {","    authenticationService.$user","      .assign(to: &$user)","","    $user.sink { user in","      self.unsubscribe()","      self.subscribe(user: user)","    }","    .store(in: &cancelables)","","  }","","  deinit {","    unsubscribe()","  }","","  func subscribe(user: User? = nil) {","    if listenerRegistration == nil {","      if let localUser = user ?? self.user {","        let query = firestore.collection(Reminder.collectionName)","","        listenerRegistration = query","          .addSnapshotListener { [weak self] (querySnapshot, error) in","            guard let documents = querySnapshot?.documents else {","              print(\"No documents\")","              return","            }","","            print(\"Mapping \\(documents.count) documents\")","            self?.reminders = documents.compactMap { queryDocumentSnapshot in","              do {","                return try queryDocumentSnapshot.data(as: Reminder.self)","              }","              catch {","                print(\"Error while trying to map document \\(queryDocumentSnapshot.documentID): \\(error.localizedDescription)\")","                return nil","              }","            }","          }","      }","    }","  }","","  private func unsubscribe() {","    if listenerRegistration != nil {","      listenerRegistration?.remove()","      listenerRegistration = nil","    }","  }","","  func addReminder(_ reminder: Reminder) throws {","    try firestore","      .collection(Reminder.collectionName)","      .addDocument(from: reminder)","  }","","  func updateReminder(_ reminder: Reminder) throws {","    guard let documentId = reminder.id else {","      fatalError(\"Reminder \\(reminder.title) has no document ID.\")","    }","    try firestore","      .collection(Reminder.collectionName)","      .document(documentId)","      .setData(from: reminder, merge: true)","  }","","  func removeReminder(_ reminder: Reminder) {","    guard let documentId = reminder.id else {","      fatalError(\"Reminder \\(reminder.title) has no document ID.\")","    }","    firestore","      .collection(Reminder.collectionName)","      .document(documentId)","      .delete()","  }","","}"],"fileName":"RemindersRepository.swift","identifier":"01-anonymous-auth-05-RemindersRepository-02.swift","type":"file","fileType":"swift","highlights":[{"line":40},{"line":61}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Developing-Locally-with-the-Emulator-Suite#Use-launch-arguments-to-switch-between-the-Emulator-and-your-Firebase-project":{"role":"pseudoSymbol","title":"Use launch arguments to switch between the Emulator and your Firebase project","abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite"},{"type":"text","text":" is a set of advanced tools for developers looking to build and test apps locally using Cloud Firestore, Realtime Database, Cloud Storage for Firebase, Authentication, Firebase Hosting, Cloud Functions (beta), Pub\/Sub (beta), and Firebase Extensions (beta). It provides a rich user interface to help you get running and prototyping quickly."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Use-launch-arguments-to-switch-between-the-Emulator-and-your-Firebase-project","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-developing-locally-with-the-emulator-suite#Use-launch-arguments-to-switch-between-the-Emulator-and-your-Firebase-project"},"doc://com.example.MakeItSo/tutorials/MakeItSo/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase/Storing-Data-in-the-Cloud":{"role":"article","title":"Storing Data in the Cloud","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Storing-Data-in-the-Cloud","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/creating-a-simple-todo-list-app-with-swiftui-and-firebase\/storing-data-in-the-cloud"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Sign-in-with-Apple#Sign-in-to-Firebase-and-create-a-new-user-account":{"role":"pseudoSymbol","title":"Sign in to Firebase and create a new user account","abstract":[{"type":"text","text":"Your app is now capable of storing data on a per-user basis. You achieved this by implementing Firebase Anonymous Authentication in the previous chapter, and then using the anonymous user’s ID to tag their reminders when storing them in Cloud Firestore."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Sign-in-to-Firebase-and-create-a-new-user-account","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-sign-in-with-apple#Sign-in-to-Firebase-and-create-a-new-user-account"},"01-anonymous-auth-01-walkthrough-LoginView-01.png":{"alt":null,"type":"image","identifier":"01-anonymous-auth-01-walkthrough-LoginView-01.png","variants":[{"url":"\/images\/01-anonymous-auth-01-walkthrough-LoginView-01@2x.png","traits":["2x","light"]}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Storing-Data-in-Cloud-Firestore":{"role":"project","title":"Storing data in Cloud Firestore","estimatedTime":"25min","abstract":[{"type":"text","text":"With the UI of the application in place, and Firebase set up for local development, it is now time to store data in the cloud."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/02-storing-data-in-cloud-firestore"},"01-anonymous-auth-03-AuthenticationService+Injection-03.swift":{"syntax":"swift","content":["import Foundation","import Factory","","extension Container {","  public var authenticationService: Factory<AuthenticationService> {","  }","}"],"fileName":"AuthenticationService+Injection.swift","identifier":"01-anonymous-auth-03-AuthenticationService+Injection-03.swift","type":"file","fileType":"swift","highlights":[{"line":5},{"line":6}]},"01-anonymous-auth-04-RemindersRepository-02.swift":{"syntax":"swift","content":["import Foundation","import Combine","import Factory","import FirebaseAuth","import FirebaseFirestore","import FirebaseFirestoreSwift","","public class RemindersRepository: ObservableObject {","  \/\/ MARK: - Dependencies","  @Injected(\\.firestore) var firestore","  @Injected(\\.authenticationService) var authenticationService","","  @Published","  var reminders = [Reminder]()","","  @Published","  var user: User? = nil","","  private var listenerRegistration: ListenerRegistration?","","  init() {","    authenticationService.$user","      .assign(to: &$user)","","    subscribe()","  }","","  deinit {","    unsubscribe()","  }","","  func subscribe() {","    if listenerRegistration == nil {","      let query = firestore.collection(Reminder.collectionName)","","      listenerRegistration = query","        .addSnapshotListener { [weak self] (querySnapshot, error) in","          guard let documents = querySnapshot?.documents else {","            print(\"No documents\")","            return","          }","","          print(\"Mapping \\(documents.count) documents\")","          self?.reminders = documents.compactMap { queryDocumentSnapshot in","            do {","              return try queryDocumentSnapshot.data(as: Reminder.self)","            }","            catch {","              print(\"Error while trying to map document \\(queryDocumentSnapshot.documentID): \\(error.localizedDescription)\")","              return nil","            }","          }","        }","    }","  }","","  private func unsubscribe() {","    if listenerRegistration != nil {","      listenerRegistration?.remove()","      listenerRegistration = nil","    }","  }","","  func addReminder(_ reminder: Reminder) throws {","    try firestore","      .collection(Reminder.collectionName)","      .addDocument(from: reminder)","  }","","  func updateReminder(_ reminder: Reminder) throws {","    guard let documentId = reminder.id else {","      fatalError(\"Reminder \\(reminder.title) has no document ID.\")","    }","    try firestore","      .collection(Reminder.collectionName)","      .document(documentId)","      .setData(from: reminder, merge: true)","  }","","  func removeReminder(_ reminder: Reminder) {","    guard let documentId = reminder.id else {","      fatalError(\"Reminder \\(reminder.title) has no document ID.\")","    }","    firestore","      .collection(Reminder.collectionName)","      .document(documentId)","      .delete()","  }","","}"],"fileName":"RemindersRepository.swift","identifier":"01-anonymous-auth-04-RemindersRepository-02.swift","type":"file","fileType":"swift","highlights":[{"line":4},{"line":16},{"line":17},{"line":18},{"line":22},{"line":23},{"line":24}]},"01-anonymous-auth-02-AuthenticationService-12.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","","public class AuthenticationService {","  @Injected(\\.auth) private var auth","  @Published var user: User?","","  private var authStateHandler: AuthStateDidChangeListenerHandle?","","  init() {","    registerAuthStateHandler()","    signInAnonymously()","  }","","  func registerAuthStateHandler() {","    if authStateHandler == nil {","      authStateHandler = auth.addStateDidChangeListener { auth, user in","        self.user = user","      }","    }","  }","","}","","\/\/ MARK: - Sign in anonymously","","extension AuthenticationService {","  func signInAnonymously() {","    if auth.currentUser == nil {","      print(\"Nobody is signed in. Trying to sign in anonymously.\")","      auth.signInAnonymously()","    }","    else {","      if let user = auth.currentUser {","        print(\"Someone is signed in with \\(user.providerID) and user ID \\(user.uid)\")","      }","    }","  }","}"],"fileName":"AuthenticationService.swift","identifier":"01-anonymous-auth-02-AuthenticationService-12.swift","type":"file","fileType":"swift","highlights":[{"line":31},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project":{"role":"project","title":"Adding Firebase to Your Project","estimatedTime":"25min","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project"},"01-anonymous-auth-04-SettingsViewModel-03.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","import Combine","","class SettingsViewModel: ObservableObject {","  @Injected(\\.authenticationService)","  private var authenticationService","","  @Published var user: User?","  @Published var displayName = \"\"","","  @Published var isGuestUser = false","","  @Published var loggedInAs = \"\"","","  init() {","    authenticationService.$user","      .assign(to: &$user)","","    $user","      .compactMap { user in","        user?.isAnonymous","      }","      .assign(to: &$isGuestUser)","","    $user","      .compactMap { user in","        user?.displayName ?? user?.email ?? \"\"","      }","      .assign(to: &$displayName)","","    Publishers.CombineLatest($isGuestUser, $displayName)","      .map { isGuest, displayName in","        isGuest","          ? \"You're using the app as a guest\"","          : \"Logged in as \\(displayName)\"","      }","      .assign(to: &$loggedInAs)","  }","","  func signOut() {","    authenticationService.signOut()","  }","}"],"fileName":"SettingsViewModel.swift","identifier":"01-anonymous-auth-04-SettingsViewModel-03.swift","type":"file","fileType":"swift","highlights":[{"line":43}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project#Launch-the-App-to-Verify-Setup":{"role":"pseudoSymbol","title":"Launch the App to Verify Setup","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Launch-the-App-to-Verify-Setup","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project#Launch-the-App-to-Verify-Setup"},"01-anonymous-auth-05-RemindersRepository-01.swift":{"syntax":"swift","content":["import Foundation","import Combine","import Factory","import FirebaseAuth","import FirebaseFirestore","import FirebaseFirestoreSwift","","public class RemindersRepository: ObservableObject {","  \/\/ MARK: - Dependencies","  @Injected(\\.firestore) var firestore","  @Injected(\\.authenticationService) var authenticationService","","  @Published","  var reminders = [Reminder]()","","  @Published","  var user: User? = nil","","  private var listenerRegistration: ListenerRegistration?","  private var cancelables = Set<AnyCancellable>()","","  init() {","    authenticationService.$user","      .assign(to: &$user)","","    $user.sink { user in","      self.unsubscribe()","      self.subscribe(user: user)","    }","    .store(in: &cancelables)","","  }","","  deinit {","    unsubscribe()","  }","","  func subscribe(user: User? = nil) {","    if listenerRegistration == nil {","      let query = firestore.collection(Reminder.collectionName)","","      listenerRegistration = query","        .addSnapshotListener { [weak self] (querySnapshot, error) in","          guard let documents = querySnapshot?.documents else {","            print(\"No documents\")","            return","          }","","          print(\"Mapping \\(documents.count) documents\")","          self?.reminders = documents.compactMap { queryDocumentSnapshot in","            do {","              return try queryDocumentSnapshot.data(as: Reminder.self)","            }","            catch {","              print(\"Error while trying to map document \\(queryDocumentSnapshot.documentID): \\(error.localizedDescription)\")","              return nil","            }","          }","        }","    }","  }","","  private func unsubscribe() {","    if listenerRegistration != nil {","      listenerRegistration?.remove()","      listenerRegistration = nil","    }","  }","","  func addReminder(_ reminder: Reminder) throws {","    try firestore","      .collection(Reminder.collectionName)","      .addDocument(from: reminder)","  }","","  func updateReminder(_ reminder: Reminder) throws {","    guard let documentId = reminder.id else {","      fatalError(\"Reminder \\(reminder.title) has no document ID.\")","    }","    try firestore","      .collection(Reminder.collectionName)","      .document(documentId)","      .setData(from: reminder, merge: true)","  }","","  func removeReminder(_ reminder: Reminder) {","    guard let documentId = reminder.id else {","      fatalError(\"Reminder \\(reminder.title) has no document ID.\")","    }","    firestore","      .collection(Reminder.collectionName)","      .document(documentId)","      .delete()","  }","","}"],"fileName":"RemindersRepository.swift","identifier":"01-anonymous-auth-05-RemindersRepository-01.swift","type":"file","fileType":"swift","highlights":[{"line":20},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":38}]},"01-anonymous-auth-03-AuthenticationService+Injection-04.swift":{"syntax":"swift","content":["import Foundation","import Factory","","extension Container {","  public var authenticationService: Factory<AuthenticationService> {","    self {","    }.singleton","  }","}"],"fileName":"AuthenticationService+Injection.swift","identifier":"01-anonymous-auth-03-AuthenticationService+Injection-04.swift","type":"file","fileType":"swift","highlights":[{"line":6},{"line":7}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Implementing-MVVM#Add-a-method-to-the-View-Model-for-adding-new-reminders":{"role":"pseudoSymbol","title":"Add a method to the View Model for adding new reminders","abstract":[{"type":"text","text":"With the basic views for displaying and adding todo items set up, it is time to think about the architecture of the app."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Add-a-method-to-the-View-Model-for-adding-new-reminders","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-implementing-mvvm#Add-a-method-to-the-View-Model-for-adding-new-reminders"},"01-anonymous-auth-01-walkthrough-AuthenticationView-00":{"syntax":"swift","content":["import SwiftUI","import Combine","","struct AuthenticationView: View {","  @StateObject var viewModel = AuthenticationViewModel()","","  var body: some View {","    VStack {","      switch viewModel.flow {","      case .login:","        LoginView()","          .environmentObject(viewModel)","      case .signUp:","        SignupView()","          .environmentObject(viewModel)","      }","    }","  }","}","","struct AuthenticationView_Previews: PreviewProvider {","  static var previews: some View {","    AuthenticationView()","  }","}"],"fileName":"SettingsView.swift","identifier":"01-anonymous-auth-01-walkthrough-AuthenticationView-00","type":"file","fileType":"swift","highlights":[{"line":4},{"line":5},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":21},{"line":23}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Anonymous-Auth#Download-the-project-files":{"role":"pseudoSymbol","title":"Download the project files","abstract":[{"type":"text","text":"It seems like MakeItSo meets the bar for an MVP (minimum viable product): users can add new reminders, check them off, change their details, and even delete them. But - as you might have noticed when running the app on two different iOS Simulators - the app is not multi-user capable. What’s worse, it seems like all users can see everyone else’s todo items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Download-the-project-files","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-anonymous-auth#Download-the-project-files"},"https://firebase.google.com/docs/emulator-suite":{"title":"Firebase Local Emulator Suite","titleInlineContent":[{"type":"text","text":"Firebase Local Emulator Suite"}],"type":"link","identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite","url":"https:\/\/firebase.google.com\/docs\/emulator-suite"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Anonymous-Auth":{"role":"project","title":"Implementing guest users with Firebase Anonymous Authentication","estimatedTime":"25min","abstract":[{"type":"text","text":"It seems like MakeItSo meets the bar for an MVP (minimum viable product): users can add new reminders, check them off, change their details, and even delete them. But - as you might have noticed when running the app on two different iOS Simulators - the app is not multi-user capable. What’s worse, it seems like all users can see everyone else’s todo items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/01-anonymous-auth"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Implementing-MVVM#Create-a-View-Model-and-connect-it-to-the-RemindersListView":{"role":"pseudoSymbol","title":"Create a View Model and connect it to the RemindersListView","abstract":[{"type":"text","text":"With the basic views for displaying and adding todo items set up, it is time to think about the architecture of the app."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Create-a-View-Model-and-connect-it-to-the-RemindersListView","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-implementing-mvvm#Create-a-View-Model-and-connect-it-to-the-RemindersListView"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Anonymous-Auth#Register-AuthenticationService-with-the-Dependency-Injection-container":{"role":"pseudoSymbol","title":"Register AuthenticationService with the Dependency Injection container","abstract":[{"type":"text","text":"It seems like MakeItSo meets the bar for an MVP (minimum viable product): users can add new reminders, check them off, change their details, and even delete them. But - as you might have noticed when running the app on two different iOS Simulators - the app is not multi-user capable. What’s worse, it seems like all users can see everyone else’s todo items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Register-AuthenticationService-with-the-Dependency-Injection-container","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-anonymous-auth#Register-AuthenticationService-with-the-Dependency-Injection-container"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Brush-up-the-UI":{"role":"pseudoSymbol","title":"Brush up the UI","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Brush-up-the-UI","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Brush-up-the-UI"},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Manage-the-lifecycle-of-the-snapshot-listener":{"role":"pseudoSymbol","title":"Manage the lifecycle of the snapshot listener","abstract":[{"type":"text","text":"Now that you’ve implemented a "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":", and wrote code for storing "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":"s to Firestore, it is time to retrieve reminders from Firestore, so they can be displayed in the app’s UI."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Manage-the-lifecycle-of-the-snapshot-listener","kind":"section","type":"section","url":"\/tutorials\/makeitso\/03-retrieving-data-from-cloud-firestore-in-real-time#Manage-the-lifecycle-of-the-snapshot-listener"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Dependency-Injection-with-Factory":{"role":"project","title":"Dependency Injection with Factory","estimatedTime":"15min","abstract":[{"type":"text","text":"Even though "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MakeItSo"}]},{"type":"text","text":" is a relatively simple app, it consists of quite a few components that need to interact with each other: models, views, view models, repositories, and different backend services like Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/01-dependency-injection-with-factory"},"hero-anonymous-auth.png":{"alt":null,"type":"image","identifier":"hero-anonymous-auth.png","variants":[{"url":"\/images\/hero-anonymous-auth@2x.png","traits":["2x","light"]}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Create-a-Reminder-Model-and-Add-some-Test-Data":{"role":"pseudoSymbol","title":"Create a Reminder Model and Add some Test Data","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Create-a-Reminder-Model-and-Add-some-Test-Data","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Create-a-Reminder-Model-and-Add-some-Test-Data"},"01-anonymous-auth-05-RemindersRepository-03.swift":{"syntax":"swift","content":["import Foundation","import Combine","import Factory","import FirebaseAuth","import FirebaseFirestore","import FirebaseFirestoreSwift","","public class RemindersRepository: ObservableObject {","  \/\/ MARK: - Dependencies","  @Injected(\\.firestore) var firestore","  @Injected(\\.authenticationService) var authenticationService","","  @Published","  var reminders = [Reminder]()","","  @Published","  var user: User? = nil","","  private var listenerRegistration: ListenerRegistration?","  private var cancelables = Set<AnyCancellable>()","","  init() {","    authenticationService.$user","      .assign(to: &$user)","","    $user.sink { user in","      self.unsubscribe()","      self.subscribe(user: user)","    }","    .store(in: &cancelables)","","  }","","  deinit {","    unsubscribe()","  }","","  func subscribe(user: User? = nil) {","    if listenerRegistration == nil {","      if let localUser = user ?? self.user {","        let query = firestore.collection(Reminder.collectionName)","          .whereField(\"userId\", isEqualTo: localUser.uid)","","        listenerRegistration = query","          .addSnapshotListener { [weak self] (querySnapshot, error) in","            guard let documents = querySnapshot?.documents else {","              print(\"No documents\")","              return","            }","","            print(\"Mapping \\(documents.count) documents\")","            self?.reminders = documents.compactMap { queryDocumentSnapshot in","              do {","                return try queryDocumentSnapshot.data(as: Reminder.self)","              }","              catch {","                print(\"Error while trying to map document \\(queryDocumentSnapshot.documentID): \\(error.localizedDescription)\")","                return nil","              }","            }","          }","      }","    }","  }","","  private func unsubscribe() {","    if listenerRegistration != nil {","      listenerRegistration?.remove()","      listenerRegistration = nil","    }","  }","","  func addReminder(_ reminder: Reminder) throws {","    try firestore","      .collection(Reminder.collectionName)","      .addDocument(from: reminder)","  }","","  func updateReminder(_ reminder: Reminder) throws {","    guard let documentId = reminder.id else {","      fatalError(\"Reminder \\(reminder.title) has no document ID.\")","    }","    try firestore","      .collection(Reminder.collectionName)","      .document(documentId)","      .setData(from: reminder, merge: true)","  }","","  func removeReminder(_ reminder: Reminder) {","    guard let documentId = reminder.id else {","      fatalError(\"Reminder \\(reminder.title) has no document ID.\")","    }","    firestore","      .collection(Reminder.collectionName)","      .document(documentId)","      .delete()","  }","","}"],"fileName":"RemindersRepository.swift","identifier":"01-anonymous-auth-05-RemindersRepository-03.swift","type":"file","fileType":"swift","highlights":[{"line":42}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Dependency-Injection-with-Factory#Wrap-up":{"role":"pseudoSymbol","title":"Wrap-up","abstract":[{"type":"text","text":"Even though "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MakeItSo"}]},{"type":"text","text":" is a relatively simple app, it consists of quite a few components that need to interact with each other: models, views, view models, repositories, and different backend services like Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Wrap-up","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-dependency-injection-with-factory#Wrap-up"},"01-anonymous-auth-01-walkthrough-UserProfileView-01.swift":{"syntax":"swift","content":["import SwiftUI","import FirebaseAnalyticsSwift","import FirebaseAuth","import Combine","import Factory","","struct UserProfileView: View {","  @StateObject var viewModel = UserProfileViewModel()","  @Environment(\\.dismiss) var dismiss","  @State var presentingConfirmationDialog = false","","  private func deleteAccount() {","    Task {","      if await viewModel.deleteAccount() == true {","        dismiss()","      }","    }","  }","","  private func signOut() {","    viewModel.signOut()","  }","","  var body: some View {","    Form {","      Section {","        VStack {","          HStack {","            Spacer()","            Image(systemName: \"person.fill\")","              .resizable()","              .frame(width: 100 , height: 100)","              .aspectRatio(contentMode: .fit)","              .clipShape(Circle())","              .clipped()","              .padding(4)","              .overlay(Circle().stroke(Color.accentColor, lineWidth: 2))","            Spacer()","          }","          Button(action: {}) {","            Text(\"edit\")","          }","        }","      }","      .listRowBackground(Color(UIColor.systemGroupedBackground))","      Section(\"Email\") {","        VStack(alignment: .leading) {","          Text(\"Name\")","            .font(.caption)","          Text(viewModel.displayName)","        }","        VStack(alignment: .leading) {","          Text(\"Email\")","            .font(.caption)","          Text(viewModel.email)","        }","        VStack(alignment: .leading) {","          Text(\"UID\")","            .font(.caption)","          Text(viewModel.user?.uid ?? \"(unknown)\")","        }","        VStack(alignment: .leading) {","          Text(\"Provider\")","            .font(.caption)","          Text(viewModel.provider)","        }","        VStack(alignment: .leading) {","          Text(\"Anonymous \/ Guest user\")","            .font(.caption)","          Text(viewModel.isGuestUser ? \"Yes\" : \"No\")","        }","        VStack(alignment: .leading) {","          Text(\"Verified\")","            .font(.caption)","          Text(viewModel.isVerified ? \"Yes\" : \"No\")","        }","      }","      Section {","        Button(role: .cancel, action: signOut) {","          HStack {","            Spacer()","            Text(\"Sign out\")","            Spacer()","          }","        }","      }","      Section {","        Button(role: .destructive, action: { presentingConfirmationDialog.toggle() }) {","          HStack {","            Spacer()","            Text(\"Delete Account\")","            Spacer()","          }","        }","      }","    }","    .navigationTitle(\"Profile\")","    .navigationBarTitleDisplayMode(.inline)","    .analyticsScreen(name: \"\\(Self.self)\")","    .confirmationDialog(\"Deleting your account is permanent. Do you want to delete your account?\",","                        isPresented: $presentingConfirmationDialog, titleVisibility: .visible) {","      Button(\"Delete Account\", role: .destructive, action: deleteAccount)","      Button(\"Cancel\", role: .cancel, action: { })","    }","  }","}","","struct UserProfileView_Previews: PreviewProvider {","  static var previews: some View {","    NavigationView {","      UserProfileView()","    }","  }","}"],"fileName":"SettingsView.swift","identifier":"01-anonymous-auth-01-walkthrough-UserProfileView-01.swift","type":"file","fileType":"swift","highlights":[{"line":48},{"line":49},{"line":50},{"line":53},{"line":54},{"line":55},{"line":58},{"line":59},{"line":60},{"line":63},{"line":64},{"line":65},{"line":68},{"line":69},{"line":70},{"line":73},{"line":74},{"line":75},{"line":79},{"line":80},{"line":81},{"line":82},{"line":83},{"line":84},{"line":85},{"line":88},{"line":89},{"line":90},{"line":91},{"line":92},{"line":93},{"line":94}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase/Authenticating-Users":{"role":"article","title":"Authenticating Users","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Authenticating-Users","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/creating-a-simple-todo-list-app-with-swiftui-and-firebase\/authenticating-users"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Anonymous-Auth#Update-the-RemindersRepository-to-operate-only-on-the-users-data":{"role":"pseudoSymbol","title":"Update the RemindersRepository to operate only on the user's data","abstract":[{"type":"text","text":"It seems like MakeItSo meets the bar for an MVP (minimum viable product): users can add new reminders, check them off, change their details, and even delete them. But - as you might have noticed when running the app on two different iOS Simulators - the app is not multi-user capable. What’s worse, it seems like all users can see everyone else’s todo items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Update-the-RemindersRepository-to-operate-only-on-the-users-data","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-anonymous-auth#Update-the-RemindersRepository-to-operate-only-on-the-users-data"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Implementing-MVVM#Organise-the-Project-Files":{"role":"pseudoSymbol","title":"Organise the Project Files","abstract":[{"type":"text","text":"With the basic views for displaying and adding todo items set up, it is time to think about the architecture of the app."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Organise-the-Project-Files","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-implementing-mvvm#Organise-the-Project-Files"},"doc://com.example.MakeItSo/tutorials/MakeItSo/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase/Dependency-Injection":{"role":"article","title":"Dependency Injection","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Dependency-Injection","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/creating-a-simple-todo-list-app-with-swiftui-and-firebase\/dependency-injection"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Dependency-Injection-with-Factory#Add-the-Factory-SDK-to-your-project":{"role":"pseudoSymbol","title":"Add the Factory SDK to your project","abstract":[{"type":"text","text":"Even though "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MakeItSo"}]},{"type":"text","text":" is a relatively simple app, it consists of quite a few components that need to interact with each other: models, views, view models, repositories, and different backend services like Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Add-the-Factory-SDK-to-your-project","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-dependency-injection-with-factory#Add-the-Factory-SDK-to-your-project"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Implementing-MVVM":{"role":"project","title":"Implementing Model, View, ViewModel (MVVM)","estimatedTime":"20min","abstract":[{"type":"text","text":"With the basic views for displaying and adding todo items set up, it is time to think about the architecture of the app."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/02-implementing-mvvm"},"01-anonymous-auth-02-AuthenticationService-03.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","","public class AuthenticationService {","  @Injected(\\.auth) private var auth","  @Published var user: User?","}"],"fileName":"AuthenticationService.swift","identifier":"01-anonymous-auth-02-AuthenticationService-03.swift","type":"file","fileType":"swift","highlights":[{"line":7}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Sign-in-with-Apple#Connect-the-app-to-your-Apple-developer-account":{"role":"pseudoSymbol","title":"Connect the app to your Apple developer account","abstract":[{"type":"text","text":"Your app is now capable of storing data on a per-user basis. You achieved this by implementing Firebase Anonymous Authentication in the previous chapter, and then using the anonymous user’s ID to tag their reminders when storing them in Cloud Firestore."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Connect-the-app-to-your-Apple-developer-account","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-sign-in-with-apple#Connect-the-app-to-your-Apple-developer-account"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI":{"role":"project","title":"Building a Simple Todo List UI","estimatedTime":"25min","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Sign-in-with-Apple#Implement-Sign-in-with-Apple":{"role":"pseudoSymbol","title":"Implement Sign in with Apple","abstract":[{"type":"text","text":"Your app is now capable of storing data on a per-user basis. You achieved this by implementing Firebase Anonymous Authentication in the previous chapter, and then using the anonymous user’s ID to tag their reminders when storing them in Cloud Firestore."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Implement-Sign-in-with-Apple","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-sign-in-with-apple#Implement-Sign-in-with-Apple"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Wrap-Up":{"role":"pseudoSymbol","title":"Wrap Up","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Wrap-Up","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Wrap-Up"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Storing-Data-in-Cloud-Firestore#Implement-a-repository":{"role":"pseudoSymbol","title":"Implement a repository","abstract":[{"type":"text","text":"With the UI of the application in place, and Firebase set up for local development, it is now time to store data in the cloud."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Implement-a-repository","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-storing-data-in-cloud-firestore#Implement-a-repository"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Storing-Data-in-Cloud-Firestore#Wrap-up":{"role":"pseudoSymbol","title":"Wrap up","abstract":[{"type":"text","text":"With the UI of the application in place, and Firebase set up for local development, it is now time to store data in the cloud."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Wrap-up","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-storing-data-in-cloud-firestore#Wrap-up"},"01-anonymous-auth-05-RemindersRepository-04.swift":{"syntax":"swift","content":["import Foundation","import Combine","import Factory","import FirebaseAuth","import FirebaseFirestore","import FirebaseFirestoreSwift","","public class RemindersRepository: ObservableObject {","  \/\/ MARK: - Dependencies","  @Injected(\\.firestore) var firestore","  @Injected(\\.authenticationService) var authenticationService","","  @Published","  var reminders = [Reminder]()","","  @Published","  var user: User? = nil","","  private var listenerRegistration: ListenerRegistration?","  private var cancelables = Set<AnyCancellable>()","","  init() {","    authenticationService.$user","      .assign(to: &$user)","","    $user.sink { user in","      self.unsubscribe()","      self.subscribe(user: user)","    }","    .store(in: &cancelables)","","  }","","  deinit {","    unsubscribe()","  }","","  func subscribe(user: User? = nil) {","    if listenerRegistration == nil {","      if let localUser = user ?? self.user {","        let query = firestore.collection(Reminder.collectionName)","          .whereField(\"userId\", isEqualTo: localUser.uid)","","        listenerRegistration = query","          .addSnapshotListener { [weak self] (querySnapshot, error) in","            guard let documents = querySnapshot?.documents else {","              print(\"No documents\")","              return","            }","","            print(\"Mapping \\(documents.count) documents\")","            self?.reminders = documents.compactMap { queryDocumentSnapshot in","              do {","                return try queryDocumentSnapshot.data(as: Reminder.self)","              }","              catch {","                print(\"Error while trying to map document \\(queryDocumentSnapshot.documentID): \\(error.localizedDescription)\")","                return nil","              }","            }","          }","      }","    }","  }","","  private func unsubscribe() {","    if listenerRegistration != nil {","      listenerRegistration?.remove()","      listenerRegistration = nil","    }","  }","","  func addReminder(_ reminder: Reminder) throws {","    var mutableReminder = reminder","    mutableReminder.userId = user?.uid","","    try firestore","      .collection(Reminder.collectionName)","      .addDocument(from: mutableReminder)","  }","","  func updateReminder(_ reminder: Reminder) throws {","    guard let documentId = reminder.id else {","      fatalError(\"Reminder \\(reminder.title) has no document ID.\")","    }","    try firestore","      .collection(Reminder.collectionName)","      .document(documentId)","      .setData(from: reminder, merge: true)","  }","","  func removeReminder(_ reminder: Reminder) {","    guard let documentId = reminder.id else {","      fatalError(\"Reminder \\(reminder.title) has no document ID.\")","    }","    firestore","      .collection(Reminder.collectionName)","      .document(documentId)","      .delete()","  }","","}"],"fileName":"RemindersRepository.swift","identifier":"01-anonymous-auth-05-RemindersRepository-04.swift","type":"file","fileType":"swift","highlights":[{"line":74},{"line":75},{"line":76},{"line":79}]},"doc://com.example.MakeItSo/tutorials/MakeItSo":{"role":"overview","title":"SwiftUI and Firebase","abstract":[{"type":"text","text":"Learn how to use Firebase in SwiftUI apps by building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a replica of Apple’s Reminders app."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo","kind":"overview","type":"topic","url":"\/tutorials\/makeitso"},"01-anonymous-auth-02-AuthenticationService-13.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","","public class AuthenticationService {","  @Injected(\\.auth) private var auth","  @Published var user: User?","","  private var authStateHandler: AuthStateDidChangeListenerHandle?","","  init() {","    registerAuthStateHandler()","    signInAnonymously()","  }","","  func registerAuthStateHandler() {","    if authStateHandler == nil {","      authStateHandler = auth.addStateDidChangeListener { auth, user in","        self.user = user","      }","    }","  }","","  func signOut() {","    do {","      try auth.signOut()","      signInAnonymously()","    }","    catch {","      print(\"Error while trying to sign out: \\(error.localizedDescription)\")","    }","  }","","}","","\/\/ MARK: - Sign in anonymously","","extension AuthenticationService {","  func signInAnonymously() {","    if auth.currentUser == nil {","      print(\"Nobody is signed in. Trying to sign in anonymously.\")","      auth.signInAnonymously()","    }","    else {","      if let user = auth.currentUser {","        print(\"Someone is signed in with \\(user.providerID) and user ID \\(user.uid)\")","      }","    }","  }","}"],"fileName":"AuthenticationService.swift","identifier":"01-anonymous-auth-02-AuthenticationService-13.swift","type":"file","fileType":"swift","highlights":[{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Developing-Locally-with-the-Emulator-Suite#Launch-the-Emulator-and-view-the-Emulator-dashboard":{"role":"pseudoSymbol","title":"Launch the Emulator and view the Emulator dashboard","abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/docs\/emulator-suite"},{"type":"text","text":" is a set of advanced tools for developers looking to build and test apps locally using Cloud Firestore, Realtime Database, Cloud Storage for Firebase, Authentication, Firebase Hosting, Cloud Functions (beta), Pub\/Sub (beta), and Firebase Extensions (beta). It provides a rich user interface to help you get running and prototyping quickly."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Developing-Locally-with-the-Emulator-Suite#Launch-the-Emulator-and-view-the-Emulator-dashboard","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-developing-locally-with-the-emulator-suite#Launch-the-Emulator-and-view-the-Emulator-dashboard"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Mark-Reminders-as-completed":{"role":"pseudoSymbol","title":"Mark Reminders as completed","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Mark-Reminders-as-completed","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Mark-Reminders-as-completed"},"01-anonymous-auth-04-UserProfileViewModel-01.swift":{"syntax":"swift","content":["import SwiftUI","import Factory","import Combine","import FirebaseAuth","","class UserProfileViewModel: ObservableObject {","  @Injected(\\.authenticationService)","  private var authenticationService","","  @Published var authenticationState: AuthenticationState = .unauthenticated","  @Published var errorMessage = \"\"","  @Published var user: User?","  @Published var provider = \"\"","  @Published var displayName = \"\"","  @Published var email = \"\"","","  @Published var isGuestUser = false","  @Published var isVerified = false","","  init() {","    $user","      .compactMap { user in","        user?.isAnonymous","      }","      .assign(to: &$isGuestUser)","","    $user","      .compactMap { user in","        user?.isEmailVerified","      }","      .assign(to: &$isVerified)","","    $user","      .compactMap { user in","        user?.displayName ?? \"N\/A\"","      }","      .assign(to: &$displayName)","","    $user","      .compactMap { user in","        user?.email ?? \"N\/A\"","      }","      .assign(to: &$email)","","    $user","      .compactMap { user in","        if let providerData = user?.providerData.first {","          return providerData.providerID","        }","        else {","          return user?.providerID","        }","      }","      .assign(to: &$provider)","","  }","","  func deleteAccount() async -> Bool {","    fatalError(\"Not implemented yet\")","  }","","  func signOut() {","    fatalError(\"Not implemented yet\")","  }","}"],"fileName":"UserProfileViewModel.swift","identifier":"01-anonymous-auth-04-UserProfileViewModel-01.swift","type":"file","fileType":"swift","highlights":[{"line":7},{"line":8},{"line":9}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/04-Updating-Data-in-Cloud-Firestore#Mark-reminders-as-completed":{"role":"pseudoSymbol","title":"Mark reminders as completed","abstract":[{"type":"text","text":"So far, the app you’re building can help you add an keep track of your todos, but you cannot mark them as completed."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/04-Updating-Data-in-Cloud-Firestore#Mark-reminders-as-completed","kind":"section","type":"section","url":"\/tutorials\/makeitso\/04-updating-data-in-cloud-firestore#Mark-reminders-as-completed"},"01-anonymous-auth-04-RemindersRepository-01.swift":{"syntax":"swift","content":["import Foundation","import Combine","import Factory","import FirebaseFirestore","import FirebaseFirestoreSwift","","public class RemindersRepository: ObservableObject {","  \/\/ MARK: - Dependencies","  @Injected(\\.firestore) var firestore","  @Injected(\\.authenticationService) var authenticationService","","  @Published","  var reminders = [Reminder]()","","  private var listenerRegistration: ListenerRegistration?","","  init() {","    subscribe()","  }","","  deinit {","    unsubscribe()","  }","","  func subscribe() {","    if listenerRegistration == nil {","      let query = firestore.collection(Reminder.collectionName)","","      listenerRegistration = query","        .addSnapshotListener { [weak self] (querySnapshot, error) in","          guard let documents = querySnapshot?.documents else {","            print(\"No documents\")","            return","          }","","          print(\"Mapping \\(documents.count) documents\")","          self?.reminders = documents.compactMap { queryDocumentSnapshot in","            do {","              return try queryDocumentSnapshot.data(as: Reminder.self)","            }","            catch {","              print(\"Error while trying to map document \\(queryDocumentSnapshot.documentID): \\(error.localizedDescription)\")","              return nil","            }","          }","        }","    }","  }","","  private func unsubscribe() {","    if listenerRegistration != nil {","      listenerRegistration?.remove()","      listenerRegistration = nil","    }","  }","","  func addReminder(_ reminder: Reminder) throws {","    try firestore","      .collection(Reminder.collectionName)","      .addDocument(from: reminder)","  }","","  func updateReminder(_ reminder: Reminder) throws {","    guard let documentId = reminder.id else {","      fatalError(\"Reminder \\(reminder.title) has no document ID.\")","    }","    try firestore","      .collection(Reminder.collectionName)","      .document(documentId)","      .setData(from: reminder, merge: true)","  }","","  func removeReminder(_ reminder: Reminder) {","    guard let documentId = reminder.id else {","      fatalError(\"Reminder \\(reminder.title) has no document ID.\")","    }","    firestore","      .collection(Reminder.collectionName)","      .document(documentId)","      .delete()","  }","","}"],"fileName":"RemindersRepository.swift","identifier":"01-anonymous-auth-04-RemindersRepository-01.swift","type":"file","fileType":"swift","highlights":[{"line":10}]},"01-anonymous-auth-02-AuthenticationService-05.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","","public class AuthenticationService {","  @Injected(\\.auth) private var auth","  @Published var user: User?","","  private var authStateHandler: AuthStateDidChangeListenerHandle?","","  func registerAuthStateHandler() {","    if authStateHandler == nil {","      authStateHandler = auth.addStateDidChangeListener { auth, user in","      }","    }","  }","","}"],"fileName":"AuthenticationService.swift","identifier":"01-anonymous-auth-02-AuthenticationService-05.swift","type":"file","fileType":"swift","highlights":[{"line":13},{"line":14}]},"01-anonymous-auth-02-AuthenticationService-02.swift":{"syntax":"swift","content":["import Foundation","import FirebaseAuth","","public class AuthenticationService {","}"],"fileName":"AuthenticationService.swift","identifier":"01-anonymous-auth-02-AuthenticationService-02.swift","type":"file","fileType":"swift","highlights":[{"line":2},{"line":3},{"line":4},{"line":5}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Display-a-List-of-Reminders":{"role":"pseudoSymbol","title":"Display a List of Reminders","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Display-a-List-of-Reminders","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Display-a-List-of-Reminders"},"01-anonymous-auth-05-Reminder-01.swift":{"syntax":"swift","content":["import Foundation","import FirebaseFirestoreSwift","","struct Reminder: Identifiable, Codable {","  @DocumentID","  var id: String?","  var title: String","  var isCompleted = false","  var userId: String? = nil","}","","extension Reminder {","  static let collectionName = \"reminders\"","}","","extension Reminder {","  static let samples = [","    Reminder(title: \"Build sample app\", isCompleted: true),","    Reminder(title: \"Create tutorial\"),","    Reminder(title: \"???\"),","    Reminder(title: \"PROFIT!\"),","  ]","}"],"fileName":"Reminder.swift","identifier":"01-anonymous-auth-05-Reminder-01.swift","type":"file","fileType":"swift","highlights":[{"line":9}]},"01-anonymous-auth-02-Firebase+Injection-01.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","import FirebaseFirestore","import FirebaseFirestoreSwift","","extension Container {","","  \/\/\/ Determines whether to use the Firebase Local Emulator Suite.","  \/\/\/ To use the local emulator, go to the active scheme, and add `-useEmulator YES`","  \/\/\/ to the _Arguments Passed On Launch_ section.","  public var useEmulator: Factory<Bool> {","    Factory(self) {","      let value =  UserDefaults.standard.bool(forKey: \"useEmulator\")","      print(\"Using the emulator: \\(value == true ? \"YES\" : \"NO\")\")","      return value","    }.singleton","  }","","  public var auth: Factory<Auth> {","    Factory(self) {","      var environment = \"\"","      if Container.shared.useEmulator() {","        let host = \"localhost\"","        let port = 9099","        environment = \"to use the local emulator on \\(host):\\(port)\"","        Auth.auth().useEmulator(withHost: host, port: port)","      }","      else {","        environment = \"to use the Firebase backend\"","      }","      print(\"Configuring Firebase Auth \\(environment).\")","      return Auth.auth()","    }.singleton","  }","","  public var firestore: Factory<Firestore> {","    Factory(self) {","      var environment = \"\"","      if Container.shared.useEmulator() {","        let settings = Firestore.firestore().settings","        settings.host = \"localhost:8080\"","        settings.cacheSettings = MemoryCacheSettings()","        settings.isSSLEnabled = false","        environment = \"to use the local emulator on \\(settings.host)\"","","        Firestore.firestore().settings = settings","      }","      else {","        environment = \"to use the Firebase backend\"","      }","      print(\"Configuring Cloud Firestore \\(environment).\")","      return Firestore.firestore()","    }.singleton","  }","}"],"fileName":"Firebase+Injection.swift","identifier":"01-anonymous-auth-02-Firebase+Injection-01.swift","type":"file","fileType":"swift","highlights":[{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36}]},"01-anonymous-auth-04-MakeItSoApp-01.swift":{"syntax":"swift","content":["import SwiftUI","import Factory","import FirebaseCore","import FirebaseAuth","import FirebaseFirestore","","class AppDelegate: NSObject, UIApplicationDelegate {","  @LazyInjected(\\.authenticationService)","  private var authenticationService","","  func application(_ application: UIApplication,","                   didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil) -> Bool {","","    FirebaseApp.configure()","    return true","  }","}","","@main","struct MakeItSoApp: App {","  @UIApplicationDelegateAdaptor(AppDelegate.self) var delegate","  var body: some Scene {","    WindowGroup {","      NavigationStack {","        RemindersListView()","          .navigationTitle(\"Reminders\")","      }","    }","  }","}"],"fileName":"MakeItSoApp.swift","identifier":"01-anonymous-auth-04-MakeItSoApp-01.swift","type":"file","fileType":"swift","highlights":[{"line":2},{"line":8},{"line":9},{"line":10}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Anonymous-Auth#Add-a-userId-property-to-the-Reminder-struct":{"role":"pseudoSymbol","title":"Add a userId property to the Reminder struct","abstract":[{"type":"text","text":"It seems like MakeItSo meets the bar for an MVP (minimum viable product): users can add new reminders, check them off, change their details, and even delete them. But - as you might have noticed when running the app on two different iOS Simulators - the app is not multi-user capable. What’s worse, it seems like all users can see everyone else’s todo items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Add-a-userId-property-to-the-Reminder-struct","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-anonymous-auth#Add-a-userId-property-to-the-Reminder-struct"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Pass-Data-From-the-Child-View":{"role":"pseudoSymbol","title":"Pass Data From the Child View","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Pass-Data-From-the-Child-View","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Pass-Data-From-the-Child-View"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project#Add-Firebase-SDKs-to-Your-App":{"role":"pseudoSymbol","title":"Add Firebase SDKs to Your App","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Add-Firebase-SDKs-to-Your-App","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project#Add-Firebase-SDKs-to-Your-App"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Sign-in-with-Apple#Enable-the-Sign-in-with-Apple-capability-for-your-app":{"role":"pseudoSymbol","title":"Enable the Sign in with Apple capability for your app","abstract":[{"type":"text","text":"Your app is now capable of storing data on a per-user basis. You achieved this by implementing Firebase Anonymous Authentication in the previous chapter, and then using the anonymous user’s ID to tag their reminders when storing them in Cloud Firestore."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple#Enable-the-Sign-in-with-Apple-capability-for-your-app","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-sign-in-with-apple#Enable-the-Sign-in-with-Apple-capability-for-your-app"},"01-anonymous-auth-04-UserProfileViewModel-02.swift":{"syntax":"swift","content":["import SwiftUI","import Factory","import Combine","import FirebaseAuth","","class UserProfileViewModel: ObservableObject {","  @Injected(\\.authenticationService)","  private var authenticationService","","  @Published var authenticationState: AuthenticationState = .unauthenticated","  @Published var errorMessage = \"\"","  @Published var user: User?","  @Published var provider = \"\"","  @Published var displayName = \"\"","  @Published var email = \"\"","","  @Published var isGuestUser = false","  @Published var isVerified = false","","  init() {","    authenticationService.$user","      .assign(to: &$user)","","    $user","      .compactMap { user in","        user?.isAnonymous","      }","      .assign(to: &$isGuestUser)","","    $user","      .compactMap { user in","        user?.isEmailVerified","      }","      .assign(to: &$isVerified)","","    $user","      .compactMap { user in","        user?.displayName ?? \"N\/A\"","      }","      .assign(to: &$displayName)","","    $user","      .compactMap { user in","        user?.email ?? \"N\/A\"","      }","      .assign(to: &$email)","","    $user","      .compactMap { user in","        if let providerData = user?.providerData.first {","          return providerData.providerID","        }","        else {","          return user?.providerID","        }","      }","      .assign(to: &$provider)","","  }","","  func deleteAccount() async -> Bool {","    fatalError(\"Not implemented yet\")","  }","","  func signOut() {","    fatalError(\"Not implemented yet\")","  }","}"],"fileName":"UserProfileViewModel.swift","identifier":"01-anonymous-auth-04-UserProfileViewModel-02.swift","type":"file","fileType":"swift","highlights":[{"line":21},{"line":22},{"line":23}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Connect-the-view-model":{"role":"pseudoSymbol","title":"Connect the view model","abstract":[{"type":"text","text":"Now that you’ve implemented a "},{"type":"codeVoice","code":"RemindersRepository"},{"type":"text","text":", and wrote code for storing "},{"type":"codeVoice","code":"Reminder"},{"type":"text","text":"s to Firestore, it is time to retrieve reminders from Firestore, so they can be displayed in the app’s UI."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/03-Retrieving-Data-from-Cloud-Firestore-in-Real-Time#Connect-the-view-model","kind":"section","type":"section","url":"\/tutorials\/makeitso\/03-retrieving-data-from-cloud-firestore-in-real-time#Connect-the-view-model"},"doc://com.example.MakeItSo/tutorials/MakeItSo/05-Deleting-Data-from-Cloud-Firestore":{"role":"project","title":"Deleting data from Cloud Firestore","estimatedTime":"15min","abstract":[{"type":"text","text":"In this chapter of the tutorial, you’ve written code for creating, reading, and updating data in Cloud Firestore. There is one more data operation that is common for many apps: deleting data."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/05-Deleting-Data-from-Cloud-Firestore","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/05-deleting-data-from-cloud-firestore"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Dependency-Injection-with-Factory#Inject-RemindersRepository-into-RemindersListViewModel":{"role":"pseudoSymbol","title":"Inject RemindersRepository into RemindersListViewModel","abstract":[{"type":"text","text":"Even though "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MakeItSo"}]},{"type":"text","text":" is a relatively simple app, it consists of quite a few components that need to interact with each other: models, views, view models, repositories, and different backend services like Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Inject-RemindersRepository-into-RemindersListViewModel","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-dependency-injection-with-factory#Inject-RemindersRepository-into-RemindersListViewModel"},"01-anonymous-auth-01-walkthrough-RemindersListView-01.png":{"alt":null,"type":"image","identifier":"01-anonymous-auth-01-walkthrough-RemindersListView-01.png","variants":[{"url":"\/images\/01-anonymous-auth-01-walkthrough-RemindersListView-01@2x.png","traits":["2x","light"]}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/05-Deleting-Data-from-Cloud-Firestore#Add-a-method-for-deleting-reminders-to-the-view-model":{"role":"pseudoSymbol","title":"Add a method for deleting reminders to the view model","abstract":[{"type":"text","text":"In this chapter of the tutorial, you’ve written code for creating, reading, and updating data in Cloud Firestore. There is one more data operation that is common for many apps: deleting data."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/05-Deleting-Data-from-Cloud-Firestore#Add-a-method-for-deleting-reminders-to-the-view-model","kind":"section","type":"section","url":"\/tutorials\/makeitso\/05-deleting-data-from-cloud-firestore#Add-a-method-for-deleting-reminders-to-the-view-model"},"01-anonymous-auth-04-SettingsViewModel-02.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","import Combine","","class SettingsViewModel: ObservableObject {","  @Injected(\\.authenticationService)","  private var authenticationService","","  @Published var user: User?","  @Published var displayName = \"\"","","  @Published var isGuestUser = false","","  @Published var loggedInAs = \"\"","","  init() {","    authenticationService.$user","      .assign(to: &$user)","","    $user","      .compactMap { user in","        user?.isAnonymous","      }","      .assign(to: &$isGuestUser)","","    $user","      .compactMap { user in","        user?.displayName ?? user?.email ?? \"\"","      }","      .assign(to: &$displayName)","","    Publishers.CombineLatest($isGuestUser, $displayName)","      .map { isGuest, displayName in","        isGuest","          ? \"You're using the app as a guest\"","          : \"Logged in as \\(displayName)\"","      }","      .assign(to: &$loggedInAs)","  }","","  func signOut() {","    fatalError(\"Not implemented yet\")","  }","}"],"fileName":"SettingsViewModel.swift","identifier":"01-anonymous-auth-04-SettingsViewModel-02.swift","type":"file","fileType":"swift","highlights":[{"line":18},{"line":19},{"line":20}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Anonymous-Auth#Inject-AuthenticationService-into-its-dependants":{"role":"pseudoSymbol","title":"Inject AuthenticationService into its dependants","abstract":[{"type":"text","text":"It seems like MakeItSo meets the bar for an MVP (minimum viable product): users can add new reminders, check them off, change their details, and even delete them. But - as you might have noticed when running the app on two different iOS Simulators - the app is not multi-user capable. What’s worse, it seems like all users can see everyone else’s todo items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Anonymous-Auth#Inject-AuthenticationService-into-its-dependants","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-anonymous-auth#Inject-AuthenticationService-into-its-dependants"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Storing-Data-in-Cloud-Firestore#Implement-a-method-for-adding-new-reminders-to-the-repository":{"role":"pseudoSymbol","title":"Implement a method for adding new reminders to the repository","abstract":[{"type":"text","text":"With the UI of the application in place, and Firebase set up for local development, it is now time to store data in the cloud."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Implement-a-method-for-adding-new-reminders-to-the-repository","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-storing-data-in-cloud-firestore#Implement-a-method-for-adding-new-reminders-to-the-repository"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Storing-Data-in-Cloud-Firestore#Connect-the-view-model-to-the-repository":{"role":"pseudoSymbol","title":"Connect the view model to the repository","abstract":[{"type":"text","text":"With the UI of the application in place, and Firebase set up for local development, it is now time to store data in the cloud."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Connect-the-view-model-to-the-repository","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-storing-data-in-cloud-firestore#Connect-the-view-model-to-the-repository"},"01-anonymous-auth-03-AuthenticationService+Injection-01.swift":{"syntax":"swift","content":["import Foundation"],"fileName":"AuthenticationService+Injection.swift","identifier":"01-anonymous-auth-03-AuthenticationService+Injection-01.swift","type":"file","fileType":"swift","highlights":[]},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Sign-in-with-Apple":{"role":"project","title":"Sign in with Apple and Firebase Authentication","estimatedTime":"25min","abstract":[{"type":"text","text":"Your app is now capable of storing data on a per-user basis. You achieved this by implementing Firebase Anonymous Authentication in the previous chapter, and then using the anonymous user’s ID to tag their reminders when storing them in Cloud Firestore."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Sign-in-with-Apple","kind":"project","type":"topic","url":"\/tutorials\/makeitso\/02-sign-in-with-apple"},"01-anonymous-auth-01-walkthrough-SettingsView-01.png":{"alt":null,"type":"image","identifier":"01-anonymous-auth-01-walkthrough-SettingsView-01.png","variants":[{"url":"\/images\/01-anonymous-auth-01-walkthrough-SettingsView-01@2x.png","traits":["2x","light"]}]},"01-anonymous-auth-01-walkthrough-RemindersListView-01.swift":{"syntax":"swift","content":["import SwiftUI","","struct RemindersListView: View {","  @StateObject","  private var viewModel = RemindersListViewModel()","","  @State","  private var isAddReminderDialogPresented = false","","  @State","  private var editableReminder: Reminder? = nil","","  private func presentAddReminderView() {","    isAddReminderDialogPresented.toggle()","  }","","  @State","  private var isSettingsScreenPresented = false","","  private func presentSettingsScreen() {","      isSettingsScreenPresented.toggle()","  }","","  var body: some View {","    List($viewModel.reminders) { $reminder in","      RemindersListRowView(reminder: $reminder)","        .swipeActions(edge: .trailing, allowsFullSwipe: true) {","          Button(role: .destructive, action: { viewModel.deleteReminder(reminder) }) {","            Image(systemName: \"trash\")","          }","          .tint(Color(UIColor.systemRed))","        }","        .onChange(of: reminder.isCompleted) { newValue in","          viewModel.setCompleted(reminder, isCompleted: newValue)","        }","        .onTapGesture {","          editableReminder = reminder","        }","    }","    .toolbar {","      ToolbarItem(placement: .confirmationAction) {","          Button(action: presentSettingsScreen) {","              Image(systemName: \"gearshape\")","          }","      }","      ToolbarItemGroup(placement: .bottomBar) {","        Button(action: presentAddReminderView) {","          HStack {","            Image(systemName: \"plus.circle.fill\")","            Text(\"New Reminder\")","          }","        }","        Spacer()","      }","    }","    .sheet(isPresented: $isAddReminderDialogPresented) {","      EditReminderDetailsView { reminder in","        viewModel.addReminder(reminder)","      }","    }","    .sheet(item: $editableReminder) { reminder in","      EditReminderDetailsView(mode: .edit, reminder: reminder) { reminder in","        viewModel.updateReminder(reminder)","      }","    }","    .sheet(isPresented: $isSettingsScreenPresented) {","      SettingsView()","    }","    .tint(.red)","  }","}","","struct ContentView_Previews: PreviewProvider {","  static var previews: some View {","    NavigationStack {","      RemindersListView()","        .navigationTitle(\"Reminders\")","    }","  }","}"],"fileName":"RemindersListView.swift","identifier":"01-anonymous-auth-01-walkthrough-RemindersListView-01.swift","type":"file","fileType":"swift","highlights":[{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":66},{"line":67},{"line":68}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Extract-Row-View#Title":{"role":"pseudoSymbol","title":"Title","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Extract-Row-View#Title","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-extract-row-view#Title"},"01-anonymous-auth-02-AuthenticationService-08.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","","public class AuthenticationService {","  @Injected(\\.auth) private var auth","  @Published var user: User?","","  private var authStateHandler: AuthStateDidChangeListenerHandle?","","  init() {","    registerAuthStateHandler()","  }","","  func registerAuthStateHandler() {","    if authStateHandler == nil {","      authStateHandler = auth.addStateDidChangeListener { auth, user in","        self.user = user","      }","    }","  }","","}","","\/\/ MARK: - Sign in anonymously","","extension AuthenticationService {","  func signInAnonymously() {","  }","}"],"fileName":"AuthenticationService.swift","identifier":"01-anonymous-auth-02-AuthenticationService-08.swift","type":"file","fileType":"swift","highlights":[{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Dependency-Injection-with-Factory#Make-Firebase-available-via-Dependency-Injection":{"role":"pseudoSymbol","title":"Make Firebase available via Dependency Injection","abstract":[{"type":"text","text":"Even though "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MakeItSo"}]},{"type":"text","text":" is a relatively simple app, it consists of quite a few components that need to interact with each other: models, views, view models, repositories, and different backend services like Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Make-Firebase-available-via-Dependency-Injection","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-dependency-injection-with-factory#Make-Firebase-available-via-Dependency-Injection"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Dependency-Injection-with-Factory#Use-Dependency-Injection-to-inject-Firebase-into-your-Repository":{"role":"pseudoSymbol","title":"Use Dependency Injection to inject Firebase into your Repository","abstract":[{"type":"text","text":"Even though "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MakeItSo"}]},{"type":"text","text":" is a relatively simple app, it consists of quite a few components that need to interact with each other: models, views, view models, repositories, and different backend services like Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Dependency-Injection-with-Factory#Use-Dependency-Injection-to-inject-Firebase-into-your-Repository","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-dependency-injection-with-factory#Use-Dependency-Injection-to-inject-Firebase-into-your-Repository"},"doc://com.example.MakeItSo/tutorials/MakeItSo/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase/Building-Reusable-UI-Components":{"role":"article","title":"Building Reusable UI Components","abstract":[],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/Creating-a-Simple-Todo-List-App-with-SwiftUI-and-Firebase\/Building-Reusable-UI-Components","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/creating-a-simple-todo-list-app-with-swiftui-and-firebase\/building-reusable-ui-components"},"doc://com.example.MakeItSo/tutorials/MakeItSo/00-Intro-to-Firebase-Authentication":{"role":"article","title":"Firebase Authenticatioon","estimatedTime":"10min","abstract":[{"type":"text","text":"Firebase Authentication provides backend services, easy-to-use SDKs, and ready-made UI libraries to authenticate users to your app. It supports authentication using passwords, phone numbers, popular federated identity providers like Google, Facebook and Twitter, and more."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/00-Intro-to-Firebase-Authentication","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/00-intro-to-firebase-authentication"},"01-anonymous-auth-03-AuthenticationService+Injection-05.swift":{"syntax":"swift","content":["import Foundation","import Factory","","extension Container {","  public var authenticationService: Factory<AuthenticationService> {","    self {","      AuthenticationService()","    }.singleton","  }","}"],"fileName":"AuthenticationService+Injection.swift","identifier":"01-anonymous-auth-03-AuthenticationService+Injection-05.swift","type":"file","fileType":"swift","highlights":[{"line":7}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Implementing-MVVM#Add-a-method-to-the-View-Model-for-toggling-the-completion-state-of-a-reminder":{"role":"pseudoSymbol","title":"Add a method to the View Model for toggling the completion state of a reminder","abstract":[{"type":"text","text":"With the basic views for displaying and adding todo items set up, it is time to think about the architecture of the app."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Implementing-MVVM#Add-a-method-to-the-View-Model-for-toggling-the-completion-state-of-a-reminder","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-implementing-mvvm#Add-a-method-to-the-View-Model-for-toggling-the-completion-state-of-a-reminder"},"01-anonymous-auth-02-AuthenticationService-06.swift":{"syntax":"swift","content":["import Foundation","import Factory","import FirebaseAuth","","public class AuthenticationService {","  @Injected(\\.auth) private var auth","  @Published var user: User?","","  private var authStateHandler: AuthStateDidChangeListenerHandle?","","  func registerAuthStateHandler() {","    if authStateHandler == nil {","      authStateHandler = auth.addStateDidChangeListener { auth, user in","        self.user = user","      }","    }","  }","","}"],"fileName":"AuthenticationService.swift","identifier":"01-anonymous-auth-02-AuthenticationService-06.swift","type":"file","fileType":"swift","highlights":[{"line":14}]},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Building-a-Simple-Todo-List-UI#Create-a-Dialog-for-Adding-New-Reminders":{"role":"pseudoSymbol","title":"Create a Dialog for Adding New Reminders","abstract":[{"type":"text","text":"This tutorial guides you through building "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":", a todo list application. You will start by creating a simple UI for displaying todo list items."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Building-a-Simple-Todo-List-UI#Create-a-Dialog-for-Adding-New-Reminders","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-building-a-simple-todo-list-ui#Create-a-Dialog-for-Adding-New-Reminders"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Intro-to-Cloud-Firestore":{"role":"article","title":"Cloud Firestore","estimatedTime":"5min","abstract":[{"type":"text","text":"Cloud Firestore is Firebase’s NoSQL cloud database for mobile, web, and server development."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Intro-to-Cloud-Firestore","kind":"article","type":"topic","url":"\/tutorials\/makeitso\/01-intro-to-cloud-firestore"},"01-anonymous-auth-04-AuthenticationViewModel-02.swift":{"syntax":"swift","content":["import Foundation","import Combine","import Factory","import FirebaseCore","import FirebaseAuth","","enum AuthenticationState {","  case unauthenticated","  case authenticating","  case authenticated","}","","enum AuthenticationFlow {","  case login","  case signUp","}","","@MainActor","class AuthenticationViewModel: ObservableObject {","  @Injected(\\.authenticationService)","  var authenticationService","","  @Published var email = \"\"","  @Published var password = \"\"","  @Published var confirmPassword = \"\"","","  @Published var flow: AuthenticationFlow = .signUp","  @Published var isOtherAuthOptionsVisible = false","","  @Published var isValid = false","  @Published var authenticationState: AuthenticationState = .unauthenticated","  @Published var errorMessage = \"\"","  @Published var user: User?","  @Published var displayName = \"\"","","  @Published var isGuestUser = false","  @Published var isVerified = false","","  private var cancellables = Set<AnyCancellable>()","","  init(flow: AuthenticationFlow = .signUp) {","    self.flow = flow","","    $flow","      .combineLatest($email, $password, $confirmPassword)","      .map { flow, email, password, confirmPassword in","        flow == .login","        ? !(email.isEmpty || password.isEmpty)","        : !(email.isEmpty || password.isEmpty || confirmPassword.isEmpty)","      }","      .assign(to: &$isValid)","","    $user","      .compactMap { user in","        user?.isAnonymous","      }","      .assign(to: &$isGuestUser)","","    $user","      .compactMap { user in","        user?.isEmailVerified","      }","      .assign(to: &$isVerified)","","    $user","      .compactMap { user in","        user?.displayName ?? user?.email ?? \"\"","      }","      .assign(to: &$displayName)","  }","","  func switchFlow() {","    flow = flow == .login ? .signUp : .login","    errorMessage = \"\"","  }","","  func reset() {","    flow = .login","    email = \"\"","    password = \"\"","    confirmPassword = \"\"","  }","","","  \/\/ MARK: - Account Deletion","  func deleteAccount() async -> Bool {","    return await authenticationService.deleteAccount()","  }","","  \/\/ MARK: - Signing out","  func signOut() {","    authenticationService.signOut()","  }","}"],"fileName":"AuthenticationViewModel.swift","identifier":"01-anonymous-auth-04-AuthenticationViewModel-02.swift","type":"file","fileType":"swift","highlights":[{"line":87},{"line":92}]},"01-anonymous-auth.zip":{"checksum":"5e4d3f28fe2b0c3064da57892aa027f3582650c5e5e13dcbbc82e6f6d61340ac886c36de360264f39f6c06e024446d11cd71fd338cbc7b99fd0a29e0f3db1f6c","type":"download","identifier":"01-anonymous-auth.zip","url":"\/downloads\/01-anonymous-auth.zip"},"doc://com.example.MakeItSo/tutorials/MakeItSo/02-Storing-Data-in-Cloud-Firestore#Conform-Reminder-to-Codable":{"role":"pseudoSymbol","title":"Conform Reminder to Codable","abstract":[{"type":"text","text":"With the UI of the application in place, and Firebase set up for local development, it is now time to store data in the cloud."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/02-Storing-Data-in-Cloud-Firestore#Conform-Reminder-to-Codable","kind":"section","type":"section","url":"\/tutorials\/makeitso\/02-storing-data-in-cloud-firestore#Conform-Reminder-to-Codable"},"doc://com.example.MakeItSo/tutorials/MakeItSo/01-Adding-Firebase-to-Your-Project#Register-Your-App-with-Firebase":{"role":"pseudoSymbol","title":"Register Your App with Firebase","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Make It So"}]},{"type":"text","text":" keeps a list of the user’s todo items, and stores them in Cloud Firestore. Before the app can store information in the cloud, you need to connect your project to Firebase."}],"identifier":"doc:\/\/com.example.MakeItSo\/tutorials\/MakeItSo\/01-Adding-Firebase-to-Your-Project#Register-Your-App-with-Firebase","kind":"section","type":"section","url":"\/tutorials\/makeitso\/01-adding-firebase-to-your-project#Register-Your-App-with-Firebase"},"01-anonymous-auth-04-UserProfileViewModel-03.swift":{"syntax":"swift","content":["import SwiftUI","import Factory","import Combine","import FirebaseAuth","","class UserProfileViewModel: ObservableObject {","  @Injected(\\.authenticationService)","  private var authenticationService","","  @Published var authenticationState: AuthenticationState = .unauthenticated","  @Published var errorMessage = \"\"","  @Published var user: User?","  @Published var provider = \"\"","  @Published var displayName = \"\"","  @Published var email = \"\"","","  @Published var isGuestUser = false","  @Published var isVerified = false","","  init() {","    authenticationService.$user","      .assign(to: &$user)","","    $user","      .compactMap { user in","        user?.isAnonymous","      }","      .assign(to: &$isGuestUser)","","    $user","      .compactMap { user in","        user?.isEmailVerified","      }","      .assign(to: &$isVerified)","","    $user","      .compactMap { user in","        user?.displayName ?? \"N\/A\"","      }","      .assign(to: &$displayName)","","    $user","      .compactMap { user in","        user?.email ?? \"N\/A\"","      }","      .assign(to: &$email)","","    $user","      .compactMap { user in","        if let providerData = user?.providerData.first {","          return providerData.providerID","        }","        else {","          return user?.providerID","        }","      }","      .assign(to: &$provider)","","  }","","  func deleteAccount() async -> Bool {","    return await authenticationService.deleteAccount()","  }","","  func signOut() {","    authenticationService.signOut()","  }","}"],"fileName":"UserProfileViewModel.swift","identifier":"01-anonymous-auth-04-UserProfileViewModel-03.swift","type":"file","fileType":"swift","highlights":[{"line":62},{"line":66}]}}}
@Tutorial(time: 25, projectFiles: 02-sign-in-with-apple.zip) {
  @XcodeRequirement(title: "Xcode 14", destination: "https://xcodereleases.com/")
  @Intro(title: "Sign in with Apple and Firebase Authentication") {
    Your app is now capable of storing data on a per-user basis. You achieved this by implementing Firebase Anonymous Authentication in the previous chapter, and then using the anonymous user's ID to tag their reminders when storing them in Cloud Firestore. 
    
    This is a great first step on implementing a smooth onboarding experience. Once users want to continue using your app, you should offer a way to create a full account by signing into your app. On Apple's platforms, Sign in with Apple is a popular authentication mechanism.
    
    In this part of the tutorial, you will implement Sign in with Apple to allow users to sign in to your app using their Apple ID. 
    
    Download the project files to begin building this project, and follow the steps below.
    @Image(source: hero-anonymous-auth)
  }
  
  @Comment {
    * Update the package name to somehting unique
    * Create a new plist file with the new package name
    * Enable the SiwA capability
    * Implement the service
    * Connect the viewmodel
    * Maybe add the SiwA button (but then, we'd have to remove it in the previous tutorial)
  }
  
  @Section(title: "Connect the app to your Apple developer account") {
    @ContentAndMedia {
      To be able to use Sign in with Apple, you will need to activate the Sign in with Apple capability for your app, which requires your app to be registered on your Apple developer account. In this first section, you will make sure your app is properly registered so all the following steps will work as intended.
    }
    
    @Steps {
      First, configure a unique bundle identifier for your app.
      
      @Step {
        At this point, your app probably uses the bundle identifier `com.example.MakeItSo`. If you try to register this bundle identifier with your Apple developer account and add the Sign in with Apple capability,you will see an error messag saying that the bundle identifier is not available. 
        
        > Note: This is because someone else already registered it, and - to prevent malicious actors from hijacking apps - Apple makes sure that all bundle IDs are unique and cannot be reused on the App Store.  
        
        @Image(source: 02-sign-in-with-apple-01-register-bundleid-failure.png)
      }
      
      @Step {
        Change your app's bundle ID to something unique. If you own a domain, use the reversed domain as the bundle ID. For example, `com.yourdomain.example.MakeItSo`. To set the bundle ID, open the project editor, select your app in the list of _TARGETS_, and navigate to the _Signing & Capabilities_ tab.
        
        @Image(source: 02-sign-in-with-apple-01-register-bundleid-01.png)
      }
      
      @Step {
        Select your development team from the _Team_ dropdown.
        
        @Image(source: 02-sign-in-with-apple-01-register-bundleid-02.png)
      }
      
      Since Firebase also uses this bundle ID to identify your app, you will now need to create a new `GoogleService-Info.plist` file.
      
      > Warning: Please do NOT edit your current `GoogleService-Info.plist` file! Most of the fields in this file are specific to your app, and need to be generated by Firebase. If you edit this file, you might run into some unexpected failures later.
      
      @Step {
        Open the [Firebase console for your project](https://console.firebase.google.com/project/_/overview), and navigate to the overview page. You should see your exising app registration.
        
        @Image(source: 02-sign-in-with-apple-01-create-new-plist-01.png)
      }
      
      @Step {
        Click on _+ Add app_, and then select the _iOS+_ icon to start registering your new bundle ID with your Firebase project.
      
        @Image(source: 02-sign-in-with-apple-01-create-new-plist-02.png)
      }
      
      @Step {
        Enter your app's new bundle ID, and optionally enter a nickname for your app. Click on _Register app_. 
      
        @Image(source: 02-sign-in-with-apple-01-create-new-plist-03.png)
      }
      
      @Step {
        Download the `GoogleService-Info.plist` file.
      
        @Image(source: 02-sign-in-with-apple-01-create-new-plist-04.png)
      }
      
      @Step {
        In Xcode, find your _existing_ `GoogleService-Info.plist` file, open the context menu and select _Show in Finder_. 
        
        Replace this file with the one you just downloaded.
        
        > Important: Make sure to remove any numbers from the downloaded file, so if it is named something like `GoogleService-Info (1).plist` file, remove the ` (1)`.
      
        @Image(source: 02-sign-in-with-apple-01-create-new-plist-05.png)
      }
      
    }
  }
    
  @Section(title: "Enable the Sign in with Apple capability for your app") {
    @ContentAndMedia {
      Now that your app is properly registered with yout Apple developer account and Firebase, you can add the _Sign in with Apple_ capability.
    }
    
    @Steps {
      @Step {
        Back in Xcode, make sure you are on the _Signing & Capabilities_ page of the project editor. Select _+ Capability_ button, and select _Sign in with Apple_ from the capabilities dialog.
        
        @Image(source: 02-sign-in-with-apple-02-enable-siwa-capability-01.png)
      }
    }
  }
      
  @Section(title: "Implement Sign in with Apple") {
    @ContentAndMedia {
      In the following section, you will implement a typical Sign in with Apple flow. You will first configure the Sign in with Apple request to ask the user to provide both their full name and their email address. Then, you will handle receiving the response, and ultimately use the user's Apple ID credential to sign into Firebase.
    }
    
    @Steps {
      @Step {
        Open `AuthenticationService.swift`, and create a new extension on `AuthenticationService`. 
        
        > Tip: Using an extension will help you keep your code nicely organised. You can also use `// MARK: - ` to create a visual marker in your code that will show up in many places in the Xcode editor. 
        @Code(name: "AuthenticationService.swift", file: 02-sign-in-with-apple-03-AuthenticationService-SiwA-01.swift, previousFile: 02-sign-in-with-apple-03-AuthenticationService-SiwA-00.swift)
      }
      @Step {
        Import `AuthenticationServices`.
        
        @Code(name: "AuthenticationService.swift", file: 02-sign-in-with-apple-03-AuthenticationService-SiwA-02.swift)
      }
      
      First, you will configure the Sign in with Apple request. 
      
      @Step {
        Create a new method named `handleSignInWithAppleRequest` inside the extension. You will use this method to configure the sign in request. For example, you can specifiy whether your app needs to know the user's full name or their email address.
        
        > Note: Apple encourages developers to mind the user's privacy and request as little information as possible of the user. 
        
        @Code(name: "AuthenticationService.swift", file: 02-sign-in-with-apple-03-AuthenticationService-SiwA-03.swift)
      }
      @Step {
        Request the user's email address and their fullname.
        
        @Code(name: "AuthenticationService.swift", file: 02-sign-in-with-apple-03-AuthenticationService-SiwA-04.swift)
      }
      @Step {
        Create a nonce and handle the unlikely event that generating the nonce fails.
        
        > Note: A nonce is a one-time code that can be used to add an additional layer of security to the sign-in flow.
        
        @Code(name: "AuthenticationService.swift", file: 02-sign-in-with-apple-03-AuthenticationService-SiwA-05.swift)
      }
      @Step {
        Create a new private property named `currentNonce` and use it to store the nonce. Then, comput the `SHA256` of the nonce and store it in the `request`. 
        
        @Code(name: "AuthenticationService.swift", file: 02-sign-in-with-apple-03-AuthenticationService-SiwA-06.swift)
      }
      
      Next, implement the code that will handle the result of the Sign in with Apple flow.
      
      @Step {
        Create a new method named `handleSignInWithAppleCompletion` inside the extension. Since this method will be called from the UI context, you need to make sure it runs on the main thread. One way to do this is to mark it with the `@MainActor` attribute.
        
        @Code(name: "AuthenticationService.swift", file: 02-sign-in-with-apple-03-AuthenticationService-SiwA-07.swift)
      }
      @Step {
        When this method is called, it receives the result of the Sign in with Apple flow in a `Result` type. This type can have one of two states: `failure`, or `success`.
        
        Unpack the `result` parameter. If the authentication flow failed, assign the error message to the `errorMessage` property, so it can be displayed on the UI.
        @Code(name: "AuthenticationService.swift", file: 02-sign-in-with-apple-03-AuthenticationService-SiwA-08.swift)
      }
      @Step {
        If the authentication flow completed successfully, first extract the credential from the response, making sure it is an Apple ID credential.
        @Code(name: "AuthenticationService.swift", file: 02-sign-in-with-apple-03-AuthenticationService-SiwA-09.swift)
      }
      @Step {
        Make sure the `nonce` is still set. This is to prevent anyone from spoofing a Sign in with Apple response.
        
        @Code(name: "AuthenticationService.swift", file: 02-sign-in-with-apple-03-AuthenticationService-SiwA-10.swift)
      }
      @Step {
        Extract the ID token from the credential.
        
        @Code(name: "AuthenticationService.swift", file: 02-sign-in-with-apple-03-AuthenticationService-SiwA-11.swift)
      }
      @Step {
        Convert the ID token into a string.
        
        @Code(name: "AuthenticationService.swift", file: 02-sign-in-with-apple-03-AuthenticationService-SiwA-12.swift)
      }
    }
  }
    
  @Section(title: "Sign in to Firebase and create a new user account") {
    @ContentAndMedia {
      Now that you've got the user's Apple ID token, you can use it to create an OAuth credential and use this to sign in to Firebase.
    }
    
    @Steps {
      @Step {
        Use Firebase's `OAuthProvider` to mint an OAuth credential with the ID token, the raw nonce, and the user's full name. 
        
        @Code(name: "AuthenticationService.swift", file: 02-sign-in-with-apple-03-AuthenticationService-SiwA-13.swift, previousFile: 02-sign-in-with-apple-03-AuthenticationService-SiwA-12.swift)
      }
      @Step {
        Call `auth.signIn(with:)` to sign in to Firebase with this credential.
        
        @Code(name: "AuthenticationService.swift", file: 02-sign-in-with-apple-03-AuthenticationService-SiwA-14.swift)
      }
    }
  }
      
  @Section(title: "Connect the UI") {
    @ContentAndMedia {
      Having implemented Sign in with Apple in the `AuthenticationService`, you can now connect the implementation to the UI. 
    }
    
    @Steps {
      You will be using `AuthenticationViewModel` to connect the login and signup views to the `AuthenticationService`.
      @Step {
        In `AuthenticationViewModel.swift`, import `AuthenticationServices`, and create an extension on `AuthenticationViewModel`.
        
        @Code(name: "AuthenticationViewModel.swift", file: 02-sign-in-with-apple-05-AuthenticationViewModel-SiwA-01.swift, previousFile: 02-sign-in-with-apple-05-AuthenticationViewModel-SiwA-00.swift)
      }
      @Step {
        Create two methods `handleSignInWithAppleRequest`, and `handleSignInWithAppleCompletion`, and forward the calls to the `authenticationService`.
        
        @Code(name: "AuthenticationViewModel.swift", file: 02-sign-in-with-apple-05-AuthenticationViewModel-SiwA-02.swift)
      }
      
      Next, connect the `LoginView` to the view model.
      
      @Step {
        Navigate to `LoginView`, and find `SignInWithAppleButton`. This button is part of Apple's `AuthenticationServices` API, and has two closures. The first one is for setting up the request.
        
        Forward the call to the `handleSignInWithAppleRequest` on the view model. 
        
        @Code(name: "LoginView.swift", file: 02-sign-in-with-apple-05-LoginView-SiwA-01.swift, previousFile: 02-sign-in-with-apple-05-LoginView-SiwA-00.swift)
      }
      @Step {
        When the users completes the Sign in with Apple flow, the `onCompletion` handler will be called. Inside, forward the call to `handleSignInWithAppleCompletion` on the view model. If this call succeeds, you can dismiss `LoginView` by calling `dismiss`.
        
        @Code(name: "LoginView.swift", file: 02-sign-in-with-apple-05-LoginView-SiwA-02.swift)
      }
      
      And finally, connect the `SignupView` to the view model.
      
      @Step {
        Navigate to `SignupView`, and find `SignInWithAppleButton`. This button is part of Apple's `AuthenticationServices` API, and has two closures. The first one is for setting up the request.
        
        Forward the call to the `handleSignInWithAppleRequest` on the view model. 
        
        @Code(name: "SignupView.swift", file: 02-sign-in-with-apple-05-SignupView-SiwA-01.swift, previousFile: 02-sign-in-with-apple-05-SignupView-SiwA-00.swift)
      }
      @Step {
        When the users completes the Sign in with Apple flow, the `onCompletion` handler will be called. Inside, forward the call to `handleSignInWithAppleCompletion` on the view model. If this call succeeds, you can dismiss `SignupView` by calling `dismiss`.
        
        @Code(name: "SignupView.swift", file: 02-sign-in-with-apple-05-SignupView-SiwA-02.swift)
      }
    }
  }
    
  @Section(title: "Run the app") {
    @ContentAndMedia {
      Congratulations! In this chapter, you've implemented Sign in with Apple using Firebase Authentication in your app. It's now time to take the app for a spin and try out its new capabilities!
    }
    
    @Steps {
      
      @Step {
        Make sure the Firebase Emulator is running. Then, launch the app on an iOS Simulator, making sure that it is configured to connect to the Firebase Emulator.
      }
      @Step {
        When the app is started, it will first check if there already is a signed in user. If that's not the case, it will sign in an anonymous user.  You can verify this by navigating to the user profile view.
      }
      @Step {
        Try out all the features of the app. Specifically, create a couple of reminders using an anonymous account, and then sign in using Apple.
        @Video(source: 02-sign-in-with-apple-final-demo.mp4)
      }
      @Step {
        You will notice that the reminders you created using the anonymous account will not be visible once you've signed in using Sign in with Apple.
        
        > Important: This might or might not be what you expected, but the reason for this behaviour is that you signed in rather than linking the two accounts. In the next chapter, you will learn how to use account linking to upgrade an existing account and connect it to the new credentials.
        
        @Video(source: 02-sign-in-with-apple-final-demo.mp4)
      }
    }
  }
}

@Tutorial(time: 25, projectFiles: 02-storing-data-in-cloud-firestore.zip) {
  @XcodeRequirement(title: "Xcode 14", destination: "https://xcodereleases.com/")
  @Intro(title: "Storing data in Cloud Firestore") {
    With the UI of the application in place, and Firebase set up for local development, it is now time to store data in the cloud.
    
    You will create a repository for managing reminders, connect it to the view model you built earlier, and start adding reminders to the repository.
    
    Download the project files to begin building this project, and follow the steps below.
    @Image(source: hero-intro-to-cloud-firestore, alt: "")
  }
  
  @Section(title: "Implement a repository for managing reminders") {
    @ContentAndMedia {
      A repository is a software design pattern that provides an abstraction of the data storage layer of your app. Repositories provide some fundamental operations for working with data: **C**reating, **R**eading, **U**pdating, and **D**eleting (CRUD).
      
      In this and the next parts of the tutorial, you will create a `RemindersRepository`, which you will connect to the `RemindersListView` that you implemented earlier. 
      
      First, you will write code to add new reminders to Firestore using the `RemindersRepository`.
    }
    
    @Steps {
      @Step {
        Select the `Features/Reminders` folder of your project, and create a new folder named `Repositories`.
        @Image(source: storing-data-in-cloud-firestore-01-create-repository-01, alt: "")
      }
      @Step {
        Select the `Repositories` folder, and create a new Swift file named `RemindersRepository.swift` as a child of `Repositories`.
        @Image(source: storing-data-in-cloud-firestore-01-create-repository-02, alt: "")
      }
      @Step {
        Create a class named `RemindersRepository`, and conform it to the `ObservableObject` protocol.
        @Code(name: "RemindersRepository.swift", file: storing-data-in-cloud-firestore-01-RemindersRepository-01.swift, previousFile: storing-data-in-cloud-firestore-01-RemindersRepository-00.swift)
      }
      @Step {
        Add a new property named `reminders` and initialise it with an empty array. 
        @Code(name: "RemindersRepository.swift", file: storing-data-in-cloud-firestore-01-RemindersRepository-02.swift)
      }
      @Step {
        Add the `@Published` property wrapper to mark this property as published. 
        @Code(name: "RemindersRepository.swift", file: storing-data-in-cloud-firestore-01-RemindersRepository-03.swift)
      }
    }
  }
  
  @Section(title: "Implement a method for adding new reminders to the repository") {
    @ContentAndMedia {
    }
    
    @Steps {
      @Step {
        Add a new method `addReminder` to `RemindersRepository`.  
        @Code(name: "RemindersRepository.swift", file: storing-data-in-cloud-firestore-02-RemindersRepository-01.swift, previousFile: storing-data-in-cloud-firestore-01-RemindersRepository-03.swift)
      }
      @Step {
        Import `FirebaseFirestore` and `FirebaseFirestoreSwift`.
        
        > Note: Firebase is mostly implemented in Objective-C, and Firestore is mostly implemented in C++. `FirebaseFirestoreSwift` contains additinal protocols and property wrappers that you will be using in the following steps. 
        @Code(name: "RemindersRepository.swift", file: storing-data-in-cloud-firestore-02-RemindersRepository-02.swift)
      }
      @Step {
        Get a reference to your app's Firestore instance.
        
        > Note: At a later stage in this tutorial, you will use a _Dependency Injection container_ for managing dependencies between the individual components of the app. For now, it is OK to hardcode this dependency.
        @Code(name: "RemindersRepository.swift", file: storing-data-in-cloud-firestore-02-RemindersRepository-03.swift)
      }
      @Step {
        Construct a path to the Firestore collection in which you will store all reminders.
        
        @Code(name: "RemindersRepository.swift", file: storing-data-in-cloud-firestore-02-RemindersRepository-04.swift)
      }
      @Step {
        Call `addDocument(from:)` to create a new Firestore document using the data of the `reminder` struct. This call can throw an exception, so you need to call it using `try`.
        
        > Note: You will be handling exceptions in the UI, so you're able to provide meaningful feedback to the user.
        
        @Code(name: "RemindersRepository.swift", file: storing-data-in-cloud-firestore-02-RemindersRepository-05.swift)
      }
      
      > Warning: The compiler will now show an error message saying that 
      >
      > _Instance method 'addDocument(from:encoder:completion:)' requires that 'Reminder' conform to 'Encodable'_. 
      >
      > This is expected, and you will fix this in the next section.
    }
  }
  
  @Section(title: "Conform Reminder to Codable") {
    @ContentAndMedia {
      Firestore supports Swift's Codable protocol, which makes mapping Firestore documents to Swift structs (and vice versa) a lot less work than implementing the mapping manually.
      
      In this section, you will make the `Reminder` struct codable, so it can be saved to Firestore with just one line of code.
    }
    
    @Steps {
      @Step {
        Navigate to `Reminder.swift`, and note that it conforms to the `Identifiable` protocol. This is to make sure you can use `Reminder` instances in a `List` view. 
        
        > Note: `List` requires its elements to be identifiable, so that it can correctly determine which element is which when inserting or removing elements. This allows `List` to implement smooth animations.   
        @Code(name: "Reminder.swift", file: storing-data-in-cloud-firestore-03-Reminder-01.swift, previousFile: storing-data-in-cloud-firestore-03-Reminder-00.swift)
      }
      @Step {
        Mark `Reminder` as `Codable`.
        
        > Note: Sometimes, you might want to change the name of some attributes when mapping data using `Codable`, or you might want to execlude some attributes from being mapped. This can be achieved by providing a `CodingKeys` enum (see Apple's documentation [Encoding and Decoding Custom Types](https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types#2904057)).
        >
        > Since this is not required here, there is no need to provide a `CodingKeys` enum. 
        
        @Code(name: "Reminder.swift", file: storing-data-in-cloud-firestore-03-Reminder-02.swift)
      }
      @Step {
        Import `FirebaseFirestoreSwift` and mark the `id` property using the `@DocumentID` property wrapper. 
        
        The `@DocumentID` property wrapper will populate its property with the document ID when the document is read from Firestore. This is useful when you later want to update the document, as it allows you to use the document ID to construct the document path.
        
        @Code(name: "Reminder.swift", file: storing-data-in-cloud-firestore-03-Reminder-03.swift)
      }
    }
  }
    
  @Section(title: "Connect the view model to the repository") {
    @ContentAndMedia {
      So far, you've used `RemindersListViewModel` to store all reminders in-memory. In this step, you will connect the `ReminderRepository` you just created to `ReminderViewModel`. This will allow you to use Firestore to store reminders in the cloud. 
    }
    
    @Steps {
      @Step {
        Navigate to `RemindersListViewModel.swift`, and instantiate the repository.
        
        > Note: At a later stage in this tutorial, you will use a _Dependency Injection container_ for managing dependencies between the individual components of the app. For now, it is OK to hardcode this dependency. 
        
        @Code(name: "RemindersListViewModel.swift", file: storing-data-in-cloud-firestore-04-RemindersListViewModel-01.swift, previousFile: storing-data-in-cloud-firestore-04-RemindersListViewModel-00.swift)
      }
      @Step {
        Update `addReminder`. Instead of adding new reminders to the view model's `reminders` property, forward the call to the repository.
        
        @Code(name: "RemindersListViewModel.swift", file: storing-data-in-cloud-firestore-04-RemindersListViewModel-02.swift)
      }
      @Step {
        Implement some basic error handling. 
        
        @Code(name: "RemindersListViewModel.swift", file: storing-data-in-cloud-firestore-04-RemindersListViewModel-03.swift)
      }
    }
  }
    
  @Section(title: "Wrap up") {
    @ContentAndMedia {
      Congratulations! In this part of the tutorial, you connected your todo list app to Firestore. You created a repository for managing reminders, and implemented adding new reminders to Firestore. 
      
      You can now run the app and add a couple of reminders to Firestore. 
    }
    
    @Steps {
      @Step {
        Make sure the Firebase Emulator Suite is still running: Point your browser to [http://127.0.0.1:4000/firestore/data](http://127.0.0.1:4000/firestore/data). 
        
        
        > Note: If you don't see the _Firestore_ tab of the Firebase Emulator Suite, follow the steps in the [Developing Locally with the Emulator Suite](doc:02-Developing-Locally-with-the-Emulator-Suite) tutorial to set up the Firebase Emulator and connect your app to it.
        
        @Image(source: storing-data-in-cloud-firestore-05-run-the-app-01)
      }
      @Step {
        Make sure your app is configured to connect to the Firebase Emulator: open the launch configuration and ensure the check box on the `-useEmulator YES` argument is checked.
        
        @Image(source: storing-data-in-cloud-firestore-05-run-the-app-02)
      }
      @Step {
        Click on the _Play_ button (or press _CMD+R_) to run the app on the iOS Simulator.
        
        @Image(source: storing-data-in-cloud-firestore-05-run-the-app-03)
      }
      @Step {
        Tap on the _+ New Reminder_ button to open the _New Reminder_ dialog. Then, enter a title for your new reminder, and tap the _Add_ button to save the reminder.
        
        @Image(source: storing-data-in-cloud-firestore-05-run-the-app-04)
      }
      @Step {
        You should now see a new document in the Firstore Emulator. 
        
        > Note: If you don't see a document, press _CMD+R_ to refresh the browser window.
        
        @Video(source: storing-data-in-cloud-firestore-05-run-the-app.mp4)
      }
      
      > Note: You might notice that the UI of your app doesn't update - no matter how many new reminders you add.
      >
      > This is because your app doens't listen to updates yet.
      >
      > Proceed to the next chapter of the tutorial to implement real-time sync.
    }
  }
    
}

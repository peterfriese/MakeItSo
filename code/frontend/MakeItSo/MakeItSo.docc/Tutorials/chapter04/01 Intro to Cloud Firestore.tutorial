@Article(time: 5) {
  @Intro(title: "Cloud Firestore") {
    Cloud Firestore is Firebase's NoSQL cloud database for mobile, web, and server development.
    
    @Image(source: hero-intro-to-cloud-firestore, alt: "")
  }
  
  @ContentAndMedia {
    ## A flexible and scalable database
    
    In Cloud Firestore you can store data in flexible and hierarchical structures. Instead of using tables and columns as you would do in a SQL database, all data is stored in collections and documents, which have a very JSON-like structure, as you can see in the image on the side: each document contains fields mapping to values.
    
    @Image(source: firestore-document-structure.png, alt: "")
  }
  
  @Stack {
    @ContentAndMedia {
      Fields can be of the most variable types: strings, numbers, arrays, binary values and even references to other documents. This allows you to choose the data structure that works best for your application. Each document you create is stored in a collection, and it can have references to other subcollections that contain other documents (which can also point to subcollections, and so on). It means that documents do not contain other documents directly, so all the queries that you perform are shallow: when you retrieve one document, you only retrieve that specific document, not all the subcollections underneath.
          
      ![](firestore-collection-structure.png)
    }
  }
  
  @Stack {
    @ContentAndMedia {
      ## Querying in Cloud Firestore
      To retrieve data from Cloud Firestore you can either fetch individual documents, or query a collection for multiple documents that match a certain criteria, according to the parameters you provide in the query. These queries are also indexed by default, so the performance is proportional to the size of your result set (not your entire data set), making querying in Cloud Firestore efficient and flexible. Additionally, you can add sorting and limits to your queries and cursors to paginate your results.
    }
  }
  
  @Stack {
    @ContentAndMedia {
      ## Real-time sync
      Keeping data in your apps up to date is very important. To help you with that, Cloud Firestore offers data synchronization to update data across different platforms and devices, all you have to do is add real-time listeners to your app. You can listen to changes in a document by adding the onSnapshot() method to it. The first call to this method will create a document snapshot with the current contents of the single document, then another call will update this document snapshot each time the content changes.

      @Image(source: firestore-realtime-sync.gif, alt: "")
    }
    @ContentAndMedia {
      ## Offline support
      With Cloud Firestore your app can write, read and listen to data even if the device is offline, which can happen if your users are in a spot with bad or no reception (for example, inside an airplane). Firestore caches a copy of the data that your app is actively using so you can have access to it offline, and then it synchronizes all local changes back to Cloud Firestore when the device comes back online. You don't have to make any changes to the code, or configure anything on the Firebase console to be able to use offline persistence, as Cloud Firestore offers this feature out of the box.

      @Image(source: firestore-offline-support.png, alt: "")
    }
  }

}
